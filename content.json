{"meta":{"title":"Devlog","subtitle":"Front End Developer, Jbee's blog","description":"blog posted about web front development","author":"Jbee","url":"https://jaeyeophan.github.io"},"pages":[],"posts":[{"title":"YARN, 새로운 Package Manger","slug":"YARN-New-Package-Manger","date":"2017-04-21T10:18:49.000Z","updated":"2017-04-21T10:28:52.000Z","comments":true,"path":"2017/04/21/YARN-New-Package-Manger/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/21/YARN-New-Package-Manger/","excerpt":"","text":"YARNYARN이란 Facebook에서 만든 새로운 자바스크립트 패키지 매니저입니다. 기존에 존재하는 npm과 동일한 기능을 수행합니다. 그렇다면 Facebook은 YARN을 왜 만들었을까요? 이 부분에 대해서는 정리가 잘 되어 있는 링크를 첨부할게요!&gt;새로운 NPM Client YARN&gt; YARN 설치하기1$ brew install yarn Homebrew를 통하여 설치할 수 있습니다.1$ yarn --version 어느 모듈이나 마찬가지로 설치된 version을 확인할 수 있습니다. YARN 사용하기새 프로젝트 시작하기1$ yarn init npm과 마찬가지로 init이라는 명령어를 통해 시작할 수 있으며, package.json파일이 없는 경우에는 대화형 인터페이스가 출력되면서 프로젝트를 설정할 수 있습니다. 이미 package.json이 존재하는 경우에는 해당 파일을 재사용하게 됩니다. 패키지 설치하기123$ yarn add [package_name]$ yarn add [package_name]@[version]$ yarn add [package_name]@[tag] add라는 command로 패키지를 설치(add)할 수 있습니다. @로 설치할 version과 tag를 명시할 수 있습니다. add option1$ yarn add [package_name] --dev / -D 해당 패키지가 devDependencies에 추가됩니다.1$ yarn add [package_name] --peer / -P 해당 패키지가 peerDependencies에 추가됩니다.1$ yarn add [package_name] --optional / -O 해당 패키지가 optionalDependencies에 추가됩니다.1$ yarn add [package_name] --exact / -E @로 version을 명시할 수 있지만, 보다 strict하게 version을 명시하여 설치하는 경우에 사용합니다.1$ yarn add [package_name] --tilde / -T 기본적으로 가장 최근 release version의 패키지를 설치하지만, 좀 더 최신의 version을 설치하는 경우에 사용합니다. 패키지 업그레이드123$ yarn upgrade [package_name]$ yarn upgrade [package_name]@[version]$ yarn upgrade [package_name]@[tag] upgrade라는 명령어를 통해 설치한 패키지를 업그레이드 할 수 있습니다. 모듈 제거1$ yarn remove [package] remove라는 명령어를 통해 설치한 패키지를 제거할 수 있습니다. 다른 Command1$ yarn global [add/ls/remove/upgrade] npm에서의 --global 와 비슷한 기능을 수행하는 global 이 추가된 명령어입니다.1$ yarn clean clean 명령어는 현재 설치된 패키지들의 의존성을 분석하여 사용하지 않는, 불필요한 파일들을 제거해줍니다. 이 명령어를 한 번 실행하면 .yarnclean 파일이 생성되며 version control에 추가해야 합니다. 한 번 실행된 후, 불필요한 파일들을 제거해주는 작업은 yarn 커맨드를 통해 어떠한 패키지를 설치하는 경우(add or run command)에 자동적으로 수행됩니다.1$ yarn info [package_name] [option] info 명령어를 통해 해당 패키지의 정보를 볼 수 있습니다. option으로 readme를 입력하게 되면 해당 패키지에 작성된 README.md파일을 볼 수 있습니다.(다양한 option command가 존재합니다!)1$ yarn list [--depth] list 명령어를 통해 현재 작업 중인 디렉토리의 모든 패키지들의 의존성 관계를 리스트로 확인할 수 있습니다. depth 옵션을 통해서 level을 지정할 수도 있습니다.1$ yarn outdated [package] outdated 명령어를 통해 패키지들의 현재 설치된 version(Current)과 권장하는 version(Wanted), 최신 version(Latest)을 보여줍니다. 특정 [package]를 입력하여 원하는 패키지에 대해서만 볼 수 있습니다.1$ yarn pack pack 명령어를 통해 패키지의 의존성들을 gzip으로 압축시킬 수 있습니다.1$ yarn run [script] [--&lt;args&gt;] run 명령어를 통해 npm에서 처럼 package.json에서 정의한 scripts를 실행할 수 있습니다. 거의 모든 명령어가 기존에 사용하던 npm과 동일한 것을 확인하실 수 있었습니다 :) yarn.lockyarn으로 모듈을 설치하다보면 yarn.lock이라는 파일이 생성된 것을 확인할 수 있다. 이것은 설치한 모듈들의 각각 의존성 관리를 해줍니다.이미 package.json이 하고 있는거 아닌가? 라는 생각이 드는데요, 하지만 페이스북이 yarn을 만든 이유 중 하나는 보다 정확하게 패키지들의 의존성을 관리하기 위함이었습니다. yarn.lock 파일에는 package.json에 있는 것보다 더 많은 정보를 갖고 있습니다. 그렇기 때문에 좀 더 엄격한 의존성 관리가 가능하다고 합니다. (위에서 언급한 .yarnclean파일과 함께 version control system에 추가해줘야 합니다.) 참고할만한 링크 YARN vs NPM YARN Cheet Sheet","categories":[{"name":"Tool","slug":"Tool","permalink":"https://jaeyeophan.github.io/categories/Tool/"}],"tags":[{"name":"tool","slug":"tool","permalink":"https://jaeyeophan.github.io/tags/tool/"}]},{"title":"[ES6] 9. Iterator","slug":"ES6-9-Iterator","date":"2017-04-21T08:15:09.000Z","updated":"2017-04-21T08:18:11.000Z","comments":true,"path":"2017/04/21/ES6-9-Iterator/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/21/ES6-9-Iterator/","excerpt":"","text":"[ES6] 9. Iterator&gt;&gt;3. Iterable and for-of statement&gt;&gt;&gt;&gt;8. Symbol 이 포스팅은 이전에 작성된 두 포스팅을 기반으로 작성되었습니다. iterator는 순회 가능한 값들의 시퀀스를 만드는 방법을 정의한다.대표적인 순회 가능한 것은 Array다. Array 오브젝트는 Symbol.iterator를 가지고 있다.12let arr = [1, 2, 3];console.log(typeof arr[Symbol.iterator]);// function 위 예제 코드에서 정의한 arr의 iterator를 추출하여 arr를 순회할 수 있다.12345let iterator = arr[Symbol.iterator]();console.log(iterator.next());// &#123;value: 1, done: false&#125;console.log(iterator.next());// &#123;value: 2, done: false&#125;console.log(iterator.next());// &#123;value: 3, done: false&#125;console.log(iterator.next());// &#123;value: undefined, done: true&#125; iterator를 추출하자마자 head(공식 용어는 아니고 설명을 위한 용어)는 배열의 시작점을 가리키게 된다.(첫 원소를 가리키는 것이 아니다.) 그 상태에서 next()메소드를 호출하게 되면, 첫번재 원소가 출력된다. 출력 값은 원소의 값인 value와 done이라는 boolean 값을 가지고 있는 Object이다. 마지막 원소까지 출력된 상태에서 next() 메소드를 호출하게 되면 value는 undefined가 되고 done 값은 true가 된다. 문자열에도 적용할 수 있다. String 오브젝트도 iterable프로토콜을 구현한 오브젝트이기 때문에 iterator를 사용할 수 있는 것이다.1234567let name = \"jbee\";let iterator = name[Symbol.iterator]();console.log(iterator.next());// &#123;value: j, done: false&#125;console.log(iterator.next());// &#123;value: b, done: false&#125;console.log(iterator.next());// &#123;value: e, done: false&#125;console.log(iterator.next());// &#123;value: e, done: false&#125;console.log(iterator.next());// &#123;value: undefined, done: true&#125; Object에는 기본적으로 iterator가 존재하지 않는다. 때문에 for-of로 순회할 수 없다. 하지만 iterator를 오브젝트에 추가하여 iterable하게 만들 수 있다. 또한 배열을 상속받은 객체는 iterable 객체이므로 iterator를 사용할 수 있다. iterator를 사용하다 보면 뭔가 Java의 interface 또는 @FunctionalInterface 같은 느낌도 든다. java에서 해당 interface를 implements하게 되면 해당 기능을 사용할 수 있는 것처럼 구현하고자 하는 Symbol, 즉 iterator를 프로퍼티에 추가해서 사용하면 iterator 기능을 사용할 수 있는 것이다. 어떻게 하면 iterator를 그럴싸하게 사용해볼 수 있을까?다음 예제는 이렇게 사용하면 어떨까? 정도의 예제 코드이다. 가볍게 보고 넘어가자.12345678910111213141516171819202122232425// Object to create idlet autoIncrement = &#123; [Symbol.iterator]() &#123; let id = 0; return &#123; next() &#123; return &#123; value: ++id, done: false &#125; &#125; &#125; &#125;&#125;// Define User classclass User &#123; constructor(id, name) &#123; this.id = id; this.name = name; &#125;&#125;const idCreator = autoIncrement[Symbol.iterator]();console.log(new User(idCreator.next().value, \"jbee\"));// &#123; id: 1, name: 'jbee' &#125;console.log(new User(idCreator.next().value, \"foo\"));// &#123; id: 2, name: 'foo' &#125;console.log(new User(idCreator.next().value, \"bar\"));// &#123; id: 3, name: 'bar' &#125; autoIncraement 객체에 iterator 프로퍼티를 추가하여, id를 순차적으로 생성하게 만들었다. id에 대해서는 외부에서 접근할 수 없으므로 안정적인 id가 생성될 수 있지 않을까? 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 9.end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 8. Symbol","slug":"ES6-8-Symbol","date":"2017-04-20T02:53:45.000Z","updated":"2017-04-20T02:54:26.000Z","comments":true,"path":"2017/04/20/ES6-8-Symbol/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/20/ES6-8-Symbol/","excerpt":"","text":"[ES6] 8. SymbolSymbol이란 무엇인가? 고유하고 수정 불가능한 데이터 타입(?) 자바스크립트에는 Primitive type이라는 개념이 있다. ES5에는 string, number, boolean, null, undefined로 총 5가지의 원시 자료형이 존재한다. 여기에 ES6부터 symbol이라는 타입이 추가되었다. Primitive type들에게는 각각 Wrapper Object가 존재한다.(undefined와 null은 wrapper object가 존재하지 않는다.) String 오브젝트, Boolean오브젝트가 그 예이다. symbol도 마찬가지로 Symbol 오브젝트라는 wrapper Object가 존재한다. 각각의 wrapper obect에는 값을 처리하기 위한 메서드와 프로퍼티가 존재한다. valueOf()메소드를 통해 primitive value를 구할 수 있는 것이다. 하지만, symbol은 값을 반환하지 않는다! Symbol 도입 배경 왜 Symbol이 도입되었을까? 처음 Symbol을 봤을 때는 고유한 값이라는 말에 const를 떠올렸다. 하지만 Symbol은 프로그램 전체를 통틀어 유일한 값을 의미한다. Symbol()이 실행될 때마다 유일한 값을 생성하는 것이다. 약속된 Symbol 값을 가지고 객체에 어떠한 특성을 부여할 수 있지 않을까? Symbol이란 무엇인가 먼저 알아보자.(사실 라이브러리를 만들거나 프레임워크를 만들지 않는 이상, 실무에서 사용할 일이 거의 없을 것 같다.) Symbol에 대해서Symbol은 두 가지 스코프(scope)에 생성하여 저장할 수 있다. Symbol 생성하기 112let s = new Symbol(\"symbol description\");//Error: Symbol is not a constructor Symbol은 객체가 아니다. 객체가 아닌 Primitive type이기 때문에 new키워드를 통해서 생성할 수 없다.Symbol을 생성할 때에는 다음과 같이 생성한다. 1let s = Symbol(\"symbol description\"); console.log()를 통해 Symbol의 특징을 살펴보자.1234console.log(typeof s);//symbolconsole.log(s.toString());//Symbol(symbol description)console.log(s.valueOf());//&#123;&#125;console.log(s);//&#123;&#125; 1) Symbol의 타입은 symbol이다.2) 모든 built-in 오브젝트의 프로토타입에 연결되어 있는 toString 메소드를 통해서 Symbol의 형태(description)를 확인할 수 있다. 여기서 형태란 Symbol을 생성할 때 넘겨지는 parameter를 말한다. 주로 생성하는 Symbol을 설명하기 위한 문자열을 넘겨준다. 왠지 이 값을 통해 Symbol에 접근할 수 있을 것 같지만 그럴 수 없다.3) 뒤에서 확인할 테지만 Symbol은 값을 외부로 노출시키지 않는다. 이러한 특성 때문에 Symbol을 출력하려고 하거나 valueOf() 메소드를 통해 값을 출력하려고 하면 empty object가 반환이 된다. 12345let s1 = Symbol(\"foo\");let s2 = Symbol(\"foo\");console.log(\"s1: \", s1.toString());//Symbol(foo)console.log(\"s2: \", s2.toString());//Symbol(foo)console.log(s1 == s2);//false 두 Symbol은 같은 description을 갖고 있는 Symbol일 뿐, 다른 Symbol이다. Symbol()이 호출될 때마다 새로운 Symbol을 생성하기 때문이다. 이 때 Symbol은 생성한 scope에 Symbol값이 설정된다. Symbol 생성하기 2, key아까 생성한 Symbol을 다시 사용할 니즈가 있을 것 같다. 그래서 고유한 값을 갖는 Symbol을 만들 때, key를 등록하고, key를 통해 접근한다. for 메소드for 메소드를 사용하여 생성 또는 호출할 수 있다. key 값이 파라미터로 넘어가고 등록되어 있는 Symbol을 반환한다. 이 때 key 값에 해당하는 Symbol이 없다면 해당 Symbol을 Symbol registry에 등록한다. 즉 없으면 생성하는 것이다. keyFor 메소드keyFor 메소드는 Symbol을 받아서 해당 Symbol의 description 값을 반환한다. 12345678let sFor1 = Symbol.for(\"foo\");let sFor2 = Symbol.for(\"foo\");console.log(sFor1.toString());//Symbol(foo)console.log(sFor2.toString());//Symbol(foo)console.log(Symbol.keyFor(sFor1));//fooconsole.log(Symbol.keyFor(sFor2));//fooconsole.log(sFor1 == sFor2);//trueconsole.log(sFor1 === sFor2);//true 같은 key값으로 Symbol을 호출하게 되면 두 Symbol은 같은 Symbol이다. 위에서 그냥 Symbol()을 통해 생성한 것과의 차이점은 key값과 함께 Symbol을 만들게 되면 Global Symbol registry에 해당 Symbol이 등록되어 Symbol()이 호출될 때마다 새로운 Symbol이 생성되지 않는다.cf&gt; Global Symbol registry란 Symbol값을 공유하기 위한 영역으로 다른 자바스크립트 프레임워크에서도 공유할 수 있다. Symbol 특징 1위의 예제에서도 살펴봤듯이, Symbol은 값을 외부에 노출시키지 않는다.123let sym = Symbol(\"symbol description\");console.log (`symbol: $&#123;sym&#125;`);//TypeError: Cannot convert a Symbol value to string 그렇기 때문에 Template literal에서 사용할 수 없다. 또한 JSON.stringify()메소드를 통해서 특정 오브젝트를 stringify하려고 해도 빈 객체가 리턴된다.123456let sym = Symbol(\"symbol description\");let obj = &#123; [sym]: \"value\"&#125;let str = JSON.stringify(obj);console.log(str);//&#123;&#125; 값을 외부에 노출시키지 않기 때문이다. Symbol 특징 2객체에 Symbol로 등록된 프로퍼티를 symbol-keyed property라고 하는데 이 symbol-keyed property는 Object의 getOwnPropertyNames 반환 값에서 제외된다.user.js123456let user = &#123; [Symbol.for(\"name\")] : \"jbee\", age : 25, major: \"Computer Science\"&#125;console.log(Object.getOwnPropertyNames(user));//['age', 'major'] 그렇기 때문에 for-in statement에서 열거되지 않는다. user.js123456for (let item in user) &#123; console.log(item);&#125;console&gt;agemajor Object의 symbol-keyed property는 getOwnPropertySymbols() 메소드를 통해 확인할 수 있다.user.js1console.log(Object.getOwnPropertySymbols(user)[0].toString());//Symbol(name) symbol-keyed property로 value에 접근할 때는 []를 통해 접근해야 한다. .을 통해 접근하면 undefined가 반환된다.123456const sym = Symbol.for(\"name\");let user = &#123; [sym] : \"jbee\",&#125;console.log(user.sym);//undefinedconsole.log(user[sym]);//jbee .(dot)을 통해서 getOwnPropertyNames에서 반환되는 일반적인 프로퍼티에 접근했다면 symbol-keyed property에는[]을 통해 접근하는 것이라고 생각해볼 수 있겠다. Well-known Symbolsbuilt-in Symbol property로 Override하여 기능을 추가 및 변경할 수 있다. 대표적인 세 가지에 대해 알아보자.(iterator는 다음 포스팅에서 따로 다룬다.) Symbol.toStringTag객체의 기본 설명(description)에 사용되는 문자열 값을 지정할 수 있으며 Object.prototype.toString() 메소드가 호출될 때 사용된다.123456789101112131415161718class User &#123; constructor(name) &#123; this.name = name &#125;&#125;let user = new User(\"jbee\");console.log(user.toString());//[object Object]let obj = &#123; name: \"jbee\"&#125;console.log(obj.toString());//[object Object]User.prototype[Symbol.toStringTag] = \"User\";Object.prototype[Symbol.toStringTag] = \"Obj\";console.log(user.toString());//[object User]console.log(obj.toString());//[object Obj] new 키워드를 통해 생성한 인스턴스와 객체 리터럴로 생성한 객체 둘 다 [object Object]라는 값으로 출력되기 때문에 구분하는 것이 어렵다. toStringTag 프로퍼티를 오버라이드하여 customize할 수 있다. Symbol.toPrimitive1234let values = [1, 2, 3];let sum = values + 100;console.log(sum);//1,2,3100console.log(typeof sum);//string 배열이 string으로 casting이 되고 그 뒤에 연산되는 100 마저 string으로 casting이 된다. 그래서 결과값이 string타입의 1,2,3100이 되는 것이다.12345678910111213//overridingvalues[Symbol.toPrimitive] = function(hint) &#123; console.log(hint); let result = 0; for (let item of values) &#123; result += item; &#125; return result;&#125;let sum2 = values + 100;console.log(\"sum2: \", sum2);//106console.log(typeof sum2);//number 위 예제 코드에서는 toPrimitive라는 값을 통해서 배열의 값이 어떻게 반환될 지를 결정한다. 이 예제 코드에서는 배열의 모든 element 값을 더한 값으로 설정했다.hint라는 값을 console로 찍어보기만 하고 아직 사용하지 않았는데, 이 hint 값을 통해서 어떠한 형태로 반환할 지 분기를 나눌 수 있다. 다음 코드를 살펴보자.12345678910111213141516let obj = &#123; [Symbol.toPrimitive](hint) &#123; if (hint === \"number\") &#123; return 1; &#125; if (hint === \"string\") &#123; return \"문자열\"; &#125; return \"default\"; &#125;&#125;console.log (\"default: \", 100 + obj);//100defaultconsole.log (\"number: \", 1 * obj);//number: 1console.log (`string: $&#123;obj&#125;`);//string: 문자열console.log(+obj +1);//2 [Symbol.toPrimitive]()가 호출되면 자바스크립트 엔진은 parameter인 hint에 number, string, default 셋 중 하나를 설정하게 된다. 엔진은 어떻게 hint값을 설정할까? 네 개의 console을 찍어봤다. 100 + obj에서는 obj가 피연산자(연산 대상)이므로 default가 설정된다. 1 * obj에서는 *연산 때문에 number가 설정된다. (곱셈 말고도 뺄셈, 나눗셈도 number가 설정된다.) ${obj}에서는 Template literal로 사용되었으므로 string이 설정된다. +obj +1에서는 +라는 단항 연산자가 obj앞에 붙어서 number가 설정된다. Symbol.isConcatSpreadableArray 오브젝트의 concat()이라는 함수를 호출할 때의 상황을 지정하는 프로퍼티다. 두 배열을 결합할 때, 배열의 펼침 여부를 지정할 수 있다. default value는 true이다. 다음 예제 코드를 살펴보자.12345678let prev = [1, 2];let post = [3, 4];console.log(prev.concat(post));//[1, 2, 3, 4]prev[Symbol.isConcatSpreadable] = false;console.log(prev.concat(post));//[[1, 2], 3, 4]post[Symbol.isConcatSpreadable] = false;console.log(prev.concat(post));//[[1, 2], [3, 4]] 배열을 결합할 때, 펼치지 않고(프로퍼티 값을 false로 지정하고) 결합을 하게 되면, 배열의 구조를 그대로 유지하면서 합쳐진다. Array-like 오브젝트에서도 concat() 함수의 결과 형태를 지정할 수 있다. 정리이 이외에도 @@iterator, @@hasInstance, @@replace, @@species 등 다양한 Well-known Symbol들이 존재한다. 이 Well-known Symbol들은 이미 ES5 스펙에서부터 존재했었고 자연스럽게 그것들을 사용해왔던 것이고 ES6에서 각 프로퍼티들을 오버라이드하여 좀 더 유연한 코드를 작성할 수 있게 끔 공개된 것이다.cf&gt; @@은 Symbol 대신 사용할 수 있는 약자이다. Symbol과 관련된 다른 글들 (ES6) Symbol - 양권성님 블로그 글 8. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 7. Template literal","slug":"ES6-7-Template-literal","date":"2017-04-19T07:26:04.000Z","updated":"2017-04-19T07:30:41.000Z","comments":true,"path":"2017/04/19/ES6-7-Template-literal/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/19/ES6-7-Template-literal/","excerpt":"","text":"[ES6] 7. Template literal1console.log(`template literal`); ES6에서 문자열 처리를 보다 간편하게 할 수 있는 템플릿을 제공한다. 문자열 처리를 위해 single quote나 double quote가 아닌 Backtick을 사용한다. 변수를 ${ }로 감싸서 inline으로 표현할 수 있으며 \\n을 작성할 필요없이 Backtick 안에서 개행을 해주면 된다. 기존의 템플릿 엔진들에서 제공하고 있었던 기능인 ${ } 안에는 변수 또는 연산식 등의 표현식이 들어갈 수 있다.Example code&gt;12345678910111213141516let name = \"jbee\";//ES5console.log(\"Hi, \" + name + \"!\\nHave a nice day!\");// console&gt;// Hi, jbee!// Have a nice day!//ES6let grettingTemplate = `Hi, $&#123;name&#125;!Have a nice day!`;console.log(grettingTemplate);//console&gt;// Hi, jbee!// Have a nice day! Template literal을 사용하여 거추장스러운 &#39;+&#39;이나 &#39;\\n&#39;을 더이상 사용하지 않아도 된다. tagged template1234let name = \"jbee\"let num = 27;console.log(`hi, $&#123;name&#125;! Have a nice day! $&#123;num&#125; is your number`);//console&gt; hi, jbee! Have a nice day! 27 is your number 위 템플릿 리터럴을 tagged template을 사용하여 text와 value로 분리할 수 있다. text는 공백 문자를 기준으로 배열의 형태로 파라미터가 들어오며, ${ } 안의 표현식은 value라는 파라미터로 String type으로 들어온다.123456789function greet(text, value) &#123; console.log(text); console.log(value); console.log(typeof value);&#125;greet `hi, $&#123;name&#125;! Have a nice day! $&#123;num&#125; is your number`;//console&gt; [ 'hi, ', '! Have a nice day! ', ' is your number' ]//console&gt; jbee//console&gt; string parameter로 넘겨지는 value는 하나인데, 템플릿 리터럴에는 표현식이 두개가 존재한다. 그렇기 때문에 number에 해당하는 값이 함수로 넘겨지지 못했다.123456789function greet(text, value, value2) &#123; console.log(text); console.log(value); console.log(value2);&#125;greet `hi, $&#123;name&#125;! Have a nice day! $&#123;num&#125; is your number`;//console&gt; [ 'hi, ', '! Have a nice day! ', ' is your number' ]//console&gt; jbee//console&gt; 27 이렇게 해결할 수 있지만, 지난 chapter에서 다룬 Rest parameter를 사용할 수 있다.1234567function greet(text, ...value) &#123; console.log(text); console.log(value);&#125;greet `hi, $&#123;name&#125;! Have a nice day! $&#123;num&#125; is your number`;//console&gt; [ 'hi, ', '! Have a nice day! ', ' is your number' ]//console&gt; [ 'jbee', 27 ] 템플릿 리터컬의 표현식 값 결정템플릿 리터럴을 사용하여 문자열을 함수의 파라미터를 넘길 수 있을 것이다. 그렇다면 템플릿 러터럴 내부의 표현식의 값은 언제 결정될까?123456789//Assign expression statementfunction greeting(message) &#123; let name = `ecmascript`; console.log(message);&#125;let name = `jbee`;greeting(`Hi, $&#123;name&#125;`);//console&gt; Hi, jbee 함수의 파라미터로 넘겨질 때부터 결정되어 넘어가기 때문에 greeting이라는 함수 내부에 있는 local variable인 ecmascript라는 단어가 name으로 들어가지 않고 jbee라는 문자열이 name의 값으로 결정되었다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 7. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[TS] 0. Quick Start","slug":"TS-0-Quick-Start","date":"2017-04-19T04:49:15.000Z","updated":"2017-04-19T07:30:58.000Z","comments":true,"path":"2017/04/19/TS-0-Quick-Start/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/19/TS-0-Quick-Start/","excerpt":"","text":"[TS] 0. Quick Start이 포스팅은 TypeScript Official Document를 번역 및 의역한 자료입니다. 직접 타이핑 해본 결과 5분정도 소요되는 짧은 Quick start 입니다:) 가볍게 봐주세요. Install TypeScriptnpm을 통해서 간단하게 TypeScript를 설치할 수 있습니다. VSCode 등 타입스크립트를 지원하는 에디터에서는 플러그인을 통해서 설치가 가능합니다. via npm1$ npm install -g typescript command를 이용하여 또는 Editor를 열어 greeter.ts라는 파일을 만듭니다.1$ touch greeter.ts greeter.ts코드는 다음과 같습니다.1234567function greeter(person) &#123; return \"Hello, \" + person;&#125;var user = \"Jane User\";document.body.innerHTML = greeter(user); TypeScript는 .ts라는 확장자를 사용합니다. 이 파일은 컴파일되어 greeter.js파일이 됩니다.1tsc greeter.ts tsc라는 명령어를 통해서 TypeScript로 작성된 파일을 컴파일할 수 있습니다.현재 greeter.ts에 작성되어있는 코드는 기존의 JavaScript와 다를 바가 없습니다. 이 JavaScript code인 greeter.ts에 TypeScript 문법을 하나씩 추가해보겠습니다. TypeScript가 제공하는 대표적인 기능Type annotations동적으로 변수의 타입을 결정했던 JavaScript에게 타입이 생겼습니다.123function greeter(person: string) &#123; //...&#125; TypeScript는 Type을 제공합니다. Type annotations는 함수가 받는 parameter에 타입을 지정해주어, 함수 내부에서 별도의 타입 체크 없이 parameter를 사용할 수 있게 해줍니다. 즉, person에 다른 타입의 parameter가 주어지면 error가 발생하게 됩니다.1234567function greeter(person: string) &#123; return \"Hello, \" + person;&#125;var user = [0, 1, 2];document.body.innerHTML = greeter(user); error:1greeter.ts(7,26): Supplied parameters do not match any signature of call target 타입스크립트는 코드의 구조와 작성된 type annotation으로 정적 분석을 제공합니다. 위와 같이 error가 발생하더라도 타입스크립트 파일은 컴파일되어 .js파일을 만들게 됩니다. TypeScript의 역할은 제대로 동작하지 않을 것 같은 코드에 대해 개발자에게 warning해주는 역할이라고 생각해도 될 것 같습니다 :) InterfaceJava개발자라면 익숙한 interface 문법입니다. 위에서 사용했던 예제를 interface를 사용하여 확장해보겠습니다.123456789101112interface Person &#123; firstName: string; lastName: string;&#125;function greeter(person: Person) &#123; return \"Hello, \" + person.firstName + \" \" + person.lastName;&#125;var user = &#123; firstName: \"Jane\", lastName: \"User\" &#125;;document.body.innerHTML = greeter(user); 함수의 parameter에 String이라는 타입 대신 인터페이스(interface)를 적용했습니다. Java의 Generic과 비슷하게 보이는데요, interface를 사용하여 함수가 넘겨받는 parameter의 타입을 보다 구체적으로 정의할 수 있게 되었습니다. 위의 예제 코드와 마찬가지로 정의된 type과 맞지 않은 type의 parameter가 전달되면 error를 출력합니다. ClassES6(ECMAScript2015)에서부터 추가된 Class 문법입니다.1234567class Student &#123; fullName: string; constructor(public firstName, public middleInitial, public lastName) &#123; this.fullName = firstName + \" \" + middleInitial + \" \" + lastName; &#125;&#125;var user = new Student(\"Jane\", \"M.\", \"User\"); ES6의 Class와는 약간 다른 모습을 보입니다. 바로 Class 내부에서 field member를 갖게 된 것입니다. 하지만 그 근본은 ES6의 Class와 같습니다. JavaScript에서 프로토타입을 통해 구현했던 OOP를 보다 간결한 방법으로 문법을 제공하는 것입니다. 공식 문서에서 제공하는 Quick Start를 통해서 TypeScript 맛보기를 해봤습니다. 감사합니다. 0. Quick start end","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jaeyeophan.github.io/categories/TypeScript/"}],"tags":[{"name":"ts","slug":"ts","permalink":"https://jaeyeophan.github.io/tags/ts/"}]},{"title":"TypeScript 근황","slug":"TypeScript-Recent","date":"2017-04-19T04:39:38.000Z","updated":"2017-04-19T04:53:28.000Z","comments":true,"path":"2017/04/19/TypeScript-Recent/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/19/TypeScript-Recent/","excerpt":"","text":"TypeScript 근황얼마 전, 구글의 발표에 타입스크립트에 관심을 갖게 되었습니다. 기술적인 내용보다는 여러 기술 소식이 담긴 포스팅입니다. JavaScript의 미래올해가 벌써 2017년이니, 재작년인 2015년에 ECMAScript2015(aka ECMAScript6 or ES6)가 JavaScript 표준으로 정의되었고, 작년에는 ECMAScript2016(aka ECMAScript7 or ES7)이 발표되었습니다. 머지않아 ECMAScript2017도 발표될 예정(6월 예정)이라고 합니다. Node.js의 등장으로 JavaScript가 소프트웨어 개발 환경에서 막대한 비중을 차지하자 현재 tc39라는 커뮤니티에서 끊임없이 JavaScript라는 언어의 표준을 명세하고 있습니다. 이것은 무엇을 의미할까요? TypeScript에 대한 이야기를 하기 위해 JavaScript에 관한 내용은 다음 글을 참조하시면 좋을 것 같아 링크를 첨부합니다. 2017년과 이후 JavaScript의 동향 - JavaScript(ECMAScript) TypeScript의 정체 TypeScript란 JavaScript의 super set이다. 어디선가 이런 말을 많이 들어봤을것 같은데요.사실, TypeScript는 JavaScript입니다. 기존의 JavaScript와는 다르게 .ts라는 확장자를 갖고 있지만 결국 JavaScript로 compile되는 언어입니다. JavaScript의 성장과 동시에 언어 자체의 한계점을 인지한 MicroSoft는 JavaScript에 타입(Type)을 추가해서 TypeScript를 만듭니다.(TypeScript의 Type system을 Structural Type System이라고 합니다.) 그리고 2016년 9월에 TypeScript 2.0 버전이 공개되었습니다.(현재는 2.2 version 이네요!) 이와 같은 움직임은 Google에서 개발한 Dart에서도 찾아볼 수 있습니다. 하지만 얼마 전, 프론트엔드 개발자들의 눈길을 끌만한 소식이 들려왔습니다. MS 타입스크립트, 구글 사내 표준 언어되다. Google이 만든 프론트엔드 프레임워크 Angular2(얼마 전, Angular4.0이 release되었습니다.)도 Dart, JavaScript를 지원하지만 TypeScript를 공식 언어로 지정할만큼 TypeScript의 위상이 높아졌다는 것을 확인하실 수 있습니다. 이에 더해, 다들 아실만한 협업 툴인 Slack이 TypeScript로 전환했습니다. 다음 링크는 Slack이 코드베이스를 TypeScript로 전환하는 과정에 대한 글로, 정적 분석의 필요성에 대해 인지했다는 내용입니다. TypeScript at Slack Facebook에서 개발한 정적 타입 분석기(static typechecker of javascript) Flow도 마찬가지 행보가 아닐까 생각합니다. 애플리케이션의 규모가 커질 수록 안정성에 대한 수요는 높아지기 마련입니다. 동적 타입이라는 JavaScript가 갖고 있는 장점이자 한계점인 이 부분을 해결하기 위해 정적 분석의 중요도가 높아지고 있습니다. TypeScript의 현주소이젠 개발자들에게 없어서는 안 될 존재인 Github의 star를 보니 21,076개입니다! (star개수가 64,556개인 React에 비하면 한참 멀었네요!) 올라온 Issue는 2,351개고 진행중인 Pull Request는 82개가 되네요.다음 자료는 Github과 마찬가지로 개발자들에게 없어선 안 되는 Stackoverflow의 조사 자료입니다. 개발자들이 가장 사랑하는 언어로 Rust, Smalltalk에 이어 TypeScript가 3위를 당당히 차지했습니다.(오, 이 정도인가요?) 추가된 Type System을 바탕으로 여러 가지 Tool과 구문 완성(content assist) 등의 도움을 받을 수 있는 TypeScript 소개였습니다. 얼마 전 공개된 ReactXP를 만든 Microsoft의 지지로 React에서도 TypeScript 방향으로 가지 않을까 생각해봅니다.(Flow 의문의 1패?) 무엇을 공부해야 하나 걱정할 필요없는 프론트엔드 개발자분들을 응원합니다. 감사합니다 :) cf. 짤막하게 정리해본 TypeScript Quick Start입니다. TypeScript와 관련된 글과 그룹 Microsoft/TypeScript-Handbook TypeScript Korea 페이스북 그룹 TypeScript를 무서워하지 않아도 되는 이유(번역) TypeScript 소개(hyunseob님 블로그)","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jaeyeophan.github.io/categories/TypeScript/"}],"tags":[{"name":"ts","slug":"ts","permalink":"https://jaeyeophan.github.io/tags/ts/"}]},{"title":"[ES6] 6. Class sugar syntax","slug":"ES6-6-Class-sugar-syntax","date":"2017-04-18T12:11:41.000Z","updated":"2017-04-19T07:30:46.000Z","comments":true,"path":"2017/04/18/ES6-6-Class-sugar-syntax/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-6-Class-sugar-syntax/","excerpt":"","text":"[ES6] 6. Class sugar syntaxES6에서 자바스크립트에는 존재하지 않았던 클래스(Class)가 도입되었다. 자바스크립트에 대해 잘 모르는 사람들이 Java에서의 클래스와 똑같은 기능을 하는 녀석인 줄 알고 많이 혼동한다. 자바스크립트는 기본적으로 프로토타입 기반의 언어이기 때문에 새로 도입된 이 클래스도 프로토타입 기반이다. 객체 지향을 흉내내고 있지만, 그 내부는 여전히 프로토타입으로 구성되어 있는 것이다. 프로토타입 기반으로 객체 지향적으로 설계하는 것이 복잡하여 클래스라는 sugar syntax 문법이 도입된 것이다. 그렇기 때문에 이에 따른 제약사항이 많다. 편한 만큼 고려해야할 사항도 많은 것이다. 하나씩 살펴보자. 클래스는 선언문 또는 표현식으로 선언할 수 있다.1234567891011121314//클래스 선언문으로 클래스 선언class name &#123; //...&#125;//클래스 표현식으로 클래스 선언let name = class &#123; //...&#125;let name = class inner_name &#123; //...&#125;console.log(typeof name); //function 자바스크립트 엔진은 class 키워드를 만나면 Class 오브젝트를 생성한다. Class 오브젝트도 마찬가지로 String, Function과 같은 하나의 오브젝트 타입이다.cf&gt; 표현식으로 선언했을 때의 inner-name은 클래스 내부에서 자신을 호출할 때 사용한다. Class keyword 특징 클래스의 선언부는 let과 const와 마찬가지로 호이스팅은 되지만 temporary dead zone이 형성된다.1234567//Not hoistinglet foo = new Foo();class Foo &#123;&#125;//Error:Use before declaration 클래스를 선언한 다음, new 키워드를 통해 인스턴스를 생성할 수 있다. 클래스의 코드는 ‘use strict’를 선언하지 않아도 strict 모드에서 실행된다. 메서드를 작성할 때, function 키워드와 콜론( : )을 작성하지 않는다. 메서드 사이에 콤마(,)를 작성하지 않는다.12345678910111213//class methodclass Student &#123; getName() &#123; console.log(\"name\"); &#125; getScore() &#123; console.log(\"score\"); &#125;&#125;let student = new Student();student.getName(); //namestudent.getScore(); //score 바로 함수를 정의하고, 콤마(,)가 없다. 생성자 함수를 통해 인스턴스를 생성하면 window에 설정되지만 class 키워드를 통해 생성하면 window에 설정되지 않는다.123456//window object?function Foo() &#123;&#125;console.log(window.Foo); // function Foo() &#123;...&#125;console.log(window.Student); //undefined Sugar SyntaxClass keyword는 sugar syntax라고 했다. 자바스크립트는 기본적으로 prototype 기반의 언어이기 때문에 엔진이 prototype에 메서드들을 연결한다. 즉, 클래스에서 메서드를 추가하면 자동으로 prototype에 추가되는 것이다. 자바스크립트에서는 프로토타입을 사용해서 클래스 밖에서도 메서드를 추가할 수 있다. 이미 생성된 인스턴스에 메서드를 추가하게 되면, 이전에 생성되었던 인스턴스들이 새로 추가된 메서드들을 공유해야하기 때문에 부하가 걸리지만 코드가 유연해진다는 장점도 존재한다. 위 예제코드에서 생성한 Student 클래스의 프로토타입에 새로운 메서드를 추가하고 이전에 생성되었던 인스턴스에서 새롭게 추가한 메서드를 호출할 수 있는 것이다.123456//add method to prototypeStudent.prototype.newMethod = function() &#123; console.log(\"Add new Method\");&#125;student.newMethod(); //Add new Method new 연산자는 constructor를 호출하면서 받은 인자들을 constructor의 파라미터로 전달한다.123456789101112131415//new keywordclass Student &#123; constructor(name, score) &#123; this.name = name; this.score = score; &#125; getName() &#123; return this.name; &#125;&#125;let s = new Student(\"Jbee\", 100);console.log(s.name); //Jbeeconsole.log(s.score); //100console.log(s.getName()); //Jbee 위 예제 코드에서 볼 수 있듯이 class 키워드로 선언한 클래스에 대해서 new keyword를 통해 인스턴스를 생성할 수 있다. 이 때 클래스 내부에 별도의 constructor가 설정되어 있지 않으면 기존의 protytype의 constructor가 호출되고 이를 default constructor라고 부른다. 별도로 작성된 constructor는 Student.prototype.constructor로 호출된다. new 키워드가 실행되는 메커니즘은 다음과 같다. 1. constructor는 우선적으로 빈(empty) 오브젝트(인스턴스)를 생성한다. 2. 넘겨받은 파라미터를 생성한 빈 오브젝트의 프로퍼티에 설정한다. 3. 인스턴스를 먼저 생성하므로, constructor 내부에서는 this keyword를 통해 인스턴스 자신을 가리킬 수 있다. 4. constructor에 별도의 return이 설정되어 있지 않으면 new를 실행한 곳으로 해당 클래스의 인스턴스를 반환한다. cf) constructor는 별도의 return을 설정할 수 있다. 하지만 Number, String 값이 return value로 지정되어 있으면 이를 무시하고 인스턴스 자신을 return 한다. extends keyword자바스크립트에서도 extends라는 키워드를 통해 클래스 간의 상속이 가능해졌다. 상속받은 클래스(이하 슈퍼클래스)의 메소드를 사용할 수 있다.1234567891011class Foo &#123; getName() &#123; console.log(\"Foo\"); &#125;&#125;class Bar extends Foo &#123;&#125;let bar = new Bar();bar.getName(); //Foo 슈퍼 클래스의 메소드를 오버라이딩(Overriding)할 수 있다.1234567891011121314class Foo &#123; getName() &#123; console.log(\"Foo\"); &#125;&#125;class Bar extends Foo &#123; getName() &#123; console.log(\"Bar\"); &#125;&#125;let bar = new Bar();bar.getName(); //Bar super 키워드를 통해 슈퍼 클래스의 메소드에 접근할 수 있다.1234567891011121314class Foo &#123; getName() &#123; return \"Foo\"; &#125;&#125;class Bar extends Foo &#123; getName() &#123; return super.getName() + \" Bar\"; &#125;&#125;let bar = new Bar();bar.getName(); //Foo Bar constructor keyword서브 클래스에서 정의된 constructor가 없다면 슈퍼 클래스의 constructor가 호출된다.1234567891011class Foo &#123; constructor() &#123; console.log(\"Foo constructor\"); &#125;&#125;class Bar extends Foo &#123;&#125;let bar = new Bar();//console&gt; Foo constructor 서브 클래스에서 constructor를 정의하려면 반드시 constructor 내부에서 super()를 호출해야 한다.1234567891011121314class Foo &#123; constructor() &#123; console.log(\"Foo\"); &#125;&#125;class Bar extends Foo &#123; constructor() &#123; console.log(\"Bar\"); &#125;&#125;let bar = new Bar();//ReferenceError: this is not defined constructor()메소드 안에서 super()를 호출해주면, 슈퍼 클래스가 생성되고 서브 클래스가 생성된다.12345678910111213141516class Foo &#123; constructor() &#123; console.log(\"Foo constructor\"); &#125;&#125;class Bar extends Foo &#123; constructor() &#123; super(); console.log(\"Bar constructor\"); &#125;&#125;let bar = new Bar();//console&gt; Foo constructor//console&gt; Bar constructor static keyword자바스크립트 클래스에서 static 키워드를 사용하면 정적 메소드를 정의할 수 있다. 정적 메소드라 함은 인스턴스를 생성하지 않고 사용할 수 있는 메소드를 말한다. 정적 메소드는 인스턴스를 생성하지 않고도 호출할 수 있지만 인스턴스에서는 호출할 수 없다.12345678910class Foo &#123; static getName() &#123; console.log(\"Foo\"); &#125;&#125;Foo.getName(); //Foolet foo = new Foo();foo.getName();//not a function 정적 메소드는 prototype에 추가되지 않는다.123456789101112class Foo &#123; static getName() &#123; console.log(\"Foo\"); &#125; getAlias() &#123; console.log(\"foo\"); &#125;&#125;console.log(Foo.prototype.getName === Foo.getName);//falseconsole.log(Foo.prototype.getAlias === new Foo().getAlias);//true 클래스 내부에서 정적 변수(static variable)를 지정할 수는 없지만 클래스 밖에서 지정할 수 있다.1234class Foo &#123; //...&#125;Foo.name = \"foo\"; new.targetnew.target을 이용하면 슈퍼 클래스에서 서브 클래스의 static method에 접근할 수 있다.12345678910111213141516171819class Foo &#123; constructor() &#123; console.log(new.target);//[Function: Bar] console.log(typeof new.target);//function console.log(\"Foo: \", new.target.getName());//Foo: bar &#125;&#125;class Bar extends Foo &#123; constructor() &#123; super(); &#125; static getName() &#123; return \"bar\"; &#125;&#125;let bar = new Bar(); ES6에서 추가된 sugar syntax class에 대해 정리해봤다. TypeScript에서는 보다 더 객체지향적인 클래스로서 사용할 수 있다. 아직 불완전한 ES6의 클래스는 신경써야할 부분도 많지만 제대로 이해하면 prototype을 사용하는 것보다 효율적으로 자바스크립트 코드를 작성할 수 있을 것이다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 6. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 5. Destructuring and Default Parameter","slug":"ES6-5-Destructuring-and-Default-Parameter","date":"2017-04-18T11:59:34.000Z","updated":"2017-04-18T12:01:31.000Z","comments":true,"path":"2017/04/18/ES6-5-Destructuring-and-Default-Parameter/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-5-Destructuring-and-Default-Parameter/","excerpt":"","text":"[ES6] 5. Destructuring and Default ParameterDestructuringshorthand 방식을 이용하여 함수의 반환값을 바로 객체에 할당할 수 있다. 이 때 함수에서 반환되는 프로퍼티 값과 지역 변수의 이름이 같아야 가능하다. 이렇게 하면 함수의 반환 값을 임시 객체에 저장하고 그 객체의 프로퍼티를 통해 접근하여 지역 변수에 할당하는 과정을 축소할 수 있다. 굳이 전체를 객체에 할당하지 않고 부분적으로만 할당도 가능하다. 즉, 리턴되는 값이 객체일 경우, 그 객체를 분해하여 바로 지역변수로 접근이 가능하다는 것이다. (iterable protocol을 구현해야만 destructuring이 가능하다.)123456789function buildUser(first, last)&#123; let fullName = first + \" \" + last; return &#123;first, last, fullName&#125;;&#125;let &#123; first, last, fullName &#125; = buildUser(\"Sam\", \"Williams\");console.log(first); // Samconsole.log(last); // Williamsconsole.log(fullName); // Sam Williams 굳이 전체를 객체에 할당하지 않고 부분적으로만 할당도 가능하다.12let &#123; fullName &#125; = buildUser(\"Sam\", \"Williams\");console.log( fullName ); // Sam Williams Method Initializer Shorthand객체에 함수를 추가할 때, 객체의 프로퍼티에 익명 함수를 추가하는 방식을 사용했다. ES6에서는 메소드를 활용한다. 비교를 위해 ES5도 함께 제시한다.ES6code&gt;&gt;123456789function buildUser(first, last, postCount)&#123; return &#123; first, last, isActive : function( ) &#123; //... &#125; &#125;&#125; ES6code&gt;&gt;123456789function buildUser(first, last, postCount)&#123; return &#123; first, last, isActive( ) &#123; //... &#125; &#125;&#125; Destructuring Assignment오른쪽의 배열을 분할하여 왼쪽 변수에 값을 할당한다. 인덱스 번째의 엘리먼트 값을 인덱스 번째의 변수에 할당하는 것이다. 엘리먼트가 아직 남았는데 할당할 변수가 없다면 그대로 할당되지 않고, 엘리먼트가 남지 않았는데 할당한 변수가 있다면 그 변수는 undefined로 할당된다.1234567891011121314let one, two, three, four;//case1[one, two] = [1, 2];console.log(one); //1console.log(two); //2//case2[one, two, three] = [1, 2];console.log(one); //1console.log(two); //2console.log(three);//undefined//case3[one, two] = [1, 2, 3];console.log(one); two//1console.log(two); //2 이전 Chapter에서 다뤘던 Spread 연산자를 사용할 수 있으며, 공백으로 두어 해당 값을 건너 뛰고 할당할 수 있다.1234567[one, ...other] = [1, 23, 24, 25];console.log(one); //1console.log(other); //[23, 24, 25][one, , , four] = [1, 2, 3, 4];console.log(one); //1console.log(four); //4 Default Valuedestructuring을 통해 값을 할당할 때, 해당하는 값이 없을 때, undefined 대신 할당할 default value를 지정해줄 수 있다.123456789let [first, second, third = 3] = [1, 2];console.log(first); //1 by destructuringconsole.log(second); //2 by destructuringconsole.log(third); //3 by default valuelet [fourth, fifth, sixth = 6] = [4, 5, 66];console.log(first); //4 by destructuringconsole.log(second); //5 by destructuringconsole.log(third); //66 by destructuring Default Parameterparameter에 값이 넘어가지 않아도, default value로 설정된 값이 해당 파라미터 대신 값이 할당된다. parameter에서도 마찬가지로 기존의 default value는 undefined 값이었지만, 그 값을 코드 상에서 설정할 수 있게 된 것이다.12345let somethingFunction = (prev, post = 20) =&gt; prev + post;console.log(somethingFunction(1)); //21 by default parameterconsole.log(somethingFunction(1, 2)); //3console.log(somethingFunction(1, undefined)); //21 by default parameterconsole.log(somethingFunction(1, null)); //1 함수에도 length라는 property가 따로 존재한다. 그런데 이 때, default parameter는 length에서 무시된다.123getTotal(100); //1getTotal(100, 0.05); //2console.log(getTotal.length); //1 한 가지 주의할 점이 있다. let으로 선언했을 때의 값은 Default parameter와는 다르기 때문에, Destructuring으로 값을 덮어쓸 수 있다. let으로 선언했을 때 할당하는 것과는 다르다.default parameter code&gt;&gt;123let salary = [100, 200, 300];let [low, avg, high = 500] = salary;console.log(high); //500 let assignment code123let low, avg, high = 500;let [low, avg, high] = salary;console.log(high); //300 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 5. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 4. Spread, Rest parameter","slug":"ES6-4-Spread-Rest-parameter","date":"2017-04-18T11:59:13.000Z","updated":"2017-04-18T12:01:30.000Z","comments":true,"path":"2017/04/18/ES6-4-Spread-Rest-parameter/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-4-Spread-Rest-parameter/","excerpt":"","text":"[ES6] 4. Spread, Rest parameterSpread이터러블 오브젝트(Iterable object)의 엘리먼트를 하나씩 분리하여 전개한다. 전개한 결과를 변수에 할당하거나 호출하는 함수의 파라미터 값으로 사용할 수 있다.1234let prev = [3,4];let post = [7,8];let spreadObj = [1, 2, ...prev, 5, 6, ...post, 9];console.log(spreadObj); // [1,2,3,4,5,6,7,8,9] 문자열도 가능하다.12let sObj = [...\"javascript\"];console.log(sObj); // [\"j\", \"a\", \"v\", \"a\", \"s\", \"c\", \"r\", \"i\", \"p\", \"t\"] Rest Parameter함수를 호출할 때 spread 연산자로 파라미터를 작성한 형태를 Rest parameter라고 한다. 함수안의 코드를 확인하지 않고도 호출문의 형태만 보더라도 Rest parameter 의 범위를 확인할 수 있어 가독성이 높아진다. 또한 Rest parameter는 Array, 즉 배열이므로 Array 오브젝트의 메서드를 사용할 수 있다. 그리고 arrow funtion에서도 사용 가능하다.12let price = [12, 20, 18];Math.max(12, 20, 18); built in Object인 Math의 메소드 max()를 사용하기 위해서는 위 코드처럼 하나씩 넘겨줘야 한다.또는 다음과 같은 방식을 사용했다.1Math.max.call(Math, price); 하지만 Rest parameter를 사용하면 보다 깔끔하게 작성할 수 있다.1let maxPrice = Max.max(...price); Rest parameter는 동적(dynamic)으로 생성된 파라미터라고 할 수 있기 때문에 함수의 length에서 포함되지 않는다. 기본적으로 함수의 length 프로퍼티는 파라미터의 개수를 의미한다.12345let getElementByRestWithParam = (param, ...rest) =&gt; &#123; console.log(param); console.log(rest);&#125;console.log(getElementByRestWithParam.length); // 1 위 getElementByRestWithParam메소드에 spread operator를 사용하여 인자를 넘겨보자.12const values = [10, 20, 30];getElementByRestWithParam(...values); //10 \\n [20, 30] param에 해당하는 인자가 따로받아지고 나머지 인자들은 ...rest로 넘겨지면서 다시 배열로 넘겨지게 된다! Rest parameter를 사용했을 때와 기존의 자바스크립트에서 arguments를 사용했을 때의 차이점을 살펴보기 위해 arguments에 대해서 잠깐 살펴보자. arguments는 Array-Like Object라는 공식 명칭을 하고 있는 유사 배열이다. Array-like Object(유사배열)배열의 특징 중 하나는 index를 갖고 있어서 임의 접근(random access)가 가능하고, 그 index가 순차적으로 증가한다는 것이다. 만약 Object가 key값이 순차적으로 증가하는 값이고, 그에 따른 value가 존재한다고 했을 때, Array-like Object라고 한다.배열의 인덱스 값을 프로퍼티 key 값으로 사용하는 것이다. 그리고 length라는 프로퍼티 값을 갖고 있어서 전개를 할 때는 다음과 같이 한다.1234567891011// Array-like objectlet arrLikeObj = &#123; 0 : \"zero\", 1 : \"one\", 2 : \"two\", length : 3&#125;;for (let i = 0; i &lt; arrLikeObj.length; i++) &#123; console.log(arrLikeObj[i]);&#125; Array-like Object는 다음 두 가지 규칙을 모두 만족시켜야 한다.1) 프로퍼티 값을 0부터 1씩 증가하면서 순차적으로 작성해야 한다.2) length를 프로퍼티 키로 하여 전체 프로퍼티 수를 작성해야 한다. Rest parameter와 arguments의 차이arguments도 Array-like object이기 때문에 for statement로 전개할 수 있다. 하지만 Array 오브젝트의 메서드를 사용할 수 없다. 이것이 치명적인 단점인 것이다. 또 arrow function에서는 arguments를 사용할 수 없다. 이것으로 미루어보아, ES6에서는 arguments를 사용하는 것을 최대한 자제하라는 느낌이다. 사실 Rest parameter에 익숙해지기만 하면 arguments를 통해 인자를 받는 것보다 유연한 코드를 작성할 수 있다. 한 가지 더 한계점을 지적하자면 arguments는 함수 내부를 봐야 어느 부분에서 arguments 객체를 사용하는지 알 수 있어 코드의 가독성이 떨어지게 된다. 그렇기 때문에 arguments 대신 Rest parameter를 도입한 것이다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 4. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 3. Iteration and for-of statement","slug":"ES6-3-Iteration-and-for-of-statement","date":"2017-04-18T04:52:45.000Z","updated":"2017-04-19T07:31:26.000Z","comments":true,"path":"2017/04/18/ES6-3-Iteration-and-for-of-statement/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-3-Iteration-and-for-of-statement/","excerpt":"","text":"[ES6] 3. Iteration and for-of statementIterationES6에서 이터레이션 프로토콜은 Iterable 프로토콜과 Iterator 프로토콜로 구성된다. 결론부터 말하자면 Iterable 프로토콜은 반복 가능한 오브젝트를 나타내는 프로토콜이며 Iterator 프로토콜은 이터러블 오브젝트(Iterable 프로토콜을 따르는 오브젝트)의 값을 작성한 순서대로 처리하는 프로토콜이다. Iterable 프로토콜오브젝트의 반복 처리 규약을 정의한다.Iterable Object String, Array, Map, Set, TypedArray, Argument 오브젝트그리고 DOM의 NodeList 위 built in 오브젝트들은 디폴트로 이터러블 프로토콜을 갖고 있다. 오브젝트에 Symbol.iterator가 있어야 한다. Symbol.iterator가 있는 오브젝트는 이터러블 오브젝트이다. 또한 상속받은 prototype chain에 있어도 이터러블 오브젝트이다. (Symbol에 대해서는 다음 포스팅에서 다룰 예정이다.) 오브젝트에 프로퍼티 존재 여부를 체크할 때, Symbol의 경우에는 arrayObj[Symbol.iterator]와 같이 대괄호 []안에 작성해야 한다.1234let arr = [];console.log(arr[Symbol.iterator]); //function values() &#123; [native code] &#125;let obj = &#123;a:1&#125;;console.log(obj[Symbol.iterator]); //undefined Array 오브젝트는 기본적으로 iterable 프로토콜을 구현한다. 하지만 Object 오브젝트는 iterable 프로토콜을 구현하지 않는다.1let iteratorObj = arr[Symbol.iterator](); //iterator object 위와 같은 방식으로 Array 오브젝트는 iterator를 받을 수 있다. JavaScript’s for statementforEachforEach 문은 arrow function과 조합해서 사용하면 추가적인 변수 사용 없이 코드가 깔끔해질 수 있다.12345678let categories = [\"Korean\", \"English\", \"Science\"];categories.forEach(subject =&gt; &#123; console.log(subject);&#125;);console&gt;KoreanEnglishScience 그러나 for문 중간에 continue or break or return 선언문을 사용할 수 없다. 기존의 for-statement를 사용하는 경우를 보자.1234567for (let i = 0; i &lt; subject.length; i++) &#123; console.log(categoried[i]);&#125;console&gt;KoreanEnglishScience i의 역할이 index를 잡아주는 것 외에 별 다른 기능이 없다. 그래서 기존에는 for-in statement를 사용했다. 하지만 for-in statement 은 문자열 키를 가진 일반 Object 객체들을 위해 만들어졌다.1234567for (let item in categories) &#123; console.log(item);&#125;console&gt;012 그래서 ES6에서 for-of statement가 등장했다.for-in loop statement는 객체의 프로퍼티들을 루프시키지만 for-of loop statement는 데이터, 즉 배열 내의 value들을 루프시킨다. 또한 for-of는 배열 뿐만 아니라 다양한 Collection에도 동작한다. DOM의 NodeList 같은 유사배열 객체들에도 동작하고 문자열에도 동작한다. 문자열을 유니코드 문자의 배열로 취급하는 것이다. Set, Map에 대해서도 물론 동작한다. key-value 형식의 Map에 대해서는 for (let [key, value] of …) 형식의 destructuring을 사용한다.1234567for (let item of categories) &#123; console.log(item);&#125;console&gt;KoreanEnglishScience 단 for-of 가 만능은 아니다. Object의 프로퍼티를 루프시키려면 for-in statement를 사용해야 한다. 사실 for-in statement의 원래 목적이 Object 프로퍼티 순회이다. Object를 순회하는 경우를 살펴보자.12345let obj = &#123; one : 1, two : 2, three : 3&#125;; 위와 같은 obj라는 오브젝트를 정의한다.12345678for (let key in obj) &#123; console.log(key);&#125;// console&gt;// one// two// three for-in statement를 통해서 정의한 오브젝트(obj)의 key를 순회했다.1234567for (let key in obj) &#123; console.log(obj[key]);&#125;// console&gt;// 1// 2// 3 오브젝트를 for-of statment로 순회하면 어떻게 될까?12345for (let item of obj) &#123; console.log(item);&#125;// console&gt;// Uncaught TypeError: obj[Symbol.iterator] is not a function JavaScript의 Object는 iterable 프로토콜을 구현하고 있지 않기 때문에, Symbol.iterator가 존재하지 않는다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 3. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 2. Arrow function","slug":"ES6-2-Arrow-function","date":"2017-04-18T04:51:49.000Z","updated":"2017-04-18T04:54:06.000Z","comments":true,"path":"2017/04/18/ES6-2-Arrow-function/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-2-Arrow-function/","excerpt":"","text":"[ES6] 2. Arrow Function Always apply to ‘Anonymous function’ 자바스크립트의 Scope자바스크립트에서 생성자 함수를 통해 객체를 생성하면 변수 scope가 변경된다. 즉, 생성자 함수 내부에서의 this는 자신을 호출한 대상이 아닌 생성자 함수를 가리키게 된다. 생성자 함수를 통해 생성되는 객체의 과정 때문이다. 그래서 우리는 여태껏 별의 별짓을 다해왔다. self며 bind며 jQuery에서는 proxy라는 녀석도 사용했다. 새로운 function의 등장하지만 이제는 새로 도입된 Arrow function 을 사용하여 변수 스코프를 보존하자. Arrow function를 통해서 함수를 정의하게 되면, 변수들이 사용되는 위치와는 상관없이 변수들이 정의되어 있는 값으로 scope가 binding 된다. 한 가지 특징을 덧붙이자면, arrow function을 사용하게 되면 arguments 객체가 생성되지 않는다. 하지만 우리는 ES6 문법을 사용하는 이상, arguments는 필요하지 않다! Arrow function RuleES6의 arrow function에는 몇 가지 규칙이 존재하며 대부분의 lamda에서도 비슷한 규칙을 가지고 있어서 lamda를 사용해본 경험이 있다면 어색하지 않을 것이다.1) Parameter와 화살표 사이에서 개행할 수 없다.2) Parameter가 하나일 때는 괄호를 생략할 수 있다.3) Parameter가 없으면 소괄호( ( ) )만 작성한다.4) Block scope({ })를 지정하지 않고 한 줄로 arrow function을 사용할 때는 return이 생략될 수 있다.5) 그 반대로 block scope를 사용한다면 return을 명시해줘야 한다. Arrow Function은 this를 bind하지 않는다!12345678//ES5document.getElementById(\"todos\").addEventListener(\"click\", function() &#123; console.log(this); //#todos&#125;);//ES6document.getElementById(\"todos\").addEventListener(\"click\", () =&gt; &#123; console.log(this); //Window&#125;); this의 정체ES5에서 this 결정되는 세 가지 조건을 짚고 넘어가자.1) 생성자 내에서생성자 함수를 new라는 키워드를 통해 호출하면 내부에서 this는 인스턴스 그 자체를 가리킨다. 생성자 함수 내부에서 return this;가 생략되어 있기 때문이다.2) 함수 내에서this는 생략된 매개 변수이다. 무엇이 함수를 호출했는가가 this를 결정한다.3) bind, apply, call method or proxy method of jQuerythis는 메소드로 바꿔준 대상을 가리키게 된다. 그렇다면 arrow function 내에서 this는 무엇을 가리키는가. 해당 function을 정의한 영역의 this를 가져온다. 한 단계 더 위의 element를 가리키는 것이다. 그렇기 때문에 prototype에 함수를 정의할 때 arrow function을 사용할 때 내부적으로 this를 사용하게 되면 객체를 가리키지 않고 window 객체를 가리키게 된다. 또한 arrow function은 명식적으로 bind, call로 this를 넣어줘도 이를 무시한다. ES6의 arrow function은 단순히 함수를 간단하게 작성할 수 있는 문법이 아니다. 기존의 방식대로 function을 작성해야만 의도대로 작동하는 function이 존재할 수 있고, arrow function으로 기존의 function을 작성하던 방식보다 편하게 작성할 수 있게 된 것이다. 두 가지 방식의 차이점을 제대로 이해하고 새로운 문법과 기존의 문법을 적재적소에서 사용하는 것이 중요해졌다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 2. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 1. let-const","slug":"let-const","date":"2017-04-18T04:48:49.000Z","updated":"2017-04-18T06:48:56.000Z","comments":true,"path":"2017/04/18/let-const/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/let-const/","excerpt":"","text":"[ES6] 1. let &amp; const자바스크립트의 정체ES6의 문법을 알아보기 전에 자바스크립트의 정체부터 짚고 넘어가자. 자바스크립트(JavaScript)는 스크립트 언어(script language)이다. 스크립트 언어란 언어를 해석하고 실행하는 소프트웨어가 따로 존재하는 언어를 말한다. 자바스크립트를 해석하고 실행하는 소프트웨어는 브라우저이다. 이러한 의미에서 Node.js는 스크립트 언어라고 부르기 애매하고 자바스크립트의 문법을 차용한 다른 종류의 언어라고 생각해도 된다. 우선 자바스크립트가 해석되고 실행될 때 일어나는 확보, 선언, 할당의 차이를 짚고 넘어가야 한다. 확보브라우저가 자바스크립트를 해석할 때 두 번 파싱(parsing)하는데 첫번째 파싱 과정이 Lexical parsing이다. 실행하려는 자바스크립트 파일이 어느 정도의 메모리를 필요로 하는지를 파악하기 위해 거치는 파싱 과정인 것이다. 이 때 자바스크립트의 모든 선언문은 호이스팅(Hoisting)된다. 선언말 그대로 선언하는 것이다. 값을 할당하지 않는다. 자바스크립트에서는 선언만 하고 값을 할당하지 않으면 undefined값이 할당된다. 확보만 하고 선언하지 않으면 Reference error가 발생하고 선언을 하게 되면 undefined 값이 나타난다. 할당특정 변수에 값을 할당하는 과정이다. 위 세 가지를 파악해야 var와 let 그리고 const의 차이를 이해할 수 있다 let 으로 변수 선언 및 할당하기let으로 정의된 변수들은 호이스팅 되지 않는다(?) 많은 책에서 이렇게 표현을 하고 있지만 이것은 잘못된 표현이다. let으로 선언해도 호이스팅된다. lexical parsing 단계에서 해당 자바스크립트 파일을 실행하기 위한 메모리 공간을 확보해야하기 때문이다. 다만 let 변수로 선언이 되기 전 해당 변수를 사용하려고 하면 Reference error를 발생시키는 것이다. 예제 코드를 보자.123456789101112//ES5 code :: var&gt;&gt;console.log(foo); //undefinedvar foo;console.log(foo); //undefinedfoo = 123;console.log(foo); //123//ES6 code :: let&gt;&gt;console.log(foo); //ReferenceErrorlet foo;console.log(foo); //undefinedfoo = 123;console.log(foo); //123 let은 유효범위의 시작에서부터 선언될 때까지 temporary dead zone(일시적 사각지대)에 있다. 이 dead zone에서 사용하게 되면 ReferenceError가 발생한다. let - in for looplet으로 정의된 변수들은 가장 가까운 블록으로 scope이 지정된다. 여기서 블록이란 if, else, for, while 같은 문법으로 지정된 { } 블록을 의미한다. let 키워드를 사용한 변수들은 그들 각각의 함수 block에 귀속된다. var 변수는 함수의 상단으로 호이스팅(hoisting) 된 다음에, 각 루프의 반복 변수가 공유하게 된다. 그 결과, 콜백이 실행될 때는 i 변수가 루프의 마지막 변수로 할당된다. 즉 콜백에서 반복문을 제어하는 변수에 접근할 때 문제가 발생하는 것이다. 이러한 문제를 해결하기 위해 let을 사용할 수 있다. 123456789101112131415//ES5 codefunction loadFiles( userNames ) &#123; for(var i in userNames)&#123; _fetchProfiles(userNames[i], function() &#123; console.log(userNames[i]); &#125; &#125;&#125;loadFiles([\"A\", \"B\", \"C\", \"D\"]);console &gt;D // userNames[4]D // userNames[4]D // userNames[4]D // userNames[4] ES6 code123456789101112131415//ES6 codefunction loadFiles( userNames )&#123; for( let i in userNames )&#123; _fetchProfile(userNames[i], function()&#123; console.log(userNames[i]); &#125; &#125;&#125;loadFiles([\"A\", \"B\", \"C\", \"D\"]);console &gt;A // userNames[1]B // userNames[2]C // userNames[3]D // userNames[4] let cannot be redeclaredlet으로 정의된 변수는 같은 블록에서 재할당될 수는 있지만 재정의는 될 수 없다.123456789101112//ES6 codelet a = 'hello';a = 'world' // availablelet a = 'hello';let a = 'world'; // false -&gt; TypeError : Identifier ‘a’ has already been declaredlet flashMessage = 'hello';function loadFiles(userNames)&#123; let flashMessage = 'world'; // available return flashMessage;&#125; const - declarationconst 키워드는 상수라고 불리는 읽기 전용 변수를 생성하는 키워드이다. 한 번 할당되면, 상수는 새로운 값으로 할당될 수 없다. 명시적으로 변경을 시도해도 바뀌지 않는다. const 로 정의된 변수는 초기에 정의할 때, 반드시 값을 할당해줘야 한다. 그렇지 않으면 Syntax Error가 발생하게 된다. const 로 정의된 변수는 let과 마찬가지로, 가장 가까운 블록에 scope이 지정된다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. chapter 1. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]}]}
{"meta":{"title":"Devlog","subtitle":"Front End Developer, Jbee's blog'","description":"blog posted about web front development","author":"Jbee","url":"https://jaeyeophan.github.io"},"pages":[],"posts":[{"title":"[ES6] 3. Iteration and for-of statement","slug":"ES6-3-Iteration-and-for-of-statement","date":"2017-04-18T04:52:45.000Z","updated":"2017-04-18T04:53:06.000Z","comments":true,"path":"2017/04/18/ES6-3-Iteration-and-for-of-statement/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-3-Iteration-and-for-of-statement/","excerpt":"","text":"[ES6] 3. Iteration and for-of statementIterationES6에서 이터레이션 프로토콜은 Iterable 프로토콜과 Iterator 프로토콜로 구성된다. 결론부터 말하자면 Iterable 프로토콜은 반복 가능한 오브젝트를 나타내는 프로토콜이며 Iterator 프로토콜은 이터러블 오브젝트(Iterable 프로토콜을 따르는 오브젝트)의 값을 작성한 순서대로 처리하는 프로토콜이다. Iterable 프로토콜오브젝트의 반복 처리 규약을 정의한다.Iterable Object String, Array, Map, Set, TypedArray, Argument 오브젝트 그리고 DOM의 NodeList 위 built in 오브젝트들은 디폴트로 이터러블 프로토콜을 갖고 있다. 오브젝트에 Symbol.iterator가 있어야 한다. Symbol.iterator가 있는 오브젝트는 이터러블 오브젝트이다. 또한 상속받은 prototype chain에 있어도 이터러블 오브젝트이다. (Symbol에 대해서는 다음 포스팅에서 다룰 예정이다.) 오브젝트에 프로퍼티 존재 여부를 체크할 때, Symbol의 경우에는 arrayObj[Symbol.iterator]와 같이 대괄호 []안에 작성해야 한다.1234let arr = [];console.log(arr[Symbol.iterator]); //function values() &#123; [native code] &#125;let obj = &#123;a:1&#125;;console.log(obj[Symbol.iterator]); //undefined Array 오브젝트는 기본적으로 iterable 프로토콜을 구현한다. 하지만 Object 오브젝트는 iterable 프로토콜을 구현하지 않는다.1let iteratorObj = arr[Symbol.iterator](); //iterator object 위와 같은 방식으로 Array 오브젝트는 iterator를 받을 수 있다. JavaScript’s for statementforEachforEach 문은 arrow function과 조합해서 사용하면 추가적인 변수 사용 없이 코드가 깔끔해질 수 있다.12345678let categories = [\"Korean\", \"English\", \"Science\"];categories.forEach(subject =&gt; &#123; console.log(subject);&#125;);console&gt;KoreanEnglishScience 그러나 for문 중간에 continue or break or return 선언문을 사용할 수 없다. 기존의 for-statement를 사용하는 경우를 보자.1234567for (let i = 0; i &lt; subject.length; i++) &#123; console.log(categoried[i]);&#125;console&gt;KoreanEnglishScience i의 역할이 index를 잡아주는 것 외에 별 다른 기능이 없다. 그래서 기존에는 for-in statement를 사용했다. 하지만 for-in statement 은 문자열 키를 가진 일반 Object 객체들을 위해 만들어졌다.1234567for (let item in categories) &#123; console.log(item);&#125;console&gt;012 그래서 ES6에서 for-of statement가 등장했다.for-in loop statement는 객체의 프로퍼티들을 루프시키지만 for-of loop statement는 데이터, 즉 배열 내의 value들을 루프시킨다. 또한 for-of는 배열 뿐만 아니라 다양한 Collection에도 동작한다. DOM의 NodeList 같은 유사배열 객체들에도 동작하고 문자열에도 동작한다. 문자열을 유니코드 문자의 배열로 취급하는 것이다. Set, Map에 대해서도 물론 동작한다. key-value 형식의 Map에 대해서는 for (let [key, value] of …) 형식의 destructuring을 사용한다.1234567for (let item of categories) &#123; console.log(item);&#125;console&gt;KoreanEnglishScience 단 for-of 가 만능은 아니다. Object의 프로퍼티를 루프시키려면 for-in statement를 사용해야 한다. 사실 for-in statement의 원래 목적이 Object 프로퍼티 순회이다. Object를 순회하는 경우를 살펴보자.12345let obj = &#123; one : 1, two : 2, three : 3&#125;; 위와 같은 obj라는 오브젝트를 정의한다.12345678for (let key in obj) &#123; console.log(key);&#125;// console&gt;// one// two// three for-in statement를 통해서 정의한 오브젝트(obj)의 key를 순회했다.1234567for (let key in obj) &#123; console.log(obj[key]);&#125;// console&gt;// 1// 2// 3 오브젝트를 for-of statment로 순회하면 어떻게 될까?12345for (let item of obj) &#123; console.log(item);&#125;// console&gt;// Uncaught TypeError: obj[Symbol.iterator] is not a function JavaScript의 Object는 iterable 프로토콜을 구현하고 있지 않기 때문에, Symbol.iterator가 존재하지 않는다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 3. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 2. Arrow function","slug":"ES6-2-Arrow-function","date":"2017-04-18T04:51:49.000Z","updated":"2017-04-18T04:52:28.000Z","comments":true,"path":"2017/04/18/ES6-2-Arrow-function/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/ES6-2-Arrow-function/","excerpt":"","text":"[ES6] 2. Arrow Function Always apply to ‘Anonymous function’ 자바스크립트의 Scope자바스크립트에서 생성자 함수를 통해 객체를 생성하면 변수 scope가 변경된다. 즉, 생성자 함수 내부에서의 this는 자신을 호출한 대상이 아닌 생성자 함수를 가리키게 된다. 생성자 함수를 통해 생성되는 객체의 과정 때문이다. 그래서 우리는 여태껏 별의 별짓을 다해왔다. self며 bind며 jQuery에서는 proxy라는 녀석도 사용했다. 새로운 function의 등장하지만 이제는 새로 도입된 Arrow function 을 사용하여 변수 스코프를 보존하자. Arrow function를 통해서 함수를 정의하게 되면, 변수들이 사용되는 위치와는 상관없이 변수들이 정의되어 있는 값으로 scope가 binding 된다. 한 가지 특징을 덧붙이자면, arrow function을 사용하게 되면 arguments 객체가 생성되지 않는다. 하지만 우리는 ES6 문법을 사용하는 이상, arguments는 필요하지 않다! Arrow function RuleES6의 arrow function에는 몇 가지 규칙이 존재하며 대부분의 lamda에서도 비슷한 규칙을 가지고 있어서 lamda를 사용해본 경험이 있다면 어색하지 않을 것이다.1) Parameter와 화살표 사이에서 개행할 수 없다.2) Parameter가 하나일 때는 괄호를 생략할 수 있다.3) Parameter가 없으면 소괄호( ( ) )만 작성한다.4) Block scope({ })를 지정하지 않고 한 줄로 arrow function을 사용할 때는 return이 생략될 수 있다.5) 그 반대로 block scope를 사용한다면 return을 명시해줘야 한다. Arrow Function은 this를 bind하지 않는다!12345678//ES5document.getElementById(\"todos\").addEventListener(\"click\", function() &#123; console.log(this); //#todos&#125;);//ES6document.getElementById(\"todos\").addEventListener(\"click\", () =&gt; &#123; console.log(this); //Window&#125;); this의 정체ES5에서 this 결정되는 세 가지 조건을 짚고 넘어가자.1) 생성자 내에서생성자 함수를 new라는 키워드를 통해 호출하면 내부에서 this는 인스턴스 그 자체를 가리킨다. 생성자 함수 내부에서 return this;가 생략되어 있기 때문이다.2) 함수 내에서this는 생략된 매개 변수이다. 무엇이 함수를 호출했는가가 this를 결정한다.3) bind, apply, call method or proxy method of jQuerythis는 메소드로 바꿔준 대상을 가리키게 된다. 그렇다면 arrow function 내에서 this는 무엇을 가리키는가. 해당 function을 정의한 영역의 this를 가져온다. 한 단계 더 위의 element를 가리키는 것이다. 그렇기 때문에 prototype에 함수를 정의할 때 arrow function을 사용할 때 내부적으로 this를 사용하게 되면 객체를 가리키지 않고 window 객체를 가리키게 된다. 또한 arrow function은 명식적으로 bind, call로 this를 넣어줘도 이를 무시한다. ES6의 arrow function은 단순히 함수를 간단하게 작성할 수 있는 문법이 아니다. 기존의 방식대로 function을 작성해야만 의도대로 작동하는 function이 존재할 수 있고, arrow function으로 기존의 function을 작성하던 방식보다 편하게 작성할 수 있게 된 것이다. 두 가지 방식의 차이점을 제대로 이해하고 새로운 문법과 기존의 문법을 적재적소에서 사용하는 것이 중요해졌다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. 2. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]},{"title":"[ES6] 1. let-const","slug":"let-const","date":"2017-04-18T04:48:49.000Z","updated":"2017-04-18T04:50:57.000Z","comments":true,"path":"2017/04/18/let-const/","link":"","permalink":"https://jaeyeophan.github.io/2017/04/18/let-const/","excerpt":"","text":"[ES6] 1. let &amp; const자바스크립트의 정체ES6의 문법을 알아보기 전에 자바스크립트의 정체부터 짚고 넘어가자. 자바스크립트(JavaScript)는 스크립트 언어(script language)이다. 스크립트 언어란 언어를 해석하고 실행하는 소프트웨어가 따로 존재하는 언어를 말한다. 자바스크립트를 해석하고 실행하는 소프트웨어는 브라우저이다. 이러한 의미에서 Node.js는 스크립트 언어라고 부르기 애매하고 자바스크립트의 문법을 차용한 다른 종류의 언어라고 생각해도 된다. 우선 자바스크립트가 해석되고 실행될 때 일어나는 확보, 선언, 할당의 차이를 짚고 넘어가야 한다. 확보브라우저가 자바스크립트를 해석할 때 두 번 파싱(parsing)하는데 첫번째 파싱 과정이 Lexical parsing이다. 실행하려는 자바스크립트 파일이 어느 정도의 메모리를 필요로 하는지를 파악하기 위해 거치는 파싱 과정인 것이다. 이 때 자바스크립트의 모든 선언문은 호이스팅(Hoisting)된다. 선언말 그대로 선언하는 것이다. 값을 할당하지 않는다. 자바스크립트에서는 선언만 하고 값을 할당하지 않으면 undefined값이 할당된다. 확보만 하고 선언하지 않으면 Reference error가 발생하고 선언을 하게 되면 undefined 값이 나타난다. 할당특정 변수에 값을 할당하는 과정이다. 위 세 가지를 파악해야 var와 let 그리고 const의 차이를 이해할 수 있다 let 으로 변수 선언 및 할당하기let으로 정의된 변수들은 호이스팅 되지 않는다(?) 많은 책에서 이렇게 표현을 하고 있지만 이것은 잘못된 표현이다. let으로 선언해도 호이스팅된다. lexical parsing 단계에서 해당 자바스크립트 파일을 실행하기 위한 메모리 공간을 확보해야하기 때문이다. 다만 let 변수로 선언이 되기 전 해당 변수를 사용하려고 하면 Reference error를 발생시키는 것이다. 예제 코드를 보자.123456789101112ES5 code :: var&gt;&gt;console.log(foo); //undefinedvar foo;console.log(foo); //undefinedfoo = 123;console.log(foo); //123ES6 code :: let&gt;&gt;console.log(foo); //ReferenceErrorlet foo;console.log(foo); //undefinedfoo = 123;console.log(foo); //123 let은 유효범위의 시작에서부터 선언될 때까지 temporary dead zone(일시적 사각지대)에 있다. 이 dead zone에서 사용하게 되면 ReferenceError가 발생한다. let - in for looplet으로 정의된 변수들은 가장 가까운 블록으로 scope이 지정된다. 여기서 블록이란 if, else, for, while 같은 문법으로 지정된 { } 블록을 의미한다. let 키워드를 사용한 변수들은 그들 각각의 함수 block에 귀속된다. var 변수는 함수의 상단으로 호이스팅(hoisting) 된 다음에, 각 루프의 반복 변수가 공유하게 된다. 그 결과, 콜백이 실행될 때는 i 변수가 루프의 마지막 변수로 할당된다. 즉 콜백에서 반복문을 제어하는 변수에 접근할 때 문제가 발생하는 것이다. 이러한 문제를 해결하기 위해 let을 사용할 수 있다. 123456789101112131415//ES5 codefunction loadFiles( userNames ) &#123; for(var i in userNames)&#123; _fetchProfiles(userNames[i], function() &#123; console.log(userNames[i]); &#125; &#125;&#125;loadFiles([\"A\", \"B\", \"C\", \"D\"]);console &gt;D // userNames[4]D // userNames[4]D // userNames[4]D // userNames[4] ES6 code123456789101112131415//ES6 codefunction loadFiles( userNames )&#123; for( let i in userNames )&#123; _fetchProfile(userNames[i], function()&#123; console.log(userNames[i]); &#125; &#125;&#125;loadFiles([\"A\", \"B\", \"C\", \"D\"]);console &gt;A // userNames[1]B // userNames[2]C // userNames[3]D // userNames[4] let cannot be redeclaredlet으로 정의된 변수는 같은 블록에서 재할당될 수는 있지만 재정의는 될 수 없다.123456789101112//ES6 codelet a = 'hello';a = 'world' // availablelet a = 'hello';let a = 'world'; // false -&gt; TypeError : Identifier ‘a’ has already been declaredlet flashMessage = 'hello';function loadFiles(userNames)&#123; let flashMessage = 'world'; // available return flashMessage;&#125; const - declarationconst 키워드는 상수라고 불리는 읽기 전용 변수를 생성하는 키워드이다. 한 번 할당되면, 상수는 새로운 값으로 할당될 수 없다. 명시적으로 변경을 시도해도 바뀌지 않는다. const 로 정의된 변수는 초기에 정의할 때, 반드시 값을 할당해줘야 한다. 그렇지 않으면 Syntax Error가 발생하게 된다. const 로 정의된 변수는 let과 마찬가지로, 가장 가까운 블록에 scope이 지정된다. 예제로 사용된 코드는 Github Respository에서 확인하실 수 있습니다. chapter 1. end","categories":[{"name":"ECMAScript6","slug":"ECMAScript6","permalink":"https://jaeyeophan.github.io/categories/ECMAScript6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://jaeyeophan.github.io/tags/es6/"}]}]}
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devlog</title>
  <subtitle>Front End Developer, Jbee&#39;s blog</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://jaeyeophan.github.io/"/>
  <updated>2017-05-19T05:12:09.000Z</updated>
  <id>https://jaeyeophan.github.io/</id>
  
  <author>
    <name>Jbee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[React] 2. Elements and Component</title>
    <link href="https://jaeyeophan.github.io/2017/05/19/React-2-Elements-and-Component/"/>
    <id>https://jaeyeophan.github.io/2017/05/19/React-2-Elements-and-Component/</id>
    <published>2017-05-19T05:02:02.000Z</published>
    <updated>2017-05-19T05:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/react_logo.png" alt=""></p>
<h1 id="React-2-Elements-and-Component"><a href="#React-2-Elements-and-Component" class="headerlink" title="[React] 2. Elements and Component"></a>[React] 2. Elements and Component</h1><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p><code>Element</code>는 화면에 표시되는 내용이며, React를 구성하고 있는 가장 작은 블록이라고 할 수 있습니다. 브라우저 요소인 DOM과 달리 React Element는 보다 적은 비용으로 생성할 수 있으며 React DOM은 React Element와 일치하도록 DOM을 업데이트 합니다.</p>
<h2 id="Rendering-Elements"><a href="#Rendering-Elements" class="headerlink" title="Rendering Elements"></a>Rendering Elements</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>위와 같은 html 코드가 존재합니다. 실제로 존재하는 코드는 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>뿐이라고 볼 수 있습니다. React에서는 이것을 루트 노드(<code>Root DOM node</code>)라고 부릅니다. 이 태그 내부의 모든 element들은 <code>React DOM</code>에 의해 관리됩니다.</p>
<p>이전 포스팅에서 다뤘던 예제 코드를 다시 한번 살펴볼 차례입니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">);</div><div class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure></p>
<p><code>루트 노드</code>를 select하여 내부에 작성한 element를 <code>render</code>할 수 있습니다.</p>
<p><br></p>
<h2 id="Immutable-Element"><a href="#Immutable-Element" class="headerlink" title="Immutable Element"></a>Immutable Element</h2><p>React element는 <code>immutable</code>입니다. element 렌더링한 후에는, 해당 element의 자식이나 attribute를 변경할 수 없습니다. React에서는 <strong>새로운 element를 전달</strong>하여 UI를 업데이트할 수 있습니다. 뭔가 너무 비효율적으로 보이지 않나요?</p>
<p>만약에 렌더링 된 element가 위의 예제처럼 짧지 않고 엄청 긴 element인데, 모든 element를 새로 전달해야 한다니. <strong>하지만</strong> React는 <strong>필요한 부분만 업데이트</strong> 합니다! React DOM은 새로 전달받은 element와 그 자식들을 이전의 element들과 비교하여 업데이트가 필요한 부분만 업데이트 합니다.</p>
<p>다음은 공식 홈페이지에 올라온 예제 코드입니다. 1초마다 <code>ReactDOM.render()</code>를 호출하여 UI를 업데이트합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> element = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );</div><div class="line">  ReactDOM.render(</div><div class="line">    element,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">setInterval(tick, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>개발자 도구를 열어서 확인해보면 <code>{new Date().toLocaleTimeString()}</code>부분만 업데이트 되는 것을 확인하실 수 있습니다.</p>
<p><br></p>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>Component는 Element로 구성될 수 있습니다. React에서는 Component를 설계하고 이를 사용하여 UI를 독립적이고 재사용 가능한 부분으로 분할할 수 있습니다.</p>
<h3 id="Component-정의"><a href="#Component-정의" class="headerlink" title="Component 정의"></a>Component 정의</h3><p>Component는 ES6의 <code>class</code>문법을 사용하여 정의할 수 있고 <code>React.createClass</code> 문법을 통하여 정의할 수 있고, <code>stateless한 Component</code>에 대하여 <code>functional Component</code> 방식으로 정의할 수 있습니다.</p>
<h4 id="class문법을-사용하여-React-Component를-extends-하는-방식으로-컴포넌트를-정의"><a href="#class문법을-사용하여-React-Component를-extends-하는-방식으로-컴포넌트를-정의" class="headerlink" title="class문법을 사용하여 React.Component를 extends 하는 방식으로 컴포넌트를 정의."></a><code>class</code>문법을 사용하여 React.Component를 extends 하는 방식으로 컴포넌트를 정의.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="일반-함수-or-Arrow-function-를-사용하여-컴포넌트를-정의"><a href="#일반-함수-or-Arrow-function-를-사용하여-컴포넌트를-정의" class="headerlink" title="일반 함수(or Arrow function)를 사용하여 컴포넌트를 정의"></a>일반 함수(or Arrow function)를 사용하여 컴포넌트를 정의</h4><p><a href="https://facebook.github.io/react/docs/context.html" target="_blank" rel="external">React 공식 문서</a>에서는 <code>stateless functional component</code>라는 용어로 해당 컴포넌트를 설명하고 있습니다. 개발자들 사이에서는 Pure Component, Dumb Component, Presential Component 라고 불리기도 합니다. UI를 구성하게 되는 Component 중 state가 없거나 LifeCycle API를 사용할 일이 없는 경우 함수를 사용하여 정의합니다. 즉, 렌더링의 역할만 수행하는 컴포넌트를 정의할 때 사용하는 방식이라고 할 수 있습니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">const</span> dumb = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">);</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> dumb;</div></pre></td></tr></table></figure>
<p>위와 같이 Arrow function을 사용할 수도 있지만 일반 함수를 사용하는 경우에는 함수의 이름을 추론할 수 있기 때문에 airbnb convention에서는 다음과 같은 일반 함수 방식을 권장하고 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dumb</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Functional Component에 대해 자세히 설명된 포스팅입니다.<a href="https://velopert.com/2994" target="_blank" rel="external">Velopert-함수형 컴포넌트</a></p>
<ol>
<li><code>React.createElement()</code>를 사용하여 컴포넌트를 정의<br>사실 JSX로 작성된 element 또는 Component는 <code>React.createElement()</code>로 컴파일됩니다. React에서 일종의 sugar syntax를 제공하는 셈입니다. 즉 1번 case의 예제 코드는 다음과 같이 컴파일됩니다.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">`Hello React World`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>물론 위 코드도 <code>babel</code>에 의해 ES5 문법으로 transpile되겠지만 그 결과는 생략했습니다. 저번 포스팅에서도 언급된 <a href="https://github.com/apple77y/javascript/tree/master/react" target="_blank" rel="external">airbnb 에서 제공하는 React convention</a>에서는 JSX를 사용하고 있는데, 특별한 사유가 없다면 위 구문을 사용하지 말라고 합니다.</p>
<p>정의된 컴포넌트는 ReactDOM에서 render하거나 Component를 정의할 때 사용(composition)할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure></p>
<p>혹시 위 예제와 이전 예제에서 차이점을 발견하셨나요? 일부러 다르게 작성해보았습니다. 달라진 점은 바로 <code>extends</code>하고 있는 클래스가 달라진 점인데요, 이 부분은 어떻게 React 라이브러리를 import하느냐에 따라 달라질 수 있습니다. 바로 위의 예제 같은 경우에는 다음과 같이 import하여 사용할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div></pre></td></tr></table></figure></p>
<p><code>Component</code>만 import하지 않고 <code>React</code>까지 import하는 것은 바로 <code>React.createElement()</code>로 컴파일 되기 때문입니다. 마찬가지의 이유로 일반 함수로 Component를 정의할 때도 <code>React</code>를 import해줘야 합니다. <code>React.Component</code>보다는 <code>Component</code>만 extends하는 것이 타이핑도 줄고 더 깔끔하겠죠? 물론 snippet이 제공되서 직접 타이핑 할 필요는 없지만요 :)</p>
<p>Element에 대해서 그리고 Component를 어떻게 정의하는가에 대한 포스팅이었습니다. 감사합니다 :D</p>
<p>React와 관련된 포스트는 <a href="https://github.com/JaeYeopHan/react_tutorial_with_docs" target="_blank" rel="external">Github Repository</a>에서 실시간 피드를 받으실 수 있습니다.</p>
<p>Reference&gt;<br><a href="https://facebook.github.io/react/docs/react-without-jsx.html" target="_blank" rel="external">https://facebook.github.io/react/docs/react-without-jsx.html</a></p>
<p><em>2. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/react_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;React-2-Elements-and-Component&quot;&gt;&lt;a href=&quot;#React-2-Elements-and-Component&quot; class=&quot;he
    
    </summary>
    
      <category term="React" scheme="https://jaeyeophan.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://jaeyeophan.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>[Tool] (번역)Babel에 대한 모든 것</title>
    <link href="https://jaeyeophan.github.io/2017/05/16/Everything-about-babel/"/>
    <id>https://jaeyeophan.github.io/2017/05/16/Everything-about-babel/</id>
    <published>2017-05-16T03:04:26.000Z</published>
    <updated>2017-05-16T03:06:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/babel.png" alt=""></p>
<h1 id="Tool-번역-Everything-you-need-to-know-about-BabelJS"><a href="#Tool-번역-Everything-you-need-to-know-about-BabelJS" class="headerlink" title="[Tool] (번역) Everything you need to know about BabelJS"></a>[Tool] (번역) Everything you need to know about BabelJS</h1><p>원본 : <a href="http://kleopetrov.me/2016/03/18/everything-about-babel/" target="_blank" rel="external">http://kleopetrov.me/2016/03/18/everything-about-babel/</a><br><em>이 글은 위 글을 기반으로 하여 나름 최신으로 업데이트하며 작성되었습니다 :) 물론, 본 저자의 동의하에 작성되었습니다.</em></p>
<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p><code>Babel</code>은 아시다시피 ES6/ES7 코드를 ECMAScript5 코드로 transpiling 하기 위한 도구입니다. <code>Babel</code>은 다양한 작은 모듈들로 구성되어 있습니다. <code>Babel</code> 다양한 모듈을 담는 일종의 상자 역할을 하며 코드를 컴파일 하기 위해 작은 모듈들(ex. presets)을 사용합니다.</p>
<h2 id="Set-up"><a href="#Set-up" class="headerlink" title="Set up"></a>Set up</h2><p><code>babel</code> 학습을 위한 디렉토리를 구축합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir babel-tutorial &amp;&amp; <span class="built_in">cd</span> babel-tutorial</div><div class="line">$ npm init</div><div class="line">$ mkdir src &amp;&amp; touch src/example.js</div><div class="line"><span class="comment"># Write some code of ES6 syntax in example.js</span></div></pre></td></tr></table></figure></p>
<h2 id="bael-cli"><a href="#bael-cli" class="headerlink" title="bael-cli"></a>bael-cli</h2><p><code>bael-cli</code>는 command line을 통해 코드를 transpile 할 수 있는 도구입니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-cli</div><div class="line"><span class="comment"># or</span></div><div class="line">$ yarn add -D babel-cli</div></pre></td></tr></table></figure></p>
<p><code>-g</code> 옵션을 통해서 <code>bael-cli</code>를 전역에 설치할 수도 있지만 <code>--save-dev</code> 옵션으로 설치하는 이유는 하나의 컴퓨터에 존재하는 다른 프로젝트들이 각각 다른 버전의 babel에 의존성을 갖고 있을 수 있습니다. <code>--save-dev</code> 옵션을 통해서 이를 해결할 수 있습니다.</p>
<p>설치한 후 터미널에서 다음 명령을 실행할 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ babel example.js --out-file compiled.js</div></pre></td></tr></table></figure></p>
<p>이 명령어는 다음과 같은 의미를 담고 있습니다.</p>
<ul>
<li><code>babel</code> - babel을 호출합니다.</li>
<li><code>example.js</code> - transpile 하고자하는 ES6/ES7의 자바스크립트 파일입니다.</li>
<li><code>--out-file</code> - babel에게 전달할 옵션을 명시합니다. 파일로 output을 지정하는 옵션입니다.<br><em>cf1&gt; shortcut으로 <code>-o</code> 옵션을 제공합니다.</em><br><em>cf2&gt; 이 이외에도 <code>--out-dir</code> or <code>-d</code> 옵션을 전달할 수 있습니다.</em></li>
<li><code>compiled.js</code> - 출력 파일의 이름을 명시합니다.</li>
</ul>
<p>npm script를 사용하여 해당 프로세스를 자동화 할 수 있습니다.<br><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  "scripts": &#123;</div><div class="line">    "build": "babel ./src -d ./lib -w"  </div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>and<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run build</div></pre></td></tr></table></figure></p>
<p><code>src</code> 디렉토리 밑에 있는 파일을 transpile하여 <code>lib</code> 디렉토리 밑으로 output을 출력합니다. 이 때는 동일한 파일명이 사용됩니다. <code>-w</code> 옵션을 통해서 <code>src</code> 디렉토리 밑의 파일들이 변경될 때마다 자동으로 transpile 하도록 할 수 있습니다.</p>
<h2 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h2><p><code>babel-register</code>는 각각의 모듈을 결합할 때 사용되는 후크(Hook) 모듈입니다. <code>require</code> 메소드를 바인드하여 자바스크립트 코드를 transpile 시킵니다. <code>babel-register</code> 모듈은 production을 위한 모듈은 아닙니다. 예를 들어 mocha 기반의 ES6로 작성된 테스트 코드를 실행시키기 위해서는 다음과 같은 스크립트를 사용할 수 있습니다.<br><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"script": &#123;</div><div class="line">  "test": "mocha --require babel-register"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Configuring-Babel"><a href="#Configuring-Babel" class="headerlink" title="Configuring Babel"></a>Configuring Babel</h2><p>처음에도 말했듯이, babel에게 어떠한 정보를 전달해주지 않는 한 babel은 아무 작업도 수행하지 않는 ‘상자’에 불과합니다. 방금 전에 살펴봤던 예제에서 아무 옵션없이 babel을 실행시키면 <code>src</code> 디렉토리에 있는 파일을 <code>lib</code> 디렉토리에 옮기는 작업만 수행하게 됩니다. 그렇기 때문에 babel에게 설정 정보를 전달해줘야 합니다. 이 정보는 <code>.babelrc</code>파일을 통해서 전달할 수 있습니다.</p>
<h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><p><code>.babelrc</code>파일은 babel을 설정하기 위한 파일입니다. 다음과 같이 구성되어 있습니다.<br><figure class="highlight js"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [],</div><div class="line">  <span class="string">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>presets를 추가하기 위해서는 npm 설치가 필요합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure></p>
<p>만약 React code를 transpile해야 한다면 다음과 같이 설치해줍니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-preset-react</div></pre></td></tr></table></figure></p>
<p>그리고 <code>.babelrc</code>파일을 수정해줍니다.<br><figure class="highlight js"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>],</div><div class="line">  <span class="string">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>자바스크립트 스펙으로 아직 확정되지 않은 <code>proposal 스펙</code>들이 존재합니다. 이들은 5개의 stage로 구분됩니다. babel에서는 각각의 stage에 대해서 preset을 제공합니다.</p>
<ul>
<li>babel-preset-stage-0</li>
<li>babel-preset-stage-1</li>
<li>babel-preset-stage-2</li>
<li>babel-preset-stage-3</li>
</ul>
<p><code>babel-preset-stage-4</code>는 <code>babel-preset-es2015</code>를 의미합니다. 각각의 stage에 대해서도 위와 같은 방법으로 설치하고 <code>.babelrc</code>파일을 수정하여 사용할 수 있습니다. 하지만 babel에서 이들을 모두 한번에 사용할 수 있도록 해주는 preset을 하나 제공했는데요, 바로 <code>babel-preset-env</code>입니다. 이 <code>preset</code>으로 모든 stage를 대체할 수 있습니다.</p>
<h2 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h2><p><code>babel-polyfill</code>은 ES6 환경을 제공해줍니다.<br>polyfill이 없는 경우를 예제를 통해 살펴봅니다.<br><figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allAdd</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).map(<span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p>위 코드는 <code>babel</code>에 의해 다음과 같이 transpile됩니다.<br><figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allAdd</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(argument).map(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + <span class="number">2</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Array.from()</code>은 ES6 syntax이므로 지원하지 않는 브라우저가 존재하기 때문에 위 코드는 transpile은 되었지만 모든 브라우저에서 작동하지 않습니다. 이 문제를 해결하기 위해서 <code>polyfill</code>을 사용해야 합니다. <code>polyfill</code>이란 code 조각으로 런타임에 존재하지 않는 native API의 복사본을 말합니다.</p>
<p><code>babel-polyfill</code> 사용을 위해서 다음과 같이 npm을 설치해줍니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-polyfill</div></pre></td></tr></table></figure></p>
<p>그리고 해당 <code>polyfill</code>이 필요한 곳에서 <code>import</code>해줍니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span>;</div></pre></td></tr></table></figure></p>
<p>만약 webpack과 함께 사용한다면 entry point에 <code>babel-polyfill</code>을 추가해줍니다.<br><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: [<span class="string">'babel-polyfill'</span>, <span class="string">'...'</span>]</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="babel-plugins"><a href="#babel-plugins" class="headerlink" title="babel-plugins"></a>babel-plugins</h2><p>아직 공식 스펙에서 지원하지 않은 기능들을 <code>transform-plugin</code>을 추가하여 사용할 수 있습니다. 여러 플러그인은 babel 공식 홈페이지에서 확인실 수 있습니다. 추가로 설치한 플러그인은 <code>plugins</code> 옵션으로 추가할 수 있습니다. <code>.babelrc</code>파일에서 설정해줄 수도 있고 Webpack이란 도구에서도 설정해줄 수 있습니다.</p>
<p>주로 <code>Webpack</code>이라는 도구와 함께 사용하는 babel에 대해서 알아봤는데요, webpack과 함께 사용하는 것에 대해서는 <a href="https://jaeyeophan.github.io/2017/05/05/webpack-tutorial-1/">Webpack2 입문 가이드</a> 포스팅에 자세히 나와있습니다 :)</p>
<p><em>end</em></p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="https://babeljs.io/docs/plugins/" target="_blank" rel="external">https://babeljs.io/docs/plugins/</a><br><a href="http://kleopetrov.me/2016/03/18/everything-about-babel/" target="_blank" rel="external">http://kleopetrov.me/2016/03/18/everything-about-babel/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/babel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tool-번역-Everything-you-need-to-know-about-BabelJS&quot;&gt;&lt;a href=&quot;#Tool-번역-Everything-you-need
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="tool" scheme="https://jaeyeophan.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>[React] 1. Introducing JSX and DOM</title>
    <link href="https://jaeyeophan.github.io/2017/05/15/React-1-Introducing-JSX-and-DOM/"/>
    <id>https://jaeyeophan.github.io/2017/05/15/React-1-Introducing-JSX-and-DOM/</id>
    <published>2017-05-15T04:15:27.000Z</published>
    <updated>2017-05-15T04:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/react_logo.png" alt=""></p>
<h1 id="React-1-Introducing-JSX-and-DOM"><a href="#React-1-Introducing-JSX-and-DOM" class="headerlink" title="[React] 1. Introducing JSX and DOM"></a>[React] 1. Introducing JSX and DOM</h1><h2 id="JSX란-무엇인가"><a href="#JSX란-무엇인가" class="headerlink" title="JSX란 무엇인가"></a>JSX란 무엇인가</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = &lt;h1&gt; Hello, world!&lt;/h1&gt;;</div></pre></td></tr></table></figure>
<p><code>JSX</code>라고 불리는 이 구문은 <code>string</code>도 아니고 <code>HTML</code>도 아닙니다. React 라이브러리에서 UI를 구성할 때 사용하는 구문으로 <strong>JavaScript의 extension</strong>이라고 할 수 있습니다.(물론, 사용하지 않을 수도 있습니다.) 타 프레임워크에서 사용했던 템플릿 엔진이라고 불리는 것들과 유사한 문법을 취하며(생김새만), JavaScript의 모든 기능을 제공합니다.</p>
<h2 id="JSX에-표현식-포함하기"><a href="#JSX에-표현식-포함하기" class="headerlink" title="JSX에 표현식 포함하기"></a>JSX에 표현식 포함하기</h2><p>자바스크립트의 표현식을 <code>{}</code>으로 묶어 JSX에 삽입할 수 있습니다. 기존의 템플릿 엔진에서 사용했던 방법과 비슷합니다. ES6에서 도입된 Template literal과도 비슷한 모습을 보입니다. 코드를 살펴보겠습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">    &lt;h1&gt;Hi!&lt;/h1&gt;</div><div class="line">);</div><div class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div><div class="line"><span class="comment">//이 코드는 다음 포스팅에서 설명하며, 다음 예제 코드부터는 추가하지 않습니다.</span></div></pre></td></tr></table></figure></p>
<p>위와 같이 <code>element</code>라는 객체를 만들어서 <code>render()</code>메소드에 전달하여 렌더링할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">    &lt;h1&gt;1 + 1 = &#123;1 + 1&#125;&lt;/h1&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><code>{}</code>내부에서 자바스크립트 문법을 그대로 사용할 수도 있습니다.</p>
<h2 id="JSX는-결국-표현식입니다"><a href="#JSX는-결국-표현식입니다" class="headerlink" title="JSX는 결국 표현식입니다."></a>JSX는 결국 표현식입니다.</h2><p>컴파일이 끝나면 JSX 표현식은 일반 자바스크립트 <strong>객체</strong>가 됩니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="string">"api/get/someting"</span>;</div><div class="line"><span class="keyword">const</span> element = (</div><div class="line">        &lt;img src=&#123;url&#125; /&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>JSX로 HTML 태그의 속성 값을 지정하고자 할 때는 <code>&quot;&quot;</code>(double quote)를 사용하지 않습니다. 사용하게 되면 JSX는 속성을 표현식이 아닌 문자열 리터럴로 인식하게 됩니다. 위 <code>img</code>태그의 경우처럼 태그가 비어있으면 <code>/&gt;</code>로 바로 닫아줘야 합니다. 자식 컴포넌트가 없거나 한 줄로 element 작성이 끝나는 경우에는 닫힘 태그로 self-close를 해줍니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h1&gt;Hi&lt;/h1&gt;</div><div class="line">    &lt;h2&gt;1 + 1 = &#123;1 + 1&#125;&lt;/h2&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>위의 같은 경우처럼 HTML의 문법을 사용하여 태그들을 계층화하여 구성할 수 있습니다. 하지만 이 때 주의할 사항이 한 가지 있습니다. 반드시 루트 노드(Root Node)로 <strong>하나의 노드를 지정</strong>해야 한다는 것입니다. ReactDOM은 오직 하나의 루트 노드만 렌더링하기 때문에 다음의 경우는 렌더링하지 못합니다.<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//Error!</div><div class="line">const element = (</div><div class="line">    &lt;h1&gt;Hi&lt;/h1&gt;</div><div class="line">    &lt;h2&gt;1 + 1 = &#123;1 + 1&#125;&lt;/h2&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>동일 depth에 존재하는 element가 여러 개 존재하기 때문에 error가 발생하게 됩니다. 여러 개의 element들을 계층화하는 경우에는 이전의 예제 코드처럼 element들을 <code>div</code>태그로 감싸줘야 합니다.</p>
<p>기본적으로 <code>React DOM</code>은 렌더링하기 전에 JSX에 임베디드 된 모든 값을 이스케이프 처리합니다. 따라서 응용프로그램에 명시적으로 작성되지 않은 것을 삽입할 수 없고 XSS 공격을 방지할 수 있습니다.</p>
<h2 id="DOM-Elements"><a href="#DOM-Elements" class="headerlink" title="DOM Elements"></a>DOM Elements</h2><p>React는 성능과 크로스 브라우징 이슈를 해결하기 위해 브라우저로부터 독립적인 DOM 체계를 구축하고 있습니다. 그렇기 때문에 기존의 HTML 속성과 다른 점이 존재합니다.</p>
<h3 id="Camel-Case-Attributes"><a href="#Camel-Case-Attributes" class="headerlink" title="Camel-Case Attributes"></a>Camel-Case Attributes</h3><p>기본적으로 React에서는 모든 DOM 속성 또는 이벤트 핸들러를 Camel-case로 처리해야 합니다.</p>
<h3 id="다른-Attributes"><a href="#다른-Attributes" class="headerlink" title="다른 Attributes"></a>다른 Attributes</h3><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p><code>style</code> 속성은 camelCase를 기반으로 작성된 style JavaScript 객체로 설정합니다. 모든 DOM의 속성과 일치하여, 원래 CSS에서 사용하던 속성들을 camelCase로 변경해서 사용할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> headerStyle = &#123;</div><div class="line">  <span class="attr">backgroundColor</span>: <span class="string">'#EEE'</span>;</div><div class="line">  borderRadius: <span class="string">'5px'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> element = (</div><div class="line">    &lt;div style=&#123;headerStyle&#125;&gt;Apply style as camelCase&lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h4 id="className"><a href="#className" class="headerlink" title="className"></a>className</h4><p>기본적으로 HTML에서는 태그에 class를 지정해줄 때, <code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code>와 같은 방식을 사용했습니다. 그러나 React에서는 <code>className</code>이라는 속성을 통해 접근합니다. 다음과 같이 나타낼 수 있습니다.<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> container = (&lt;div className="container"&gt;&lt;/div&gt;);</div></pre></td></tr></table></figure></p>
<p>cf&gt; JSX 속성값에는 항상 <strong>double quote</strong>를 사용합니다. JSX 속성값을 제외한 나머지 경우에 대해서는 <strong>single quote</strong>를 사용합니다. 강제적인 것이 아닌 <a href="https://github.com/apple77y/javascript/tree/master/react" target="_blank" rel="external">airbnb 에서 제공하는 React convention</a> 입니다.</p>
<h4 id="onChange"><a href="#onChange" class="headerlink" title="onChange"></a>onChange</h4><p>이 속성을 가지고 있는 필드가 변경될 때마다 이벤트가 발생합니다. React에서는 실시간으로 사용자 입력을 처리하기 위한 방법으로 이벤트를 사용합니다.<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p>위 예제 코드에서는 <code>input</code>태그에 event가 발생할 때마다 <code>handleChange</code>라는 메소드가 호출됩니다.</p>
<h4 id="checked"><a href="#checked" class="headerlink" title="checked"></a>checked</h4><p><code>input</code>태그 중 <code>checkbox</code>타입 또는 <code>radio</code>타입에서 지원되는 <code>checked</code> 속성입니다. 이 속성은 <code>controlled components</code>에 대해서 사용할 때 유용합니다.</p>
<h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p><code>value</code> 속성은 <code>input</code>과 <code>textarea</code>태그에 대해 지원되는 속성입니다. 이 속성을 통하여 요소의 값을 설정할 수 있습니다. 하지만 이 값은 DOM의 값보다 우선됩니다. 그렇기 때문에 이 속성은 <code>controlled components</code>에 대해서 사용할 때 유용합니다. 초기값만 지정하려는 경우에는. 즉 <code>uncontrolled components</code>에 대해서는 <code>defaultValue</code> 속성을 사용할 수 있습니다.</p>
<h4 id="defaultValue-defaultChecked"><a href="#defaultValue-defaultChecked" class="headerlink" title="defaultValue, defaultChecked"></a>defaultValue, defaultChecked</h4><p><code>&lt;textarea&gt;</code>와 <code>&lt;input type=&#39;text&#39;&gt;</code>에 대해서 지원합니다. 또한 <code>type=checkbox</code>와 <code>type=radio</code>타입의 <code>&lt;input&gt;</code>태그에 대해서는 <code>defaultChecked</code>를 지원합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;input  </div><div class="line">  type=<span class="string">"text"</span></div><div class="line">  defaultValue=<span class="string">"Jbee"</span>  </div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h4 id="htmlFor"><a href="#htmlFor" class="headerlink" title="htmlFor"></a>htmlFor</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;label for='name'&gt;Name: &lt;/label&gt;</div><div class="line">    &lt;input type='text'/&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div><div class="line">//"Warning: Unknown DOM property for. Did you mean htmlFor?</div><div class="line">//  in label</div><div class="line">//  in div"</div></pre></td></tr></table></figure>
<p><code>for</code>를 대체하는 <code>htmlFor</code>입니다. <code>for</code>속성을 사용하려고 하면 warning이 발생합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> element = (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;label htmlFor='name'&gt;Name: &lt;/label&gt;</div><div class="line">    &lt;input type='text'/&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>JavaScript 문법의 <code>for</code> 예약어와 겹치기 때문에 <code>htmlFor</code>가 생겨났습니다.</p>
<h4 id="dangerouslySetInnerHTML"><a href="#dangerouslySetInnerHTML" class="headerlink" title="dangerouslySetInnerHTML"></a>dangerouslySetInnerHTML</h4><p>이 속성은 DOM에서 사용하던 <code>innerHTML</code> 속성을 대체하기 위해 만들어졌습니다. 코드에서 HTML을 설정하는 것은 XSS 공격에 노출되기 쉽기 때문에 위험합니다. 그렇기 때문에 React에서는 이 속성 사용을 최소화하기 위해 장치를 마련해놓은 것입니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTML</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">__html</span>: <span class="string">'Dangerous inner html!'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div dangerouslySetInnerHTML=&#123;innerHTML()&#125; /&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>그럼에도 불구하고 <code>dangerouslySetInnerHTML</code> 속성을 사용하려면 위의 예제 코드와 같이 <code>__html</code>이라는 키 값과 함께 객체를 전달하여 사용할 수 있습니다.</p>
<p>React와 관련된 포스트는 <a href="https://github.com/JaeYeopHan/react_tutorial_with_docs" target="_blank" rel="external">Github Repository</a>에서 실시간 피드를 받으실 수 있습니다.</p>
<p><em>1. end</em></p>
<p>Reference&gt;<br><a href="https://facebook.github.io/react/docs/introducing-jsx.html" target="_blank" rel="external">React Documentation - Introducing JSX</a><br><a href="https://facebook.github.io/react/docs/dom-elements.html" target="_blank" rel="external">React Documentation - DOM Elements</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/react_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;React-1-Introducing-JSX-and-DOM&quot;&gt;&lt;a href=&quot;#React-1-Introducing-JSX-and-DOM&quot; class=&quot;
    
    </summary>
    
      <category term="React" scheme="https://jaeyeophan.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://jaeyeophan.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 12. Array API</title>
    <link href="https://jaeyeophan.github.io/2017/05/11/ES6-12-Array-API/"/>
    <id>https://jaeyeophan.github.io/2017/05/11/ES6-12-Array-API/</id>
    <published>2017-05-11T05:22:30.000Z</published>
    <updated>2017-05-12T05:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-12-Array-API"><a href="#ES6-12-Array-API" class="headerlink" title="[ES6] 12. Array API"></a>[ES6] 12. Array API</h1><p>JavaScript의 Array가 제공하는 API들에 대해서 살펴봅니다.</p>
<p><code>! Array.[methodName] vs Array.prototype.[methodName]</code><br>위 두 가지는 접근 방법이 다릅니다. 전자는 Array라는 오브젝트의 메소드이며 후자는 Array 타입의 모든 오브젝트에서 사용할 수 있는 메소드입니다. 간단한 예제를 통해 살펴보겠습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.from(<span class="string">'jbee'</span>); <span class="comment">//Error: arr.from is not a function</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">//console</span></div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<p><code>Array.from()</code>과 <code>Array.prototype.values()</code> 둘 차이를 보여주는 예제였습니다 :D<br>그럼 이제 Array API들에 대해 알아봅시다.</p>
<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><ul>
<li><code>from()</code>은 유사배열(Array-Like-Object)을 배열로 바꿔줍니다.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arrLikeObj = &#123;<span class="string">'0'</span>: <span class="string">'zero'</span>, <span class="string">'1'</span>: <span class="string">'one'</span>, <span class="string">'2'</span>: <span class="string">'two'</span>, <span class="string">'length'</span>: <span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">const</span> arrFrom = <span class="built_in">Array</span>.from(arrLikeObj);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arrFrom);<span class="comment">//Array ['zero', 'one', 'two']</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>이 방법을 통해 <code>String</code>을 Array로 변경할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> str = <span class="string">"Jbee"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str));<span class="comment">//Array ['J', 'b', 'e', 'e']</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(...str));<span class="comment">//Array ['J', 'b', 'e', 'e']</span></div></pre></td></tr></table></figure></p>
<p>ES6의 문법인 <code>Spread</code> 연산자를 사용해서도 가능합니다.<br><code>from()</code>을 다음과 같은 경우에 사용하면 유용할 것 같습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</div><div class="line"><span class="keyword">const</span> ulClassList = ul.classList;</div><div class="line"><span class="built_in">console</span>.log(ulClassList);</div><div class="line"><span class="comment">//["content-list", "foo", "bar", "baz", value: "content-list foo bar baz"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(ulClassList));<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> ulClassArr = <span class="built_in">Array</span>.from(ulClassList);</div><div class="line"><span class="built_in">console</span>.log(ulClassArr);<span class="comment">//["content-list", "foo", "bar", "baz"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(ulClassArr));<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>DOM의 <code>classList</code>는 유사배열(Array-Like-Object)로 반환이 됩니다. 이것을 <code>from()</code>을 사용하여 배열로 변경하여 Array API를 사용할 수 있도록 바꿔줄 수 있습니다.</p>
<ul>
<li><code>from()</code>의 두번째 인자로 콜백 함수를 넘겨줄 수 있습니다.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arrLikeObj = &#123;<span class="string">'0'</span>: <span class="number">100</span>, <span class="string">'1'</span>: <span class="number">101</span>, <span class="string">'2'</span>: <span class="number">102</span>, <span class="string">'length'</span>: <span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">const</span> arrFromWithCb = <span class="built_in">Array</span>.from(arrLikeObj, elm =&gt; elm + <span class="number">100</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Array로 변경된 각각의 엘리먼트들을 <code>elm</code>으로 받아서 100을 더해줍니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(arrFromWithCb);<span class="comment">// [200, 201, 202]</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>from()</code>의 세번째 인자로는 두번째 인자로 넘겨준 콜백 함수에서 참조할 오브젝트를 넘겨줄 수 있습니다.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arrFromWithCb3 = <span class="built_in">Array</span>.from(arrLikeObj, <span class="function"><span class="keyword">function</span>(<span class="params">elm</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> +elm + <span class="keyword">this</span>.value</div><div class="line">&#125;, &#123;<span class="attr">value</span>: <span class="number">200</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(arrFromWithCb3);<span class="comment">//[300, 301, 302]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>this</code>를 통해 참조하기 때문에 <code>arrow function</code>대신에 <strong>일반 함수</strong>를 사용하여 콜백 함수를 전달해줬습니다.</p>
<p><br></p>
<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p><code>of()</code>로 전달되는 파라미터 값을 배열로 반환합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<p>문자열도 <code>Spread</code> 연산자와 함께 사용하면 배열로 변환할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> str = <span class="string">`Jbee`</span>;</div><div class="line"><span class="keyword">const</span> strArr = <span class="built_in">Array</span>.of(...str);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(strArr));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(strArr);<span class="comment">//['J', 'b', 'e', 'e']</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="Array-prototype-entries"><a href="#Array-prototype-entries" class="headerlink" title="Array.prototype.entries()"></a>Array.prototype.entries()</h2><p>Array 오브젝트의 iterator를 반환하는 메소드입니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>);<span class="comment">//1  2  3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [ key, value ] <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> : <span class="subst">$&#123;value&#125;</span>`</span>);<span class="comment">//0:1  1:2  2:3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>key와 value는 각각 <code>Array.prototype.keys()</code>, <code>Array.prototype.values()</code>으로도 접근할 수 있습니다.</p>
<p><br></p>
<h2 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h2><p><code>find()</code> 파라미터로 콜백 함수를 넘겨서 처리한 내용을 반환합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="string">'Jbee'</span>, <span class="string">'babel'</span>, <span class="string">'React'</span>]</div><div class="line"><span class="keyword">const</span> result = arr.find(<span class="function"><span class="params">elm</span> =&gt;</span> elm.includes(<span class="string">'e'</span>));</div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">//'Jbee'</span></div></pre></td></tr></table></figure></p>
<p><code>e</code>를 포함하고 있는 문자열은 <code>&#39;Jbee&#39;</code>, <code>&#39;babel&#39;</code>, <code>&#39;React&#39;</code> 모두 해당하는데 <code>&#39;Jbee&#39;</code>만 반환했습니다. <code>find()</code>는 콜백 함수로 넘겨진 조건이 <code>true</code>되는 순간 반환하기 때문에 그 다음은 확인하지 않습니다.</p>
<p><code>Array.prototype.findIndex()</code>을 통해서 <code>value</code>가 아닌 <code>index</code>를 반환하게 하는 API도 존재합니다.</p>
<p><br></p>
<h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h2><p>위 <code>find()</code>와는 다르게 다시 <code>Array</code>를 반환합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="string">'Jbee'</span>, <span class="string">'babel'</span>, <span class="string">'React'</span>]</div><div class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">elm</span> =&gt;</span> elm.includes(<span class="string">'e'</span>));</div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">//'Jbee', 'babel', 'React'</span></div></pre></td></tr></table></figure></p>
<p>전달받은 콜백 함수로 각 엘리먼트들의 조건을 판단하여 <code>true</code>인 엘리먼트들에 대해서만 Array를 반환합니다.</p>
<p><br></p>
<h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h2><p>마찬가지로 다시 <code>Array</code>를 반환하는데, 배열의 엘리먼트에 접근하여 엘리먼트의 값을 reformat할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="string">'Jbee'</span>, <span class="string">'babel'</span>, <span class="string">'React'</span>]</div><div class="line"><span class="keyword">const</span> result = arr.map(<span class="function">(<span class="params">elm, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;i&#125;</span>: <span class="subst">$&#123;elm&#125;</span>`</span>);</div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ['0: Jbee', '1: babel', '2: React']</span></div></pre></td></tr></table></figure></p>
<p>콜백 함수의 두번째 인자, <code>i</code>로 API를 호출한 배열의 인덱스에 접근할 수 있습니다.</p>
<h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h2><p>배열의 각 값에 대해(0부터 arr.length 순서로) 넘겨받은 콜백 함수의 결과를 하나의 값으로 반환합니다.<br>콜백 함수의 인자로는 총 네 가지를 받을 수 있습니다.<br><code>previousValue</code>, <code>currentValue</code>, <code>currentIndex</code>, <code>array</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> result = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> previousValue + currentValue;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>arrow function을 사용하면 다음과 같습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> result = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Array.prototype에서 제공하는 <code>pop</code>, <code>push</code>, <code>splice</code>, <code>sort</code> 등은 배열 자체를 변화시킵니다.<br><code>concat</code>, <code>slice</code>, <code>join</code>, <code>indexOf</code> 함수들은 새로운 배열을 반환합니다.</p>
<h2 id="Array-prototype-splice-Array-prototype-slice"><a href="#Array-prototype-splice-Array-prototype-slice" class="headerlink" title="Array.prototype.splice(), Array.prototype.slice()"></a>Array.prototype.splice(), Array.prototype.slice()</h2><p><code>splice</code>에 전달되는 인자는 <code>startIndex</code>, <code>deleteCount</code>, <code>newItem</code> 총 세 개입니다.<br><figure class="highlight js"><figcaption><span>Array.prototype.splice()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [&#123;<span class="number">0</span>: <span class="string">'zero'</span>&#125;, &#123;<span class="number">1</span>: <span class="string">'one'</span>&#125;, &#123;<span class="number">2</span>: <span class="string">'two'</span>&#125;];</div><div class="line"><span class="keyword">const</span> result = arr.splice(<span class="number">0</span>, <span class="number">1</span>, &#123;<span class="number">4</span>: <span class="string">'foour'</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [&#123;4: 'foour'&#125;, &#123;1: 'one'&#125;, &#123;2: 'two'&#125;]</span></div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">// [&#123;0: 'zero'&#125;]</span></div></pre></td></tr></table></figure></p>
<p><code>slice</code>에 전달되는 인자는 <code>startIndex</code>, <code>deleteCount</code> 총 두 개입니다.<br><figure class="highlight js"><figcaption><span>Array.prototype.slice()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [&#123;<span class="number">0</span>: <span class="string">'zero'</span>&#125;, &#123;<span class="number">1</span>: <span class="string">'one'</span>&#125;, &#123;<span class="number">2</span>: <span class="string">'two'</span>&#125;];</div><div class="line"><span class="keyword">const</span> newArr = arr.slice(<span class="number">0</span>, arr.length);</div><div class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [&#123;0: 'zero'&#125;, &#123;1: 'one'&#125;, &#123;2: 'two'&#125;]</span></div><div class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">// [&#123;1: 'one'&#125;, &#123;1: 'one'&#125;, &#123;2: 'two'&#125;] is new Array</span></div></pre></td></tr></table></figure></p>
<p>기존의 <code>arr</code>에는 변경사항이 존재하지 않고 새로운 Array 오브젝트가 반환된 것을 확인하실 수 있습니다.</p>
<p><br></p>
<h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>Array에서 제공하는 기본적인 메소드들에 대해서 알아봤습니다. 포스트에서 소개한 메소드 이외에도 여러 메소드들이 존재하는데요, 잘 사용하면 보다 깔끔한 코드를 작성할 수 있겠습니다 :)</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="external">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="external">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a><br><a href="http://programmingsummaries.tistory.com/357" target="_blank" rel="external">http://programmingsummaries.tistory.com/357</a></p>
<p><em>12. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-12-Array-API&quot;&gt;&lt;a href=&quot;#ES6-12-Array-API&quot; class=&quot;headerlink&quot; title=&quot;[ES6] 1
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Webpack2, 입문 가이드 3편, Option</title>
    <link href="https://jaeyeophan.github.io/2017/05/08/webpack-tutorial-3/"/>
    <id>https://jaeyeophan.github.io/2017/05/08/webpack-tutorial-3/</id>
    <published>2017-05-08T08:06:52.000Z</published>
    <updated>2017-05-08T08:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/webpack.png" alt=""></p>
<h1 id="Tool-Webpack2-입문-가이드-3편-Option"><a href="#Tool-Webpack2-입문-가이드-3편-Option" class="headerlink" title="[Tool] Webpack2, 입문 가이드 3편, Option"></a>[Tool] Webpack2, 입문 가이드 3편, Option</h1><p><a href="https://jaeyeophan.github.io/2017/05/05/webpack-tutorial-1/">&gt; Webpack2, 입문 가이드 1편 &gt;</a><br><a href="https://jaeyeophan.github.io/2017/05/06/webpack-tutorial-2/">&gt; Webpack2, 입문 가이드 2편 &gt;</a></p>
<h2 id="Config’s-other-options"><a href="#Config’s-other-options" class="headerlink" title="Config’s other options"></a>Config’s other options</h2><p>기본적인 네 가지 옵션, <code>entry</code>, <code>output</code>, <code>module</code>, <code>plugin</code>에 대해 알아봤습니다. 이번 포스팅에서는 좀 더 나아가 추가적인 옵션들도 살펴봅니다.<br><br></p>
<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><p>2편에서 <code>HMR(HotModuleReplacement)</code> 플러그인을 사용할 때 추가해줬던 <code>webpack-dev-server</code>와 관련된 옵션입니다. 여러 가지 추가 설정이 존재합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">4000</span>,</div><div class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">publicPath</span>: <span class="string">'/dist/'</span>,</div><div class="line">    <span class="attr">contentBase</span>: path.join(__dirname, <span class="string">'/dist/'</span>),</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="pulicPath-‘-dirname-‘"><a href="#pulicPath-‘-dirname-‘" class="headerlink" title="pulicPath: ‘/[dirname]/‘"></a>pulicPath: ‘/[dirname]/‘</h4><p><code>pulicPath</code>를 지정해주지 않았다면 default path는 ‘/‘로 설정되어 있습니다. 그렇기 때문에 <code>$ webpack-dev-server</code> 명령어를 통해 실행하면 다음과 같은 메세지가 나타납니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack output is served from /</div></pre></td></tr></table></figure></p>
<p>이것은 bundle된 결과 파일들이 <code>http://localhost:[portNumber]</code>에 served되었다는 것을 의미합니다. <code>publicPath</code> 설정으로 이를 지정할 수 있으며 그 값은 예제처럼 <code>/</code>로 둘러쌓여 있어야 합니다. 이 값을 따로 설정해주면 live reloading 기능이 기존의 url로는 안되겠죠? <code>http://localhost:[portNumber]/[publicpath]/</code>로 접근해야 예전처럼 live reloading 기능을 사용하실 수 있습니다.</p>
<p>이외에도 <code>port</code>, <code>host</code>, <code>proxy</code> 등 다양한 옵션들이 존재합니다. <code>devServer</code>와 관련된 다양한 옵션은 다음 <a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="external">링크</a>에서 볼 수 있습니다.<br><br></p>
<h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>entry point에서 사용할 절대 경로(absolute path)를 지정할 때 사용합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">context</span>: path.join(__dirname),</div><div class="line">  [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><h4 id="reslove-alias"><a href="#reslove-alias" class="headerlink" title="reslove.alias"></a>reslove.alias</h4><p>path에 alias를 설정하여 모듈을 <code>import</code>할 때, 보다 간편히가 코드를 작성할 수 있습니다. 다음과 같은 import 구문이 있다고 가정해봅니다.<br><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utility &#125; <span class="keyword">from</span> <span class="string">'../../../../utilities/utility'</span>;</div></pre></td></tr></table></figure></p>
<p>상대경로로 타고 타고 올라가서 해당 경로를 찾아야 하는 불편함이 존재합니다. 이를 해결하기 위해 alias를 사용하면 다음과 같은 코드로 재탄생합니다.<br><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alias: &#123;</div><div class="line">  <span class="attr">Utilities</span>: path.join(__dirname, <span class="string">'src/utilities'</span>);</div><div class="line">  post$: path.join(__dirname, <span class="string">'src/service/post.js'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>path를 마치 상수처럼 선언하여 프로젝트에서 사용할 수 있도록 해줍니다.<br><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utility &#125; <span class="keyword">from</span> <span class="string">'Utilities/utility'</span>;</div><div class="line"><span class="keyword">import</span> post <span class="keyword">from</span> <span class="string">'post'</span>;</div></pre></td></tr></table></figure></p>
<p>디렉토리에 대해서 그리고 파일에 대해서 path를 지정했습니다. 위의 예제처럼 특정 파일에 대해서 alias를 생성할 때, 생성하고자 하는 alias 뒤에 <code>$</code>를 붙여주면 해당 path뒤로 추가적인 path를 설정할 수 없습니다.</p>
<p><code>resolve</code>와 관련된 다양한 옵션은 다음 <a href="https://webpack.js.org/configuration/resolve/" target="_blank" rel="external">링크</a>에서 볼 수 있습니다.</p>
<p><br></p>
<h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>webpack에서 제공하는 기술 중, <code>SourceMaps</code>이라는 기술이 있습니다. <code>SourceMaps</code>은 하나의 파일로 병합되거나 압축된 자바스크립트, CSS 파일을 원형으로 분리(path 구조까지)하여, 복원해주는 기술입니다.<br><code>devtool</code> 옵션은 <code>SourceMaps</code>을 생성할지 말지를 결정하는 옵션입니다. 에러가 발생할 때, 어느 부분에서 에러가 발생했는지 알아야 디버깅이 수월할텐데요, <code>source map</code>은 bundle된 코드에서 발생한 에러를 기존의 코드와 연결시켜주는 역할을 합니다. <code>devtool</code>에서 설정할 수 있는 옵션들에는 여러 가지가 존재하며 각각의 장단점이 존재합니다.</p>
<table>
<thead>
<tr>
<th>devtool</th>
<th>build</th>
<th>rebuild</th>
<th>production</th>
</tr>
</thead>
<tbody>
<tr>
<td>eval</td>
<td>+++</td>
<td>+++</td>
<td>no</td>
</tr>
<tr>
<td>cheap-eval-source-map</td>
<td>+</td>
<td>++</td>
<td>no</td>
</tr>
<tr>
<td>cheap-source-map</td>
<td>+</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>cheap-module-eval-source-map</td>
<td>0</td>
<td>++</td>
<td>no</td>
</tr>
<tr>
<td>cheap-module-source-map</td>
<td>0</td>
<td>-</td>
<td>yes</td>
</tr>
<tr>
<td>eval-source-map</td>
<td>- -</td>
<td>+</td>
<td>no</td>
</tr>
<tr>
<td>source-map</td>
<td>- -</td>
<td>- -</td>
<td>yes</td>
</tr>
<tr>
<td>nosources-source-map</td>
<td>- -</td>
<td>- -</td>
<td>yes</td>
</tr>
</tbody>
</table>
<p><a href="https://webpack.js.org/configuration/devtool/" target="_blank" rel="external">https://webpack.js.org/configuration/devtool/</a></p>
<p>Webpack2 공식 홈페이지에서 소개하고 있는 devtool 옵션들입니다. <code>+</code>는 작업 속도가 빠르다는 것을 의마하며 <code>-</code>는 그 반대로 느린 것을 의미합니다. 이 많은 옵션 중에서 개발할 때 적합한 옵션은 무엇이고, 배포할 때 적합한 옵션은 무엇일까요?</p>
<p>개발 시에는 얼머나 용량을 줄이느냐보다 어디에서 에러가 발생했는지 알 수 있어야 하므로 로그가 상세히 나타나는 옵션을 선택해야하며 생산성을 높이기 위해 빌드 시간이 짧아야 합니다. 배포용은 용량이 우선적으로 작아야 겠죠? 저는 다음과 같이 정리해보았습니다.  </p>
<p><em>Option for development)</em></p>
<ul>
<li><code>cheap-module-eval-source-map</code></li>
<li><code>inline-source-map</code></li>
<li><code>eval-source-map</code></li>
</ul>
<p><em>Option for production)</em></p>
<ul>
<li><code>cheap-module-source-map</code></li>
</ul>
<p>각 옵션들에 대한 상세한 내용은 링크를 첨부합니다.<br><a href="http://cheng.logdown.com/posts/2016/03/25/679045" target="_blank" rel="external">&gt; Webpack devtool source map&gt;</a><br><a href="https://perfectacle.github.io/2016/11/14/Webpack-devtool-option-Performance/" target="_blank" rel="external">&gt; (webpack) devtool 옵션 퍼포먼스&gt;</a></p>
<p><br></p>
<h3 id="env-EnvironmentPlugin"><a href="#env-EnvironmentPlugin" class="headerlink" title="env, EnvironmentPlugin"></a>env, EnvironmentPlugin</h3><p>환경에 따라 webpack이 수행해줘야 할 작업이 달라질 수 있습니다. 여기서 말하는 <code>환경</code>이란, 개발을 진행하는 과정에서 webpack 작업인지, 배포하는 과정에서의 작업인지로 구분할 수 있습니다. webpack이 작동하는 환경은 기본적으로 <code>development</code>라는 string value로 설정되어 있습니다.<br><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.EnvironmentPlugin(&#123;</div><div class="line">  <span class="attr">NODE_ENV</span>: <span class="string">'development'</span>,</div><div class="line">  <span class="attr">DEBUG</span>: <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>bundle된 파일 전체에서 사용할 수 있는 상수를 만들어서 환경 변수로 사용할 수 있습니다. 이 때 <code>DefinePlugin</code>을 사용할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">  <span class="string">'process.env.NODE_ENV'</span> : <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV),</div><div class="line">  <span class="string">'process.env.DEBUG'</span> : <span class="built_in">JSON</span>.stringify(process.env.DEBUG)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>특정한 환경을 위한 코드를 작성하는 경우, process.env.NODE_ENV를 통해 NODE_ENV의 값을 확인할 수 있습니다. 환경 변수의 값을 확인하는 작업은 성능 저하를 유발하므로 이러한 작업은 낮은 빈도로 실행해야 한다는 점에 주의하세오.</p>
<p><br></p>
<h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>이외에도 많은 옵션들이 존재합니다. <a href="https://webpack.js.org/configuration/" target="_blank" rel="external">Webpack 공식 홈페이지</a>에서 확인하실 수 있습니다 :)</p>
<p>포스팅에서 사용된 예제 코드와 webpack tutorial 시리즈 전체는 <a href="https://github.com/JaeYeopHan/webpack2_tutorial" target="_blank" rel="external">Github repository</a>에서 확인하실 수 있습니다 :D</p>
<p><em>3편 end</em></p>
<p>Reference<br><a href="https://webpack.js.org/configuration/" target="_blank" rel="external">Webpack configuration</a><br><a href="https://perfectacle.github.io/2016/11/14/Webpack-devtool-option-Performance/" target="_blank" rel="external">Webpack devtool 옵션 퍼포먼스</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/webpack.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tool-Webpack2-입문-가이드-3편-Option&quot;&gt;&lt;a href=&quot;#Tool-Webpack2-입문-가이드-3편-Option&quot; class=&quot;heade
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="tool" scheme="https://jaeyeophan.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Webpack2, 입문 가이드 2편: Plugins</title>
    <link href="https://jaeyeophan.github.io/2017/05/06/webpack-tutorial-2/"/>
    <id>https://jaeyeophan.github.io/2017/05/06/webpack-tutorial-2/</id>
    <published>2017-05-06T03:15:26.000Z</published>
    <updated>2017-05-08T08:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/webpack.png" alt=""></p>
<h1 id="Tool-Webpack2-입문-가이드-2편"><a href="#Tool-Webpack2-입문-가이드-2편" class="headerlink" title="[Tool] Webpack2, 입문 가이드 2편"></a>[Tool] Webpack2, 입문 가이드 2편</h1><p><a href="https://jaeyeophan.github.io/2017/05/05/webpack-tutorial-1/">&gt; Webpack2, 입문 가이드 1편 &gt;</a></p>
<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>플러그인을 통해 코드를 난독화(Uglify)하여 압축할 수 있고, 공통된 코드(Common chunk)를 분리할 수 있고, 코드의 변경사항을 파악하게 하여 자동으로 재실행시킬 수 있습니다. 이외에도 여러 가지 훌륭한 기능들이 존재하는데요, Webpack이 제공하는 플러그인과 외부 플러그인들 중에서 일부에 대해 알아봅니다.</p>
<p>Webpack에 내장된 플러그인에는 <code>webpack.[plugin-name]</code>을 통해 접근할 수 있습니다.</p>
<figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: [...],</div><div class="line">  <span class="attr">output</span>: [...],</div><div class="line">  <span class="attr">module</span>: [...],</div><div class="line">  <span class="attr">plugins</span>: [...]</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure>
<p><code>plugins</code>에는 배열을 통하여 여러 플러그인을 설정할 수 있습니다. 1편에서와는 다르게 기본 구조에서 코드 한 줄이 추가되었는데요, webpack이 제공하는 플러그인을 사용하기 위해서 <code>webpack</code>이란 모듈을 불러와야 합니다.</p>
<p><br></p>
<h3 id="UglifyJsPlugin"><a href="#UglifyJsPlugin" class="headerlink" title="UglifyJsPlugin"></a>UglifyJsPlugin</h3><p>webpack을 통해 작업을 수행할 때, 코드를 압축하여 난독화시켜주는 플러그인입니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  [...]</div><div class="line">  plugins: [</div><div class="line">    <span class="comment">//new webpack.optimize.UglifyJsPlugin()</span></div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      <span class="attr">compressor</span>: &#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">false</span>,</div><div class="line">      &#125;,</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>UglifyJsPlugin</code>은 <code>optimize</code>로 접근할 수 있습니다. config파일 설정을 마쳤으면 <code>$ webpack</code> 명령어를 수행해줍니다. 그리고 나서 <code>dist/bundle.js</code> 파일을 확인해봅니다. 코드가 한 줄로 알아볼 수 없게 압축되어 있는 것을 확인하실 수 있습니다 :) 해당 플러그인을 생성할 때, 파라미터로 옵션을 전달할 수 있습니다. 이 예제에서는 압축 시 발생할 수 있는 경고를 무시하는 옵션을 추가했습니다.</p>
<p><br></p>
<h3 id="CommonChunkPlugin"><a href="#CommonChunkPlugin" class="headerlink" title="CommonChunkPlugin"></a>CommonChunkPlugin</h3><p>entry point가 여러 개 설정되어있는 경우, 공통된 모듈 또는 라이브러리를 별도의 chunk로 분리하여 bundle 작업을 수행할 때 사용할 수 있는 plugin입니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  [...]</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">"commons"</span>,</div><div class="line">      <span class="attr">filename</span>: <span class="string">"commons.js"</span>,</div><div class="line">      <span class="attr">minChunks</span>: <span class="literal">Infinity</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>name</code>, <code>filename</code>, <code>minChunks</code> 세 가지 옵션만 설정해봤습니다. <code>name</code>은 생성될 chunk의 이름을 지정합니다. 생성될 파일의 이름인 <code>filename</code>을 설정하고 <code>minChunks</code>라는 옵션을 통해서 <code>commons</code>로 묶일 최소한의 module 개수를 설정할 수 있습니다. <code>Infinity</code>라는 설정값을 주면 공통으로 묶을 수 있는 모듈들을 모두 commons로 묶습니다. <code>number</code> or <code>function</code>을 지정하여 customize할 수 있습니다.</p>
<p>위 설정을 마치고 <code>$webpack</code> 명령어를 실행하게 되면 <code>commons.js</code>파일과 <code>bundle.js</code>파일 두 파일이 생성됩니다. 이를 <code>index.html</code>에서 로드를 할 때, 다음과 같이 <code>commons.js</code>파일을 먼저 로드해야 한다는 점 주의하시면 되겠습니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/commons.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>추가적인 다른 옵션은 다음 <a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="external">링크</a>를 참고하시면 됩니다 :)</p>
<p><br></p>
<h3 id="ExtractTextPlugin"><a href="#ExtractTextPlugin" class="headerlink" title="ExtractTextPlugin"></a>ExtractTextPlugin</h3><p>이 플러그인은 따로 설치가 필요합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev extract-text-webpack-plugin</div><div class="line"><span class="comment"># or</span></div><div class="line">$ yarn add -D extract-text-webpack-plugin</div></pre></td></tr></table></figure></p>
<p>webpack을 통해서 css를 로드하는 경우 발생하는 문제점은 js와 함께 로드된다는 것입니다. 기존에는 js와 따로 css만 로드되었습니다. 이 플러그인이 bundle되는 과정에서 js파일과 css파일을 분리해줍니다. 분리된 css bundle 파일은 병렬로 로드가 되어 사용자 입장에서는 더 빠르게 완성된 웹 페이지 화면을 볼 수 있게 됩니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  [...]</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">use</span>: ExtractTextPlugin.extract(&#123;</div><div class="line">          <span class="attr">fallback</span>: <span class="string">"style-loader"</span>,</div><div class="line">          <span class="attr">use</span>: <span class="string">"css-loader"</span></div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>module</code> 옵션에서 <code>style-loader</code>를 사용하는 설정 코드가 변경되었습니다. <code>plugins</code> 옵션에 해당 플러그인을 추가해주고 파라미터로 bundle된 output의 filename을 설정해줍니다. <code>$ webpack</code> 명령어를 실행해주면 dist 폴더에 <code>styles.css</code>파일이 생성된 것을 확인할 수 있습니다.</p>
<p>추가적인 다른 옵션은 다음 <a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/" target="_blank" rel="external">링크</a>를 참고하시면 됩니다 :)</p>
<p><br></p>
<h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><p>따로 분리하여 bundle한 css파일과 js파일을 각각 html 파일에 link 태그와 script태그로 추가해줘야 합니다. 이 플러그인은 이것을 자동화해줍니다. 이 플러그인도 마찬가지로 따로 설치가 필요합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev html-webpack-plugin</div><div class="line"><span class="comment"># or</span></div><div class="line">$ yarn add -D html-webpack-plugin</div></pre></td></tr></table></figure></p>
<p>그리고 plugin에 추가해줍니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">'./index.html'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>template 옵션에는 해당하는 html파일의 패스를 입력해주시면 됩니다. <code>$ webpack</code> 명령어를 실행해주면 dist 폴더에 <code>index.html</code>파일이 생성되고 자동으로 bundle된 css파일과 js파일이 link태그와 script태그로 추가된 것을 확인하실 수 있습니다. !webpack에 의해서 자동으로 추가되므로 <strong>우리가 작성하는 </strong> html 파일에는 script태그와 link태그를 작성할 필요가 없습니다. 오히려 작성하면 두 번 load를 하게 되므로 성능상 좋지 않습니다.</p>
<p>사실 이 플러그인은 우리의 귀차니즘을 해결해주는 것보다 더 훌륭한 존재의 이유가 있습니다. 그것을 바로 <code>caching</code>할 때, bundle 작업의 결과물로 hash 값을 파일 명이 쓰게 되는데, 이 hash 값을 개발자가 예측할 수 없다는 것입니다. 그렇기 때문에 개발자가 추가하지 못하는 것을 webpack이 대신 해줍니다 :) (webpack에서의 caching에 대해서는 추후 포스팅에서 다룹니다.)</p>
<p>추가적인 다른 옵션은 다음 <a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="external">링크</a>를 참고하시면 됩니다 :)</p>
<p><br></p>
<h3 id="HotModuleReplacementPlugin"><a href="#HotModuleReplacementPlugin" class="headerlink" title="HotModuleReplacementPlugin"></a>HotModuleReplacementPlugin</h3><p><code>HMR</code>이라는 약자로도 많이 불리는 플러그인 입니다. 개발 생산성을 극대화(?)시켜주는 플러그인이라고 할 수 있습니다. 이 플러그인 없이 <code>$ webpack-dev-server --watch</code> 명령어를 실행하여 작업을 하고 저장을 해도 자동 reload가 안됩니다. 다음과 같이 추가해줍니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  [...]</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>사실 이 플러그인을 추가해도 reload는 되지 않고 webpack 작업만 자동으로 실행됩니다. 웹 브라우저에 자동으로 reload를 시켜주려면 한 가지 설정이 추가적으로 필요합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  [...]</div><div class="line">  devServer: &#123;</div><div class="line">    <span class="attr">contentBase</span>: <span class="string">'./dist'</span>,</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>$ webpack-dev-server --watch</code>를 실행하고 js파일을 수정하고 저장을 해주면 자동으로 웹브라우저에 reload가 되는 것을 확인하실 수 있습니다! (<code>devServer</code>는 config에서 설정할 수 있는 또다른 옵션입니다.)</p>
<p><br></p>
<h3 id="NoEmitOnErrorsPlugin"><a href="#NoEmitOnErrorsPlugin" class="headerlink" title="NoEmitOnErrorsPlugin"></a>NoEmitOnErrorsPlugin</h3><p>컴파일 도중 오류가 발생한 리소스들은 제외하고 작업을 진행하여 bundling하도록 합니다. 참고로 <code>NoErrosPlugin</code>은 deprecated되었습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</div></pre></td></tr></table></figure></p>
<p><br></p>
<h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>이외에도 많은 플러그인들이 존재합니다. <a href="https://github.com/webpack-contrib/awesome-webpack" target="_blank" rel="external">awsome-webpack</a>에서 확인하실 수 있습니다 :)<br>다음 포스팅에서는 config파일의 기본적인 옵션을 제외한 다른 옵션들에 대해 알아보겠습니다. :)</p>
<p>포스팅에서 사용된 예제 코드는 <a href="https://github.com/JaeYeopHan/webpack2_tutorial" target="_blank" rel="external">Github repository</a>에서 확인하실 수 있습니다 :D</p>
<p><em>2편 end</em></p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://webpack.js.org/plugins/" target="_blank" rel="external">Webpack Plugins</a><br><a href="https://webpack.js.org/configuration/plugins/" target="_blank" rel="external">Webpck official DOCS</a><br><a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="external">Webpck official CONCEPT</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/webpack.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tool-Webpack2-입문-가이드-2편&quot;&gt;&lt;a href=&quot;#Tool-Webpack2-입문-가이드-2편&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="tool" scheme="https://jaeyeophan.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Webpack2, 입문 가이드 1편</title>
    <link href="https://jaeyeophan.github.io/2017/05/05/webpack-tutorial-1/"/>
    <id>https://jaeyeophan.github.io/2017/05/05/webpack-tutorial-1/</id>
    <published>2017-05-05T08:58:38.000Z</published>
    <updated>2017-05-05T09:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/webpack.png" alt=""></p>
<h1 id="Tool-Webpack2-입문-가이드-1편"><a href="#Tool-Webpack2-입문-가이드-1편" class="headerlink" title="[Tool] Webpack2, 입문 가이드 1편"></a>[Tool] Webpack2, 입문 가이드 1편</h1><h2 id="Webpack이란-무엇인가"><a href="#Webpack이란-무엇인가" class="headerlink" title="Webpack이란 무엇인가"></a>Webpack이란 무엇인가</h2><p>너무 유명해져서 더이상의 말은 필요없을 것 같습니다:) 이에 대해 잘 정리해놓은 문서도 정말 많구요! 이 포스팅에서는 <code>webpack.config.js</code> 파일의 구조에 집중할 예정입니다. 아래 Reference의 링크를 참고해주세요!</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install -g webpack webpack-dev-server</div><div class="line">$ npm install --save-dev webpack webpack-dev-server</div><div class="line"><span class="comment"># or</span></div><div class="line">$ yarn global add webpack webpack-dev-server</div><div class="line">$ yarn add -D webpack webpack-dev-server</div></pre></td></tr></table></figure>
<p>Webpack이 제공하는 기능 중 로컬에서도 사용해야 하는 플러그인이 존재하므로 로컬에도 설치해줍니다. 그리고 webpack의 결과물을 확인하기 위해 서버를 띄워야하므로 <code>webpack-dev-server</code>도 함께 설치해줍니다. webpack 실행은 <code>$ webpack</code>이란 명령어로, webpack-dev-server 실행은 <code>$ webpack-dev-server</code>라는 명령어로 가능합니다 :)<br>이제 config 파일을 파헤쳐봅니다…</p>
<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: [...],</div><div class="line">  <span class="attr">output</span>: [...],</div><div class="line">  <span class="attr">module</span>: [...],</div><div class="line">  <span class="attr">plugins</span>: [...]</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure>
<p><code>webpack.config.js</code> 파일은 복잡해보이지만, <code>config</code> 객체를 정의하고 <code>module.exports</code> 구문을 통해 노출시킵니다. 모든 config 파일은 이런 구조로 <code>entry</code>, <code>output</code>, <code>module</code>, <code>plugins</code> 네 가지 설정을 <strong>기본적인</strong> 옵션을 제공합니다. <code>entry</code>, <code>output</code> option만 있을 때는 bundling 작업만 진행합니다.(이 두 option은 반드시 필요합니다.) 그럼, 각각에 대해서 알아봅니다.</p>
<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>webpack은 라이브러리 간의 의존성을 그래프(<code>dependency tree</code>)로 표현을 합니다. 이 그래프를 만들 때의 시작점을 <code>entry</code>라는 옵션을 통해 설정할 수 있습니다. 즉, webpack을 이용하여 bundle하고 build할 애플리케이션의 시작점을 설정하는 옵션이라고 할 수 있습니다.</p>
<h4 id="Usage1-entry-string-Array-lt-string-gt"><a href="#Usage1-entry-string-Array-lt-string-gt" class="headerlink" title="Usage1: entry: string|Array&lt;string&gt;"></a>Usage1: <code>entry: string|Array&lt;string&gt;</code></h4><p><code>entry</code> 값으로는 <code>string</code> 또는 <code>배열</code>이 올 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>배열을 사용하는 경우의 대표적인 경우로는 <code>react-hot-loader</code>를 사용하는 경우가 있습니다.</p>
<h4 id="Usage2-entry-entryChunkName-string-string-Array-lt-string-gt"><a href="#Usage2-entry-entryChunkName-string-string-Array-lt-string-gt" class="headerlink" title="Usage2: entry: {[entryChunkName: string]: string|Array&lt;string&gt;}"></a>Usage2: <code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code></h4><p><code>entry point</code>를 여러 개 설정해야 하는 경우에는 Object를 사용하여 지정할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/app.js'</span>,</div><div class="line">    <span class="attr">vendors</span>: <span class="string">'./src/vendors.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>다른 <code>entry point</code>에서 시작하므로 각각의 <code>entry point</code>에서 생성된 그래프는 <strong>완전히 독립적인 그래프</strong>가 됩니다. (이러는 경우 각각의 dependency tree에서 중복되는 코드들이 발생할 수 있는데 이 부분은 <code>commons-chunk-plugin</code>을 통해서 해결할 수 있습니다.)</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><code>entry</code>로 지정된 파일로부터 bundling을 진행하고, 그 결과를 <strong>어떻게 할지</strong>를 설정합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: [...]</div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/home/proj/dist'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>bundling된 결과 파일의 이름을 <code>filename</code>으로 어디에 생성할지에 대한 정보를 <code>path</code>에 설정해줍니다. <code>path</code>에는 <strong>절대 경로</strong>를 통해 설정해줘야합니다. 그렇기 때문에 <code>__dirname</code>을 사용할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: [...]</div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">'/dist'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>path</code>라는 모듈을 사용해서 path를 지정해줄 수 있습니다. <code>.join()</code>, <code>.resolve()</code> 두 가지의 메소드는 약간의 차이는 있지만 <code>__dirname</code>을 사용하는 경우 두 메소드 둘 다 동일한 의도하는 값을 반환하기 때문에 둘 다 사용 가능합니다. 두 메소드에 차이는 <a href="http://stackoverflow.com/questions/35048686/difference-between-path-resolve-and-path-join-invocation" target="_blank" rel="external">링크</a>를 참고하시면 됩니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: [...]</div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>path</code> 모듈을 통해 path를 정리한 후의 상태입니다.<br><br></p>
<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p><code>module</code> 옵션은 webpack을 통해 bundling을 진행할 때 처리해야 하는 task들을 실행할 때 사용합니다. ES5 문법을 사용하기 위해 먼저 <code>babel</code>을 통해 <strong>transpile</strong>을 해야 하는데 이 작업을 <code>babel-loader</code>를 통해 설정해줄 수 있습니다. 또 javascript 파일 뿐만 아니라 css 파일을 load해야하는 경우에는 <code>css-loader</code>를 사용할 수 있습니다.</p>
<h4 id="module-rules"><a href="#module-rules" class="headerlink" title="module.rules"></a>module.rules</h4><p><code>rules</code>에 각종 loader들을 등록할 수 있습니다. 배열의 형태로 여러 loader들을 등록합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">rules</span>: [&#123;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>여기에서 <code>babel-loader</code>, <code>css-loader</code> 등이 설정됩니다. 하나의 <code>loader</code>당 하나의 Object로 추가할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">rules</span>: [&#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">            <span class="attr">include</span>: path.join(__dirname, <span class="string">'src'</span>),</div><div class="line">            <span class="attr">use</span>: [&#123;</div><div class="line">                <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</div><div class="line">                <span class="attr">options</span>: &#123;</div><div class="line">                    <span class="attr">presets</span>: [</div><div class="line">                        [<span class="string">'env'</span>, &#123; <span class="attr">module</span>: <span class="literal">false</span> &#125;]</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;]</div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>babel-loader</code> 하나만 추가했습니다. (<code>babel-loader</code>를 사용하기 위해서는 <code>babel-core</code>, <code>babel-loader</code>, <code>babel-preset-env</code> 세 개의 모듈이 필요합니다. <code>babel-preset-env</code>의 <code>env</code>가 <code>es2015</code>, <code>es2016</code>, <code>es2017</code>, <code>latest</code>를 대체합니다.)</p>
<p><code>test</code>를 통해 load할 파일을 지정하고, <code>exclude</code>와 <code>include</code>를 통해 <code>path</code>를 지정해줄 수 있습니다. 그리고 나서 사용할 module을 <code>use</code>를 통해 작성해 줍니다. <code>use</code> 안에는 <code>loader</code>와 <code>options</code>를 명시하여 loader에 대한 명세를 합니다. 이 <code>options</code>의 경우는 <code>babel</code>의 <code>.babelrc</code>파일로 따로 추출할 수 있습니다. <code>config.js</code> 파일이 과도하게 복잡해지는 것을 방지하기 위해서 loader에 대한 옵션은 따로 추출하는 것도 좋은 방법입니다.</p>
<p><code>presets</code>에서 <code>{ module: false }</code>는 <a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="external">tree shaking</a>을 사용하는 옵션으로 bundling 결과로부터 사용되지 않은 코드를 삭제하어 파일 크기를 줄여줍니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">    <span class="attr">use</span>: [</div><div class="line">        <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>rules</code>에 위와 같은 객체를 추가해주면 css 파일을 load할 수 있습니다. (마찬가지로 <code>style-loader</code>, <code>css-loader</code> 두 가지를 install 해야합니다.)</p>
<p>다음 포스팅에서는 보다 효율적으로 개발을 도와주고 애플리케이션의 성능 향상에 도움을 주는 <code>Plugins</code>에 대해 알아보겠습니다 :)</p>
<p>포스팅에서 사용된 예제 코드는 <a href="https://github.com/JaeYeopHan/webpack2_tutorial" target="_blank" rel="external">Github repository</a>에서 확인하실 수 있습니다 :D</p>
<p><em>1편 end</em></p>
<p>Reference&gt;<br><a href="https://github.com/AriaFallah/WebpackTutorial/tree/master/ko-arahansa/part1" target="_blank" rel="external">Webpack Tutorial</a><br><a href="https://github.com/FEDevelopers/tech.description/wiki/Webpack2%EC%99%80-%EB%AA%A8%EB%93%88%EB%B2%88%EB%93%A4%EB%A7%81%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%B4%88%EB%B3%B4%EC%9E%90-%EA%B0%80%EC%9D%B4%EB%93%9C" target="_blank" rel="external">Webpack2와 모듈 번들링을 위한 초보자 가이드</a><br><a href="http://d2.naver.com/helloworld/0239818" target="_blank" rel="external">Javascript 모듈화 도구, webpack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/webpack.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tool-Webpack2-입문-가이드-1편&quot;&gt;&lt;a href=&quot;#Tool-Webpack2-입문-가이드-1편&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="tool" scheme="https://jaeyeophan.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 11. Modulization</title>
    <link href="https://jaeyeophan.github.io/2017/05/04/ES6-11-Modulization/"/>
    <id>https://jaeyeophan.github.io/2017/05/04/ES6-11-Modulization/</id>
    <published>2017-05-04T06:22:01.000Z</published>
    <updated>2017-05-04T08:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-11-Modulization"><a href="#ES6-11-Modulization" class="headerlink" title="[ES6] 11. Modulization"></a>[ES6] 11. Modulization</h1><p>ES6에서 추가된 import/export 구문을 9가지 Case로 나누어 정리해봤습니다.</p>
<h2 id="Module-in-Javascript"><a href="#Module-in-Javascript" class="headerlink" title="Module in Javascript"></a>Module in Javascript</h2><p><a href="http://asfirstalways.tistory.com/234" target="_blank" rel="external">Module pattern</a>이라고 들어보셨나요? ES5에서는 기본적으로 global에 변수가 할당되기 때문에, <a href="http://asfirstalways.tistory.com/233" target="_blank" rel="external">Namespace pattern</a>, module pattern 등등의 기법들이 필요했습니다. 또한 CommonJS, AMD처럼 같은 언어에서 환경에 따라 다른 방식으로 소스코드를 가져와 사용해야 했습니다. 이에 대한 부분은 <a href="http://d2.naver.com/helloworld/12864" target="_blank" rel="external">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a>를 참고하시면 될 것 같습니다.</p>
<p>ES6에서는 이러한 문제점을 인식하고 <code>import</code>라는 구문을 통해 Modulization을 제공합니다. 하지만 아쉽게도 <strong>Safari</strong>를 제외한 다른 브라우저에서는 아직 지원을 하지 않습니다. 그렇기 때문에 Webpack과 babel의 도움을 받아 테스트해볼 수 있습니다.</p>
<h2 id="import-amp-export"><a href="#import-amp-export" class="headerlink" title="import &amp; export"></a>import &amp; export</h2><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h3><p>함수를 다른 자바스크립트 파일에서 불러와 실행해야 하는 경우에 대한 예제 코드입니다.<br><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`module1`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; hello &#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line">hello(); <span class="comment">//module1</span></div></pre></td></tr></table></figure>
<p>외부의 자바스크립트 파일에서 다른 자바스크립트 파일에 존재하는 함수를 문제없이 사용할 수 있게 되었습니다:)<br><code>{ ... }</code>는 ES6의 <code>destructuring</code> 문법을 사용한 것입니다. <code>module1.js</code>파일에서 export가 붙은 함수를 import하는데 그 중 <code>hello</code>라는 함수를 import하겠다는 의미입니다. 이와 같은 방법으로 여러 함수 또는 변수를 export하고 import할 수 있습니다. 다른 방법도 살펴보겠습니다.</p>
<h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h3><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`module1`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> module1 <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line">module1();<span class="comment">// module1</span></div></pre></td></tr></table></figure>
<p><code>default</code>라는 키워드가 보이시나요? <code>export</code> 키워드를 사용하여 함수를 외부로 노출시킬 때, <code>default</code>라는 키워드를 붙여주면 해당 파일이 import되는 경우 기본적으로 지정된 함수 또는 변수를 노출시키겠다라는 의미입니다. 주로 파일에서 하나의 함수 또는 변수를 노출시킬 경우에 사용합니다. <code>default</code> 키워드를 사용하게 되면 특정 함수나 변수를 import하는 것이 아니므로 import하는 곳에서 변수명 또는 함수명을 임의로 지정할 수 있습니다. 이번 예제에서는 <code>hello</code>라는 함수 이름을 그대로 사용하지 않고 <code>module1</code>이라는 이름을 지정하여 함수를 호출했습니다.</p>
<h3 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h3><p><code>export default</code>로 이미 export를 한 후에 다른 함수나 변수를 export하기 위해서는 import할 때 다음과 같은 방법을 사용해야 합니다.<br><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`module1`</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">"jbee"</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> module1, &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line">module1();<span class="comment">// module1</span></div><div class="line"><span class="built_in">console</span>.log(name);<span class="comment">// jbee</span></div></pre></td></tr></table></figure>
<p><code>name</code>이라는 변수를 import하는 경우에는 반드시 <code>name</code>이라는 변수명으로 import해야겠죠? 다음의 경우에는 어떻게 될까요?</p>
<h4 id="Case-3-1"><a href="#Case-3-1" class="headerlink" title="Case 3-1"></a>Case 3-1</h4><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> module1, &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line">module1();<span class="comment">// module1</span></div><div class="line"><span class="built_in">console</span>.log(name);<span class="comment">// jbee</span></div><div class="line">name = <span class="string">"newName"</span>; <span class="comment">//SyntaxError!</span></div></pre></td></tr></table></figure>
<p>import한 name을 다시 정의하려고 하면 SyntaxError가 발생합니다. import된 <code>name</code>이란 변수는 <code>read-only</code> 속성이 적용되기 때문입니다. 만약에 다음과 같은 경우는 어떻게 해야할까요?</p>
<h4 id="Case-3-2"><a href="#Case-3-2" class="headerlink" title="Case 3-2"></a>Case 3-2</h4><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">"jbee"</span>;</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>module2.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">"newName"</span>;</div></pre></td></tr></table></figure>
<p>다른 자바스크립트 파일에서 같은 변수명을 사용한 경우입니다. 기존의 방식대로 import를 해볼까요?<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module2'</span>;</div></pre></td></tr></table></figure></p>
<p>default로 export되지 않은 함수 또는 변수에 대해서는 반드시 그 이름을 지정해야 했습니다. 이럴 경우에는 <code>Duplicate declaration</code>에러가 발생합니다.</p>
<h3 id="Case-4"><a href="#Case-4" class="headerlink" title="Case 4"></a>Case 4</h3><p>위에서 발생한 문제를 해결하기 위한 첫번째 방법입니다.<br><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> module1Name&#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> module2Name&#125; <span class="keyword">from</span> <span class="string">'./module2'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(module1Name);</div><div class="line"><span class="built_in">console</span>.log(module2Name);</div></pre></td></tr></table></figure></p>
<p><code>as</code>라는 키워드가 등장했습니다. <code>alias</code>의 줄임으로 import한 변수 또는 함수에 대해 별명을 지정할 수 있습니다. 이렇게 import를 하면 변수명끼리 충돌이 일어나지 않습니다:) 그러나 변수명이 점점 많아지게 되면 계속해서 새로운 변수명을 지정해줘야 하는 문제점이 발생하게 됩니다.</p>
<h3 id="Case-5"><a href="#Case-5" class="headerlink" title="Case 5"></a>Case 5</h3><p>위의 문제를 조금 더 개선해보겠습니다:)<br><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Module1 <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Module2 <span class="keyword">from</span> <span class="string">'./module2'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Module1.name);</div><div class="line"><span class="built_in">console</span>.log(Module2.name);</div></pre></td></tr></table></figure></p>
<p><code>as</code>키워드를 사용함과 동시에 <code>*</code>이 등장했습니다. <code>*</code>은 import하고자 하는 자바스크립트 파일에서 <code>export</code>키워드가 붙어있는 모든 함수, 변수를 import할 때 사용합니다. 그리고 <code>as</code> 키워드를 통해서 <code>namespace</code>를 지정해줘야 합니다. 이렇게 import가 되면 <code>Module1</code>이라는 객체의 프로퍼티로 import한 변수 또는 함수에 접근할 수 있습니다.</p>
<h3 id="Case-6"><a href="#Case-6" class="headerlink" title="Case 6"></a>Case 6</h3><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Jbee"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">25</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; obj &#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">// Jbee</span></div><div class="line">obj.name = <span class="string">"newName"</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">// newName</span></div></pre></td></tr></table></figure>
<p>위 예제로부터 Object를 import하는 경우에, Object의 프로퍼티까지 보호할 수 없다는 것을 알 수 있습니다.</p>
<h3 id="Case-7"><a href="#Case-7" class="headerlink" title="Case 7"></a>Case 7</h3><p>여태까지 정의함과 동시에 export를 할지 말지 결정했는데요, 자바스크립트 코드의 마지막에서 이를 정의해줄 수 있습니다.<br><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Jbee"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">25</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; obj &#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; obj &#125; <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">// Jbee</span></div></pre></td></tr></table></figure>
<h3 id="Case-8"><a href="#Case-8" class="headerlink" title="Case 8"></a>Case 8</h3><p>Object 또는 변수를 export하는 경우 <code>default</code>키워드를 붙일 수 없습니다. 대신 다른 방법이 존재합니다.<br><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Jbee"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">25</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; obj <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">// Jbee</span></div></pre></td></tr></table></figure>
<p><code>as default</code>라는 키워드를 붙여 export할 수 있습니다. 이는 함수 또는 변수에도 적용 가능합니다.</p>
<h3 id="Case-9"><a href="#Case-9" class="headerlink" title="Case 9"></a>Case 9</h3><p>import 구문을 class에도 물론 적용할 수 있습니다.<br><figure class="highlight js"><figcaption><span>module1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`create component!`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'./module1'</span>;</div><div class="line"><span class="keyword">new</span> Component();</div><div class="line"><span class="comment">//create component!</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="import-export-5-convention-from-Airbnb-ES6-Convention"><a href="#import-export-5-convention-from-Airbnb-ES6-Convention" class="headerlink" title="import/export 5 convention from Airbnb ES6 Convention"></a>import/export 5 convention from <a href="https://github.com/JaeYeopHan/javascript" target="_blank" rel="external">Airbnb ES6 Convention</a></h2><p>1) Wildcard(<code>*</code>) 사용을 자제하세요!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div></pre></td></tr></table></figure></p>
<p>2) import함과 동시에 export를 하지 말고 코드의 마지막에서 따로 export하세요!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// filename es6.js</span></div><div class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./airbnbStyleGuide'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// filename es6.js</span></div><div class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</div></pre></td></tr></table></figure></p>
<p>3) 동일한 path를 import하는 경우에는 한 줄에서 모두 import하세요!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"><span class="comment">// … some other imports … //</span></div><div class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div></pre></td></tr></table></figure></p>
<p>4) import 구문은 호이스팅 됩니다. 그러므로 import문은 모두 상단에 위치시키세요!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line">foo.init();</div><div class="line"></div><div class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</div><div class="line"></div><div class="line">foo.init();</div></pre></td></tr></table></figure></p>
<p>5) 하나만 export하는 경우에는 default 키워드를 붙여주세요!</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>이상 9가지의 case로 ES6의 import와 export를 정리해봤습니다 :D</p>
<p>ES6 모든 포스팅은 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>11. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-11-Modulization&quot;&gt;&lt;a href=&quot;#ES6-11-Modulization&quot; class=&quot;headerlink&quot; title=&quot;[
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[Tool] Issue Management Tool, Zenhub</title>
    <link href="https://jaeyeophan.github.io/2017/04/30/issue-management-tool/"/>
    <id>https://jaeyeophan.github.io/2017/04/30/issue-management-tool/</id>
    <published>2017-04-29T15:30:28.000Z</published>
    <updated>2017-05-02T12:46:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github_logo.jpg" alt=""></p>
<h1 id="Issue-Management-Tool"><a href="#Issue-Management-Tool" class="headerlink" title="Issue Management Tool"></a>Issue Management Tool</h1><p>개발자들에게 정말 많은 사랑을 받고 있는 <code>Github</code>. 이제는 더 이상 없어서는 안 될 존재가 되었는데요:) 이 Github도 약간 아쉬운 부분이 존재합니다. 그래서 이번 포스팅에서는 Github과 함께 사용할 수 있는 <code>Issue Management Tool</code> 몇 가지를 소개해드리려고 합니다. (Github도 이에 대한 필요성을 느끼고 <code>Project</code>라는 이름의 기능을 추가하였는데요, 이것과 비교도 해보겠습니다.)<br>Github Help에서 제공하는 <a href="https://help.github.com/articles/managing-your-work-with-issues/" target="_blank" rel="external">Issue 관리에 대한 자료</a>입니다. 이 포스팅을 읽기 전에 참고해봐도 좋을 것 같습니다.</p>
<h2 id="Agile이라는-녀석"><a href="#Agile이라는-녀석" class="headerlink" title="Agile이라는 녀석,"></a>Agile이라는 녀석,</h2><p><img src="/images/agile_cloud_tag.png" alt=""><br> <em> reference&gt;<a href="http://www.onedesk.com/scrum-methodology-vs-agile-methodology/" target="_blank" rel="external">http://www.onedesk.com/scrum-methodology-vs-agile-methodology/</a></em><br><code>Agile 방법론</code>이 대두되면서, 프로젝트의 진행 상황을 공유하고 관리하는 것이 전보다 복잡하고 중요해졌습니다.(<a href="http://blog.rightbrain.co.kr/?p=5810" target="_blank" rel="external">Agile이란 무엇인가</a>) 개발자들간의 의사소통은 물론이고 프로젝트를 관리하는 매니저, 팀장 등과의 의사소통이 매우 중요해졌는데요, 이러한 상황 속에서 매번 회의를 하거나 서로에게 물어보면 그만큼 생산성이 감소하게 됩니다. 보다 효율적으로, Agile하게 프로젝트가 진행될 수 있도록 각종 도구들을 제대로 알고 팀에 적합한 도구를 고르는 것이 중요해졌습니다.</p>
<h2 id="Github이-제공하는-기능들"><a href="#Github이-제공하는-기능들" class="headerlink" title="Github이 제공하는 기능들"></a>Github이 제공하는 기능들</h2><p><img src="/images/default_github.png" alt=""><br>프로젝트 Repository안에는 viewer인 <code>Code</code> 탭, task 관리를 위한 <code>Issue</code>탭, 그리고 이 이슈들을 관리하기 위한 <code>Label</code>과 <code>Milestone</code>이 존재합니다. 프로젝트에서 진행되고 있는 Issue의 상태(Status) 또는 성격을 <code>Label</code>이라는 Metadata로 관리할 수 있고, <code>Milestone</code>이란 기능으로 단기적인 목표의 기간을 관리할 수 있습니다. 또 <code>Project</code>라는 탭을 통해 kanban 형식으로 Issue들을 관리할 수 있습니다. Trello라는 서비스를 아시나요? Tello가 대표적인 <strong>kanban 형식의 dashboard</strong> 입니다.</p>
<p><em>cf&gt; 포스팅에서 언급되는 <code>기존 형식의 dashboard</code>란 Agile workflow를 중심으로 드래그 앤 드롭을 통한 우선순위 선정 기능, Label 기능, Real-time dashboard 기능 등을 포함한 kanban 형식의 dashboard을 말합니다.</em></p>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>Github에서 제공하는 다양한 Plugin 형태의 Tool들은 <a href="https://github.com/integrations" target="_blank" rel="external">Integration Tab</a>에서 볼 수 있습니다. 이미 널리 알려진 <code>JIRA</code>를 제외하고 몇 가지 Tool들을 알아보겠습니다:) 제 나름대로의 판단 기준을 갖고 검색해보았습니다.</p>
<ol>
<li>기존의 Github Repository와 연동이 잘 되는가?</li>
<li>어떤 형식으로 dashboard를 제공하는가? (kanban 형식인가?)</li>
<li>UI/UX적으로 어떤가?</li>
<li>부가적인 기능에는 무엇이 있는가?</li>
</ol>
<h2 id="Zenhub"><a href="#Zenhub" class="headerlink" title="Zenhub"></a>Zenhub</h2><p><img src="/images/zenhub.png" alt=""><br><code>Zenhub</code>은 기존 형식의 dashboard를 제공합니다. Repository 기준으로 dashboard가 생성되고 기존에 등록되어 있던 Issue들은 물론이고 추후 생성하는 Issue들은 <code>New Issues</code>라는 column으로 들어갑니다. 가장 기본적이고 중요한 Github과의 연동은 문제가 없습니다.</p>
<h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><h4 id="기존의-Github에서-Tab만-추가되는-형식"><a href="#기존의-Github에서-Tab만-추가되는-형식" class="headerlink" title="기존의 Github에서 Tab만 추가되는 형식"></a>기존의 Github에서 Tab만 추가되는 형식</h4><p><img src="/images/zenhub_plugin.png" alt=""><br>기존의 Github에서 제공하는 탭에서 Board라는 탭과 Report라는 탭이 추가되었습니다. <code>Zenhub</code>을 추가하게 되면 자동으로 Repository마다 저런 형식으로 탭이 추가됩니다. 기존 Github에서 제공되는 기능에서 Board라는 탭이 추가되는 형식이기 때문에 기존의 Github을 그대로 이용할 수 있다는 장점이 있습니다.</p>
<h4 id="Chrome-Extension"><a href="#Chrome-Extension" class="headerlink" title="Chrome Extension"></a>Chrome Extension</h4><p><img src="/images/zenhub_chrome_extension.png" alt=""><br>원한다면 Chrome extension을 추가하여 브라우저 어디에서든 변동사항을 파악할 수 있다는 장점도 존재합니다. 접근성면에서 아주 좋습니다.</p>
<h4 id="Metadata를-통한-Issue-구체화"><a href="#Metadata를-통한-Issue-구체화" class="headerlink" title="Metadata를 통한 Issue 구체화"></a>Metadata를 통한 Issue 구체화</h4><p><code>Zenhub</code>은 Github에서 제공하는 Issue Metadata들에서 추가적으로 몇 가지 기능을 더 제공합니다.<br><img src="/images/zenhub_modal.png" alt=""></p>
<h5 id="1-Pipeline"><a href="#1-Pipeline" class="headerlink" title="1. Pipeline"></a>1. Pipeline</h5><p>제공되는 dashboard를 기준으로 제공되는 <code>Pipleline</code>이라는 기능으로 Issue의 Status를 설정할 수 있습니다.</p>
<h5 id="2-Epic"><a href="#2-Epic" class="headerlink" title="2. Epic"></a>2. Epic</h5><p>Github에서는 Issue들을 명시적으로 <code>그룹화</code>할 방법이 없었습니다. <code>Label</code>을 통해서 어떻게든 그룹화하려면 할 수는 있었지만, 아쉬운 점이 많았습니다. <code>Zenhub</code>에서는 <code>epic</code>이라는 기능을 제공하여 Issue들을 그룹화할 수 있습니다.</p>
<h5 id="3-Estimate"><a href="#3-Estimate" class="headerlink" title="3. Estimate"></a>3. Estimate</h5><p>Issue에 <code>Estimate</code>라는 Metadata를 이용하여 해당 Issue의 <code>복잡도(complexity)</code>를 설정할 수 있습니다. <code>1, 2, 3, 5, 8, 13, 21, 40</code>이라는 총 8단계의 레벨을 제공하고 있습니다. 팀 내부에서의 회의를 통해 일정을 산정하고 그에 맞는 레벨을 설정할 수 있습니다. 플래닝 포커라는 방법으로 일정을 산출할 수 있습니다. <em>&gt; 참고자료:<a href="http://bcho.tistory.com/1041" target="_blank" rel="external">플래닝 포커를 이용한 프로젝트 일정 산정</a></em></p>
<h4 id="Merge-repository"><a href="#Merge-repository" class="headerlink" title="Merge repository"></a>Merge repository</h4><p><img src="/images/merge_repository.png" alt=""><br>Respository를 <code>merge</code>하여 <strong>하나의 dashboard에서 복수 개의 Respository를</strong> 관리할 수 있습니다. 여러 프로젝트를 통합하여 관리해야 한다면 <code>Zenhub</code>의 merge 기능을 이용할 수 있습니다. 개인 Issue 관리 Repository를 따로 만들어서 자신만의 Issue를 관리할 수 있겠네요:)</p>
<h4 id="Report-기능"><a href="#Report-기능" class="headerlink" title="Report 기능"></a>Report 기능</h4><p><img src="/images/zenhub_report.png" alt=""><br><code>Burndown</code>, <code>Velocity tracking</code>, <code>Release Report</code> 세 가지의 옵션으로 그래프 형식의 보고서를 보여줍니다. 지정한 <code>Milestone</code>의 진행 상황을 한 눈에 살펴볼 수 있는 좋은 기능입니다 :) <code>Label</code>에 따라서 또는 Issue의 상태에 따라서 다양한 보고서를 볼 수 있습니다.</p>
<h4 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list"></a>To do list</h4><p><img src="/images/zenhub_topbar.png" alt=""><br><code>Zenhub</code>플러그인을 설치하게 되면 위과 같이 상단 bar에 <code>Todo</code>라는 탭이 하나 더 추가됩니다.<br><img src="/images/zenhub_todo.png" alt=""><br>TODO를 관리할 수 있도록 플러그인을 제공해주고 있습니다. 물론 다른 Todo 전용 애플리케이션보다는 기능이 미약합니다.</p>
<h4 id="기타-부가적인-기능"><a href="#기타-부가적인-기능" class="headerlink" title="기타 부가적인 기능"></a>기타 부가적인 기능</h4><p>그리고 Zenhub에서는 Repository에서 다른 Respository로 손쉽게 이동할 수 있는 통로(?)를 제공해줍니다. Repository 이름 옆에 햄버거 버튼이 생성되는데요, 그 버튼을 통해서 계정에 존재하는 다른 Repository로 이동할 수 있습니다.<br><img src="/images/move_repository.png" alt=""><br>한 가지 또 부가적인 기능은 키보드 자판에서의 <code>b</code>버튼을 shotcut으로 제공해서 repository 화면에서 바로 <code>Board</code>탭으로 이동이 가능하네요:)</p>
<h3 id="가격"><a href="#가격" class="headerlink" title="가격"></a>가격</h3><p>공식 웹 사이트에는 5명 이하의 작은 팀에 대해서는 무료로 제공한다고 합니다. 물론 이것은 private repository에 대해서 적용되는 사항이구요, public repository에 대해서는 사용자 수에 상관없이 무료로 제공하고 있습니다.</p>
<h4 id="Github에서-제공하는-Project-기능과비교"><a href="#Github에서-제공하는-Project-기능과비교" class="headerlink" title="Github에서 제공하는 Project 기능과비교"></a>Github에서 제공하는 Project 기능과비교</h4><p><code>Zenhub</code>에서는 dashboard에서 <code>Issue</code>를 클릭하면 <strong>modal형태로</strong> 해당 Issue의 내용이 보이면서 바로 comment를 달거나 <code>Label</code>을 변경하는 등의 작업을 수행할 수 있는 기능을 제공합니다. 그러나 Github에서 제공하는 <code>Project dashboard</code>는 Issue를 클릭하면 해당 Issue 페이지로 redirect되어 (개인적으로는 매우)불편합니다.</p>
<p>또한 <code>Zenhub</code>을 사용하면 Issue의 특성에 따라서 필터를 적용할 수 있습니다. dashboard에 흩어져 있는 Issue들을 <code>Milestone</code>에 따라서 또는 <code>Label</code>에 따라서 등등의 특성으로 분류가 가능합니다. 아직 Github에서 default로 제공하는 Project 기능은 부족한 점이 많아 보입니다 :(</p>
<p><a href="https://www.zenhub.com/product" target="_blank" rel="external">Zenhub 공식 사이트</a>에서 보다 자세한 내용을 확인하실 수 있습니다.</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h2 id="그-외-Management-Tools"><a href="#그-외-Management-Tools" class="headerlink" title="그 외 Management Tools"></a>그 외 Management Tools</h2><h3 id="Hueboard"><a href="#Hueboard" class="headerlink" title="Hueboard"></a>Hueboard</h3><p><a href="https://huboard.com/huboard/huboard" target="_blank" rel="external">Hueboard 예시</a><br><code>Zenhub</code>과 마찬가지로 하나의 Repository마다, 하나의 dashboard를 제공해주며 기존의 dashboard 형식을 취합니다. UI적으로는 <code>Zenhub</code>보다 조금 나아보입니다. <code>Zenhub</code>과는 달리 별도의 웹 사이트로 redirect되면서 프로젝트 관리에 대한 총체적인 dashboard를 제공합니다. Filter 기능이 유독 눈에 들어오네요. <code>Zenhub</code>에서도 가능했던 기능이지만 UI적으로 깔끔해서 dashboard에 집중할 수가 있을 것 같습니다.<br><a href="https://huboard.com/" target="_blank" rel="external">Hueboard 공식 사이트</a>에서 보다 자세한 내용을 확인하실 수 있습니다.</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><h3 id="Zube"><a href="#Zube" class="headerlink" title="Zube"></a>Zube</h3><p><img src="/images/zube_feature.png" alt=""><br>기존의 dashboard 외에 몇 가지 추가적인 기능을 제공합니다. <code>Sprint board</code>, <code>Sprint</code>, <code>Tickets</code> 눈에 들어오는 것은 <code>Analytics</code> 기능입니다.<br><img src="/images/zube_analysis.png" alt=""><br><code>Zenhub</code>에서 제공하는 보고서 유형보다 2종류가 더 많네요. 프로젝트를 처음 시작할 때부터 도입하지 않으면 사용하기에 부담이 생기는 Tool일 것 같다는 생각이 들었습니다. 또한 너무 많은 기능을 제공하면 오히려 생산성을 저해하는 요소가 될 수 있지 않을까 생각이 드는 Tool이었습니다.</p>
<p><a href="https://zube.io/" target="_blank" rel="external">Zube 공식 사이트</a>에서 보다 자세한 내용을 확인하실 수 있습니다.</p>
<p><br></p>
<h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이 외에도 <code>Waffle</code>, <code>CodeTree</code>, <code>Asana</code> 등등 정말 많은 Tool들이 존재합니다. 제공하는 기능은 조금씩만 다르고 다 거기서 거기인 것 같습니다. 기존에 사용했던 다른 도구들(예를 들면 <code>Slack</code>, <code>Trello</code>, <code>hipchat</code> 등)과 얼마나 통합이 잘 되는지 또한 중요한 쟁점이 될 것 같습니다.</p>
<p>또 프로젝트에서 사용하는 Tool이 많아질수록 본래 프로젝트를 관리하기 위해 도입했던 관리 Tool을 관리해야 하는 주객전도 현상이 발생할 수 있습니다. 이 부분 또한 인지하여 프로젝트 관리 도구를 도입해야할 것입니다.</p>
<p>저는 개인적으로 새로운 Tool이 도입되는 부담감이 가장 적고 기존의 Github에 가장 잘 녹아드는 <code>Zenhub</code>이 가장 잘 맞는 것 같습니다:)</p>
<p><em>여러분 팀에 맞는 프로젝트 관리 도구는 무엇인가요?</em><br>감사합니다 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/github_logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Issue-Management-Tool&quot;&gt;&lt;a href=&quot;#Issue-Management-Tool&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="tool" scheme="https://jaeyeophan.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>[TS] 1. Basic Types</title>
    <link href="https://jaeyeophan.github.io/2017/04/23/TS-1-Basic-Types/"/>
    <id>https://jaeyeophan.github.io/2017/04/23/TS-1-Basic-Types/</id>
    <published>2017-04-23T07:12:08.000Z</published>
    <updated>2017-04-23T07:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/typescript.png" alt=""></p>
<h1 id="TS-1-Basic-Types"><a href="#TS-1-Basic-Types" class="headerlink" title="[TS] 1. Basic Types"></a>[TS] 1. Basic Types</h1><p>TypeScript에서는 JavaScript에서 사용했었던 <code>number</code>, <code>string</code>, <code>boolean</code>과 같은 데이터 타입을 기반으로 <code>정적 타이핑</code>을 지원합니다.</p>
<p>본격적인 TypeScript Tutorial 진행을 위해 에디터에 <code>TSLint</code>를 설치하겠습니다. (TypeScript에서 제공하는 <a href="https://www.typescriptlang.org/play/index.html" target="_blank" rel="external">Playground</a>에서 해보실 수도 있습니다.)</p>
<h2 id="Install-TSLint"><a href="#Install-TSLint" class="headerlink" title="Install TSLint"></a>Install TSLint</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yarn global add tslint typescript</div><div class="line">yarn global tslint typescript</div></pre></td></tr></table></figure>
<p><code>typescript</code>패키지는 <code>TSLint</code>와 동일한 version을 사용해야 하기 때문에 <code>peerDependencies</code>로 설치해줍니다.<br>작업할 디렉토리로 이동하여 <code>tslint</code>를 설정해줍니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tslint --init</div></pre></td></tr></table></figure></p>
<p>위 명령어를 실행하게 되면 <code>tslint.json</code>이라는 파일이 생성됩니다.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"defaultSeverity"</span>: <span class="string">"error"</span>,</div><div class="line">    <span class="attr">"extends"</span>: <span class="string">"tslint:recommended"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>기본적으로 <code>tslint</code>에서 제공하는 <code>recommended</code> rule을 적용했습니다. 저는 <code>WebStorm</code>이라는 에디터를 사용하고 있습니다. 각자 사용하는 에디터에서 환경설정을 통해 TSLint를 able로 설정해주시면 됩니다. TSLint에서 제공하고 있는 rule은 <a href="http://palantir.github.io/tslint/rules/" target="_blank" rel="external">공식 사이트</a>에서 제공하고 있습니다. 입맛에 맞게 해당 rule들을 오버라이딩하여 사용하실 수 있습니다. (<code>WebStorm</code>에서는 console찍는 것 가지고 뭐라 안하는데, 다른 editor에서는 console마저 지우라고 하는 것 같습니다. <code>no-console</code> rule을 설정하시는게 정신 건강에 좋을 것 같습니다.) 보다 자세한 <code>tslint.json</code> 설정은 다음 링크를 참고하시면 좋을 것 같습니다. MicroSoft가 만든 <code>VSCode</code> 에디터가 요즘 뜨고 있는데요, <code>VSCode</code> 에디터에 TypeScript 개발 환경 설정하는 내용을 포함하고 있습니다. <a href="http://poiemaweb.com/typescript-vscode" target="_blank" rel="external">Visual Studio Code에서의 TypeScript 개발 환경 구축</a></p>
<h2 id="Basic-Types"><a href="#Basic-Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><p>변수에 타입을 지정해주기 위해서 TypeScript에서는 <code>:</code>을 통해 지원합니다. 기존의 JavaScript에서 변수를 선언하면서 <code>:</code>으로 해당 변수의 타입을 지정해줍니다.</p>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isExist: <span class="built_in">boolean</span> = <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<p><code>boolean</code> 타입을 지정합니다.</p>
<h3 id="Number-숫자"><a href="#Number-숫자" class="headerlink" title="Number, 숫자"></a>Number, 숫자</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</div><div class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</div><div class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</div><div class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</div></pre></td></tr></table></figure>
<p><code>number</code> 타입을 지정합니다.</p>
<h3 id="String-문자열"><a href="#String-문자열" class="headerlink" title="String, 문자열"></a>String, 문자열</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"jbee"</span>;</div><div class="line"><span class="keyword">let</span> greeting: <span class="built_in">string</span> = <span class="string">`Hi, I'm <span class="subst">$&#123;name&#125;</span>!`</span>;</div></pre></td></tr></table></figure>
<p><code>string</code> 타입을 지정합니다.</p>
<h3 id="Array-배열"><a href="#Array-배열" class="headerlink" title="Array, 배열"></a>Array, 배열</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure>
<p>or<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure></p>
<p>기존에 배열 리터럴을 사용하여 배열을 정의하면서 정의하는 배열에 어떠한 데이터 타입의 원소가 들어갈 것인지를 Type을 통해 제공할 수 있습니다.</p>
<h3 id="Tuple-튜플"><a href="#Tuple-튜플" class="headerlink" title="Tuple, 튜플"></a>Tuple, 튜플</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let tuple: [string, number];</div><div class="line">tuple = ["age", 25];</div><div class="line">tuple = ["name", "jbee];// Error</div><div class="line">&gt; message: 'Type '[string, string]' is not assignable to type '[string, number]'.</div><div class="line">  Type 'string' is not assignable to type 'number'.' at: '5,1'</div></pre></td></tr></table></figure>
<p><code>key-value</code>의 형태를 저장할 때는, 위와 같이 타입을 지정해줄 수 있습니다. TSLint가 잘못된 타입의 값이 들어왔다는 것을 error message로 알려줍니다.</p>
<h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;;</div><div class="line"><span class="keyword">let</span> c: Color = Color.Green;</div></pre></td></tr></table></figure>
<p>마찬가지로 Java의 <code>enum</code>과 같은 구조를 갖습니다. 시작하는 멤버에 0부터 번호를 매기고, 만약 1부터 시작해야 한다면 임의적으로 시작하는 숫자를 지정할 수 있습니다. 또는 각각에게 번호를 지정할 수도 있습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Subject &#123;<span class="built_in">Math</span> = <span class="number">1</span>, Science = <span class="number">3</span>, History = <span class="number">7</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(Subject[<span class="number">3</span>]);<span class="comment">//Science</span></div></pre></td></tr></table></figure></p>
<p>지정한 번호로 호출도 가능합니다.</p>
<p><code>tsc</code> 명령어를 통해서 저희가 작성한 TypeScript 코드를 변환된 Javascript 코드로 볼 수 있습니다. TypeScript의 <code>Enum</code>은 다음과 같이 변환되는 것을 확인하실 수 있습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Subject;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Subject</span>) </span>&#123;</div><div class="line">    Subject[Subject[<span class="string">"Math"</span>] = <span class="number">1</span>] = <span class="string">"Math"</span>;</div><div class="line">    Subject[Subject[<span class="string">"Science"</span>] = <span class="number">3</span>] = <span class="string">"Science"</span>;</div><div class="line">    Subject[Subject[<span class="string">"History"</span>] = <span class="number">7</span>] = <span class="string">"History"</span>;</div><div class="line">&#125;)(Subject || (Subject = &#123;&#125;));</div></pre></td></tr></table></figure></p>
<p>자바스크립트의 다섯 줄이 타입스크립트 한 줄로 작성되었습니다 :)</p>
<h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>코드를 작성하면서 사용되는 변수에 알맞은 데이터 타입을 설정하는 것은 중요하지만 데이터 타입이 동적으로 결정되는 변수도 존재하게 됩니다. 이럴 때 사용할 수 있는 타입이 <code>any</code>입니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> notSureVar: <span class="built_in">any</span>;</div><div class="line">notSureVar = <span class="number">3</span>;</div><div class="line">notSureVar = <span class="string">`hi`</span>;</div><div class="line">notSureVar = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div></pre></td></tr></table></figure></p>
<p><code>any</code>로 타입을 지정하면 Compile Time에서 <code>Type checking</code>을 하지 않습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> notSureVar; <span class="comment">// == let notSureVar: any;</span></div></pre></td></tr></table></figure></p>
<p><code>any</code>로 타입을 지정하는 것과 위의 자바스크립트는 동치라고 볼 수 있습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">`jbee`</span>, <span class="literal">true</span>];</div></pre></td></tr></table></figure></p>
<p>여러 가지 타입의 요소가 포함되는 배열을 정의할 때도 <code>any</code>를 사용할 수 있습니다.<br><code>any</code>의 역할이 다른 언어에서의 <code>Object</code>와 같은 역할을 하는 느낌이 드는데요, 실제로 2.2version에서 <code>Object</code>타입이 추가되었습니다. 일단 코드를 통해 확인해보겠습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = &#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`hi`</span>);</div><div class="line">    &#125;,</div><div class="line">    name : <span class="string">"jbee"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> notSureObj: <span class="built_in">Object</span>;</div><div class="line">notSureObj = user;</div><div class="line">notSureObj.getName(); <span class="comment">// error</span></div><div class="line">notSureObj.name; <span class="comment">// error</span></div><div class="line"><span class="comment">//Property 'getName' does not exist on type 'Ojbect'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> notSureVar: <span class="built_in">any</span>;</div><div class="line">notSureVar = user;</div><div class="line">notSureVar.getName(); <span class="comment">// success</span></div><div class="line">notSureVar.name; <span class="comment">// "jbee"</span></div></pre></td></tr></table></figure></p>
<p>변수의 type을 <code>Object</code>로 지정하고, 실제 Object를 정의하여 변수에 할당했습니다. 그리고 할당한 Ojbect에 존재하는 메소드를 호출했더니 에러가 발생합니다. <code>getName()</code>이라는 프로퍼티가 없다고 하네요. 분명 <code>getName()</code>메소드가 존재하는 Ojbect를 할당했는데 말이죠. <code>name</code> 프로퍼티도 마찬가지입니다. 하지만 <code>any</code> 타입으로 지정했을 때는 메소드를 호출할 수 있고, 프로퍼티를 찾을 수 있습니다. 이 <code>Object</code> 타입은 할당만 가능할 뿐, 메소드나 프로퍼티에 접근할 수 없습니다.<br><a href="https://blog.mariusschulz.com/2017/02/24/typescript-2-2-the-object-type" target="_blank" rel="external">About Object Type</a></p>
<h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>값을 반환하지 않는 함수의 return type을 지정할 때 사용할 수 있습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`hi`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>물론 변수의 타입에도 사용할 수 있습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo: <span class="built_in">void</span>;</div><div class="line">foo = <span class="literal">undefined</span>;</div><div class="line">foo = <span class="literal">null</span>;</div><div class="line">foo = <span class="string">`foo`</span>; <span class="comment">//error</span></div><div class="line">&gt; Type <span class="string">'string'</span> is not assignable to <span class="keyword">type</span> <span class="string">'void'</span></div></pre></td></tr></table></figure></p>
<p>하지만 <code>void</code>로 선언된 변수에는 <code>undefined</code>와 <code>null</code> 값만 할당할 수 있습니다.</p>
<h3 id="Null-Undefined"><a href="#Null-Undefined" class="headerlink" title="Null, Undefined"></a>Null, Undefined</h3><p>기본적으로 <code>null</code>과 <code>undefined</code>는 모든 타입들의 서브타입이라고 할 수 있습니다. 즉 다른 타입으로 지정된 변수에도 <code>null</code>과 <code>undefined</code>를 할당할 수 있습니다.</p>
<blockquote>
<p><code>--strictNullChecks</code> flag를 사용하게 되면 <code>null</code>과 <code>undefined</code>는 <code>void</code>타입의 변수에만 할당할 수 있습니다. TypeScript에서는 해당 flag사용을 권장하고 있습니다.</p>
</blockquote>
<h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p><code>never</code> 타입은 발생하지 않는 경우에 대한 타입을 대표하는 타입입니다. 코드를 통해 살펴보겠습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Function returning never must have unreachable end point</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Inferred return type is never</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> error(<span class="string">"Something failed"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Function returning never must have unreachable end point</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위의 예제와 같이 <code>throw</code>를 하거나 error를 발생시키는 function의 return type으로 설정합니다.<br><a href="https://blog.mariusschulz.com/2016/11/18/typescript-2-0-the-never-type" target="_blank" rel="external">About Never Type</a></p>
<h3 id="Type-Assertions"><a href="#Type-Assertions" class="headerlink" title="Type Assertions"></a>Type Assertions</h3><p>타입 어설션이란 개발자가 타입스크립트에게 “내가 무슨 짓을 하고 있는지 아니까, 나를 믿어줘!”하고 메세지를 보내는 것입니다. 주로 엔티티의 타입을 보다 구체적으로 설정할 때 사용합니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> greet: <span class="built_in">any</span> = <span class="string">`Hello!`</span>;</div><div class="line"><span class="keyword">let</span> lengthOfGreet: <span class="built_in">number</span>;</div><div class="line">lengthOfGreet = greet.length;</div><div class="line">lengthOfGreet = (&lt;<span class="built_in">string</span>&gt; greet).length;</div><div class="line">lengthOfGreet = (greet <span class="keyword">as</span> <span class="built_in">string</span>).length;</div></pre></td></tr></table></figure></p>
<p><code>any</code>타입에 대해서 <code>형변환(type casting)</code>하는 것처럼 보이지만 실제로는 특별한 검사나 데이터 재구성을 하지 않습니다. 이 타입 어설션은 컴파일 타임에만 영향을 미칠뿐 런타임시에는 아무런 영향을 주지 않습니다. 보다 데이터 타입을 구체화 시킬 때 사용합니다.<br><code>&lt;&gt;</code>를 사용하는 방법과 <code>as</code>를 사용하는 두 가지 방법이 존재합니다. 선호도에 따라 어떻게 사용할지 결정할 수 있지만 <code>JSX</code>와 함께 사용하는 경우에는 <code>as</code>를 사용하는 방법만 허용됩니다.</p>
<p>감사합니다 :)</p>
<p><em>1. Basic Type end</em></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="external">TypeScript Official Document - Basic Types</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/typescript.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;TS-1-Basic-Types&quot;&gt;&lt;a href=&quot;#TS-1-Basic-Types&quot; class=&quot;headerlink&quot; title=&quot;[TS] 1. Bas
    
    </summary>
    
      <category term="TypeScript" scheme="https://jaeyeophan.github.io/categories/TypeScript/"/>
    
    
      <category term="ts" scheme="https://jaeyeophan.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>[TDD] 3. Chai-http 사용하여 REST API Test하기</title>
    <link href="https://jaeyeophan.github.io/2017/04/23/BDD-3-chai-http/"/>
    <id>https://jaeyeophan.github.io/2017/04/23/BDD-3-chai-http/</id>
    <published>2017-04-23T07:07:57.000Z</published>
    <updated>2017-05-21T04:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/tool_chai.png" alt=""></p>
<h1 id="TDD-3-Chai-http-사용하여-REST-API-Test하기"><a href="#TDD-3-Chai-http-사용하여-REST-API-Test하기" class="headerlink" title="[TDD] 3. Chai-http 사용하여 REST API Test하기"></a>[TDD] 3. Chai-http 사용하여 REST API Test하기</h1><p><a href="https://jaeyeophan.github.io/2017/04/23/BDD-1-mocha/">&gt;Mocha - Getting started&gt;</a><br><br><a href="https://jaeyeophan.github.io/2017/04/23/BDD-2-chai/">&gt;Chai - Getting started&gt;</a></p>
<p>이번 포스팅에서는 <code>chai-http</code>라는 module을 사용해서 REST API를 테스트하는 코드를 작성해보겠습니다.</p>
<p>테스트에 집중하기 위해 요청을 받을 서버는 <code>json-server</code>라는 모듈을 사용하여 구축하겠습니다. <code>json</code>형태로 데이터를 생성하고 요청을 받을 수 있는 임시 서버입니다. 데이터베이스를 따로 구축하지 않아도 <code>CRUD</code>와 같은 기본적인 API를 제공해주는 모듈입니다. 포스팅에서 다루는 내용보다 더 자세한 내용은 해당 <a href="https://github.com/typicode/json-server" target="_blank" rel="external">링크</a>를 참조하시면 되겠습니다.</p>
<h2 id="테스트-환경-구축하기"><a href="#테스트-환경-구축하기" class="headerlink" title="테스트 환경 구축하기"></a>테스트 환경 구축하기</h2><p>우선 <code>chai-http</code>를 설치합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add chai-http</div></pre></td></tr></table></figure></p>
<p>그리고 서버로 사용할 <code>json-server</code>를 설치합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn global add json-server</div></pre></td></tr></table></figure></p>
<p>그런 다음 <code>src</code> 디렉토리(작업하고자 하는 디렉토리)로 이동하여 다음 명령어를 실행해줍니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ json-server --watch db.json</div></pre></td></tr></table></figure></p>
<p>위 명령어를 실행하게 되면 <code>db.json</code> 파일을 생성하게 되고 해당 <code>.json</code>파일에 기본적인 데이터가 들어가있습니다. <code>json-server</code>는 기본적으로 <code>3000</code>번 포트를 사용합니다. <a href="http://localhost:3000/" target="_blank" rel="external">localhost:3000</a>에 접속해보면 어떠한 데이터가 들어가있는지를 간단한 웹 페이지를 통해서도 확인하실 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">\&#123;^_^&#125;/ hi!</div><div class="line"></div><div class="line">Loading db.json</div><div class="line">Done</div></pre></td></tr></table></figure></p>
<p>console에는 귀여운 이모티콘이 환영을 해주네요 :)</p>
<p>보다 customized한 서버를 사용하시고 싶은 경우에는 다음과 같은 <code>.js</code>파일을 만들어 사용하실 수 있습니다.<br><figure class="highlight javascript"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> jsonServer = <span class="built_in">require</span>(<span class="string">'json-server'</span>);</div><div class="line"><span class="keyword">const</span> server = jsonServer.create();</div><div class="line"><span class="keyword">const</span> router = jsonServer.router(<span class="string">'db.json'</span>);</div><div class="line"><span class="keyword">const</span> middlewares = jsonServer.defaults();</div><div class="line"></div><div class="line">server.use(middlewares);</div><div class="line">server.use(router);</div><div class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'JSON Server is running'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>위 파일은 <code>node server.js</code> 명령어로 실행하실 수 있습니다 :) 이번 포스팅에서는 default로 생성되는 임시 서버를 사용하겠습니다.</p>
<h2 id="test-파일-작성"><a href="#test-파일-작성" class="headerlink" title=".test 파일 작성"></a>.test 파일 작성</h2><p>이제 테스트 코드를 작성할 <code>.test</code>파일을 만들어 보겠습니다.<br><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> chaiHttp = <span class="built_in">require</span>(<span class="string">'chai-http'</span>);</div><div class="line"><span class="keyword">const</span> expect = chai.expect;</div><div class="line">chai.use(chaiHttp);</div><div class="line"></div><div class="line"><span class="keyword">const</span> url = <span class="string">'http://localhost:3000'</span>;</div></pre></td></tr></table></figure></p>
<p>이전에 설치한 <code>chai</code>와 테스트 환경을 구축할 때 설치한 <code>chai-http</code>를 불러옵니다. 그리고 <code>chai</code>가 <code>chai-http</code>를 <code>use</code>합니다. 이전 포스팅에서 소개해드렸던 <code>expect</code>를 사용하기 위해 준비합니다. 마지막으로 요청을 보낼 서버의 api에서 반복될 url을 상수로 할당해줬습니다.</p>
<h2 id="Request-TEST"><a href="#Request-TEST" class="headerlink" title="Request TEST"></a>Request TEST</h2><p>본격적인 테스트 코드를 작성할 시간입니다. 우선 server에 요청이 제대로 가는지 확인해보겠습니다.<br><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'Request test'</span>, () =&gt; &#123;</div><div class="line">    it(<span class="string">'request to server'</span>, done =&gt; &#123;</div><div class="line">        chai.request(url)</div><div class="line">            .get(<span class="string">'/'</span>)</div><div class="line">            .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">                expect(err).to.be.null;</div><div class="line">                expect(res).to.have.status(<span class="number">200</span>);</div><div class="line">                done();</div><div class="line">            &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>위 코드는 <code>http://localhost:3000/</code>에 대한 <code>GET</code> 요청이 제대로 동작하는지 테스트하는 코드입니다.<br>해당 <code>url</code>로 <code>request</code>를 보내고 <code>get</code> 방식으로 그 요청을 보냅니다. 요청에 대한 응답을 <code>.end()</code>메소드로 받을 수 있습니다. 이 <code>end()</code> 메소드에는 요청에 대한 응답으로 <code>err</code>와 <code>res</code>를 파라미터로 받는 콜백 함수를 넘겨줍니다.<br>콜백 함수에서는 에러(<code>err</code>)는 <code>null</code>값이어야 하고, http status code는 <code>200</code>이어야 한다는 내용을 담고 있습니다. 모든 조건이 만족되면 <code>done()</code> 함수가 호출되면서 test가 pass하게 됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<p>위 명령어로 test를 실행해보겠습니다. 방금 전 <code>json-server</code>를 running한 터미널 창이 아닌 다른 터미널 창에서 실행하셔야 합니다. 요청을 받으러면 서버가 running 중이어야 하니까요 :)<br><figure class="highlight bash"><figcaption><span>test terminal</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">REST <span class="built_in">test</span></div><div class="line">  ✓ request to server</div><div class="line"></div><div class="line">1 passing (13ms)</div></pre></td></tr></table></figure></p>
<p>해당 테스트가 잘 pass한 것을 확인하실 수 있습니다.<br><figure class="highlight bash"><figcaption><span>json-server terminal</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET / 200 2.318 ms - -</div></pre></td></tr></table></figure></p>
<p>그리고 아까 <code>json-server --watch db.json</code> 명령어를 실행한 console에서는 GET요청에 대한 로그를 남깁니다.</p>
<h2 id="CRUD-TEST"><a href="#CRUD-TEST" class="headerlink" title="CRUD TEST"></a>CRUD TEST</h2><h3 id="Data-Modeling"><a href="#Data-Modeling" class="headerlink" title="Data Modeling"></a>Data Modeling</h3><p>테스트를 위해 <code>db.json</code>에 간단한 데이터를 넣어보겠습니다. 다음과 비슷한 형식으로 바꿔줍니다.<br><figure class="highlight json"><figcaption><span>db.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Jbee"</span>,</div><div class="line">      <span class="attr">"age"</span>: <span class="number">25</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"foo"</span>,</div><div class="line">      <span class="attr">"age"</span>: <span class="number">20</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">3</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"bar"</span>,</div><div class="line">      <span class="attr">"age"</span>: <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>users</code>라는 배열을 지정해줬습니다. 배열의 요소에는 <code>name</code>과 <code>age</code>를 갖고 있는 <code>json</code>형식의 데이터를 넣어줬습니다. 저장을 하면 <code>--watch</code>옵션을 붙여 실행했기 때문에 변경된 데이터 사항이 자동으로 반영됩니다. <code>localhost:3000</code>의 웹 페이지도 새로고침을 해보면 새로운 데이터가 들어가있는 것을 확인하실 수 있습니다. 이 데이터에는 <code>/users</code>라는 api로 접근이 가능합니다.</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p><code>db.json</code>파일에 추가한 <code>users</code>데이터를 가져와 봅시다.<br><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'GET'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'fetch all users'</span>, done =&gt; &#123;</div><div class="line">    chai.request(url)</div><div class="line">        .get(<span class="string">'/users'</span>)</div><div class="line">        .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">            expect(err).to.be.not.ok;</div><div class="line">            expect(res).to.have.status(<span class="number">200</span>);</div><div class="line">            expect(res.body).to.be.an(<span class="string">'array'</span>);</div><div class="line">            done();</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>이전의 코드와 매우 유사합니다. <code>res.body</code>에 대한 값을 확인하는 코드가 추가되었습니다. array 형식의 데이터라면 test를 pass시키도록 테스트 코드를 작성했습니다. test가 잘 통과하네요 :)<br>특정 <code>user</code>에 대한 값만 가져오려면 어떻게 해야 할까요?<br><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'fetch one user'</span>, done =&gt; &#123;</div><div class="line">  chai.request(url)</div><div class="line">      .get(<span class="string">'/users'</span>)</div><div class="line">      .query(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;)</div><div class="line">      .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">          expect(err).to.be.null;</div><div class="line">          expect(res).to.have.status(<span class="number">200</span>);</div><div class="line">          expect(res.body[<span class="number">0</span>]).to.deep.equal(</div><div class="line">              &#123;</div><div class="line">                  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">                  <span class="attr">name</span>: <span class="string">"Jbee"</span>,</div><div class="line">                  <span class="attr">age</span>: <span class="number">25</span></div><div class="line">              &#125;</div><div class="line">          );</div><div class="line">          done();</div><div class="line">      &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>위 예제 코드를 describe 콜백 함수 안에 추가해줍니다. 와 같이 <code>.query()</code>에 해당하는 조건을 넘겨줄 수 있습니다. 응답으로 오는 데이터가 명시한 값과 일치하는지를 테스트 코드로 작성해줬습니다.</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'POST'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'add user'</span>, done =&gt; &#123;</div><div class="line">    chai.request(url)</div><div class="line">        .post(<span class="string">'/users'</span>)</div><div class="line">        .send(&#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'react'</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;)</div><div class="line">        .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">            expect(err).to.be.not.ok;</div><div class="line">            expect(res).to.have.status(<span class="number">201</span>);</div><div class="line">            user = res.body;</div><div class="line">            done();</div><div class="line">        &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>post()</code>메소드와 <code>send()</code> 메소드를 통해 테스트를 진행할 수 있습니다.</p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'PATCH'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'update user'</span>, done =&gt; &#123;</div><div class="line">    chai.request(url)</div><div class="line">        .patch(<span class="string">'/users/2'</span>)</div><div class="line">        .send(&#123;<span class="attr">name</span>: <span class="string">'angular'</span>, <span class="attr">age</span>: <span class="number">1</span>&#125;)</div><div class="line">        .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">            expect(err).to.be.not.ok;</div><div class="line">            expect(res).to.have.status(<span class="number">200</span>);</div><div class="line">            done();</div><div class="line">        &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>patch()</code>메소드와 <code>send()</code> 메소드를 통해 테스트를 진행할 수 있습니다.</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight javascript"><figcaption><span>rest.test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'DELETE'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'delete user'</span>, done =&gt; &#123;</div><div class="line">    chai.request(url)</div><div class="line">        .delete(<span class="string">'/users/4'</span>)</div><div class="line">        .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">            expect(err).to.be.not.ok;</div><div class="line">            expect(res).to.have.status(<span class="number">200</span>);</div><div class="line">            done();</div><div class="line">        &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>delete()</code>메소드를 통해 테스트를 진행할 수 있습니다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/javascript_test_tutorial" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>[TDD] 3. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/tool_chai.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;TDD-3-Chai-http-사용하여-REST-API-Test하기&quot;&gt;&lt;a href=&quot;#TDD-3-Chai-http-사용하여-REST-API-Test하기
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="TDD" scheme="https://jaeyeophan.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[TDD] 2. Chai - Getting started</title>
    <link href="https://jaeyeophan.github.io/2017/04/23/BDD-2-chai/"/>
    <id>https://jaeyeophan.github.io/2017/04/23/BDD-2-chai/</id>
    <published>2017-04-23T07:07:45.000Z</published>
    <updated>2017-05-21T04:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/tool_chai.png" alt=""></p>
<h1 id="TDD-2-Chai-Getting-started"><a href="#TDD-2-Chai-Getting-started" class="headerlink" title="[TDD] 2. Chai - Getting started"></a>[TDD] 2. Chai - Getting started</h1><p><a href="https://jaeyeophan.github.io/2017/04/23/BDD-1-mocha/">&gt;Mocha - Getting started&gt;</a></p>
<p>이전 포스팅에서 <code>Mocha</code>를 사용한 테스트를 진행해봤습니다. 이전 포스팅의 예제 코드에 Assertion Library인 <code>Chai</code>를 추가해보겠습니다.</p>
<p><code>Chai</code>는 세 가지 style의 <code>Assertion</code>을 제공합니다.</p>
<ul>
<li>assert<br>기본적으로 node에서 제공하는 <code>Assert</code>라이브러리와 유사합니다.<br></li>
<li>expect<br><code>BDD</code> 스타일로 제공되는 인터페이스 중 하나로 공식 문서에서는 <code>natural longuage</code>처럼 <code>chaining</code>을 제공하여 코드를 작성할 수 있게 해준다고 합니다. 잠시 후 예제 코드로 살펴보겠습니다.<br></li>
<li>should<br><code>BDD</code> 스타일로 제공되는 인터페이스 중 나머지 하나로 <code>expect</code> 인터페이스와 마찬가지로 <code>chainging</code>을 통한 API를 제공합니다.<br></li>
</ul>
<p>라이브러리에 대한 보다 구체적인 내용은 공식 문서를 참조하시면 되겠습니다. <a href="http://chaijs.com/guide/styles/" target="_blank" rel="external">&gt;Chai Documents&gt;</a></p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>우선, <code>Chai</code>를 설치해줍니다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn global add chai</div></pre></td></tr></table></figure>
<p>이전에 작성했던 <code>/test/operator.test.js</code> 코드에서 <code>Chai</code>를 불러옵니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> expect = chai.expect;</div><div class="line"><span class="keyword">const</span> should = chai.should();</div></pre></td></tr></table></figure>
<p><code>expect</code>와 <code>should</code>가 불러오는 방식이 약간 다릅니다. <code>expect</code> 인터페이스는 assertion을 제공하는 시작점으로 함수를 제공합니다. <code>should</code> 인터페이스는 <code>Object.prototype</code>을 확장하여 단일 Getter를 제공하고 그것을 시작점으로 제공합니다.</p>
<p><code>expect</code> 인터페이스를 통해 지저분했던 <code>if</code> 구문을 제거해봅시다!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'sum 함수 테스트'</span>, () =&gt; &#123;</div><div class="line">    it (<span class="string">'10과 20를 넘기면 30이 나와야 한다'</span>, done =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> result = sum(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">        expect(result).to.equal(<span class="number">30</span>);</div><div class="line">        done();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>첫번째로 등장한 api, <code>equal</code>입니다! <code>equal()</code>메소드에는 파라미터르 기대값이 들어가게 됩니다. 테스트 하고자 하는 함수의 반환 값이 기대값과 다르게 되면 그에 해당하는 error message가 나타납니다. 30을 40으로 바꾸고 실행해보겠습니다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sum 함수 테스트</div><div class="line">    1) 10과 20를 넘기면 30이 나와야 한다</div><div class="line"></div><div class="line">  0 passing (6ms)</div><div class="line">  1 failing</div><div class="line"></div><div class="line">  1) sum 함수 테스트 10과 20를 넘기면 30이 나와야 한다:</div><div class="line"></div><div class="line">      AssertionError: expected 30 to equal 40</div><div class="line">      + expected - actual</div><div class="line"></div><div class="line">      -30</div><div class="line">      +40</div><div class="line"></div><div class="line">      at Context.done (<span class="built_in">test</span>/operator.test.js:37:27)</div></pre></td></tr></table></figure>
<p>정말 친절한 <code>log</code>가 출력되는 것을 확인할 수 있습니다. describe에 기술했던 section 이름이 제일 먼저 출력되고, 테스트를 실행한 단위 테스트의 이름이 출력됩니다. 그리고 통과한 단위 테스트와 실패한 단위 테스트에 대한 정보가 나타납니다. 기대값과 실제 반환값과의 차이를 보여주며 어느 부분에서 에러가 발생했는지까지 출력됩니다 :)</p>
<h2 id="Expect-API"><a href="#Expect-API" class="headerlink" title="Expect API"></a>Expect API</h2><p><a href="http://chaijs.com/api/bdd/" target="_blank" rel="external">BDD style, Expect API</a></p>
<h3 id="ok"><a href="#ok" class="headerlink" title=".ok"></a>.ok</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">expect(<span class="literal">false</span>).to.not.be.ok;</div><div class="line">expect(<span class="literal">undefined</span>).to.not.be.ok;</div><div class="line">expect(<span class="literal">null</span>).to.not.be.ok;</div></pre></td></tr></table></figure>
<p>넘겨받는 값이 <code>false</code>인지 <code>undefined</code>인지 <code>null</code>인지 한 번에 판단할 수 있는 API입니다. 위 예제 코드에서는 일단 테스트가 통과하는 상황을 만들기 위해 <code>not</code>을 붙였는데요, 실제 테스트 코드에서는 <code>not</code>을 제거하여 사용하면 값을 한 번에 판단할 수 있는 API가 됩니다. <code>boolean</code>에 대해서는 <code>.true</code>, <code>.falase</code>가 별도로 존재합니다. 그리고 배열이 <code>empty</code>인지를 판단하는 <code>.empty</code>도 별도로 존재합니다.</p>
<h3 id="deep"><a href="#deep" class="headerlink" title=".deep"></a>.deep</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">expect(foo).to.deep.equal(&#123; <span class="attr">bar</span>: <span class="string">'baz'</span> &#125;);</div><div class="line">expect(&#123; <span class="attr">foo</span>: &#123; <span class="attr">bar</span>: &#123; <span class="attr">baz</span>: <span class="string">'quux'</span> &#125; &#125; &#125;)</div><div class="line">  .to.have.deep.property(<span class="string">'foo.bar.baz'</span>, <span class="string">'quux'</span>);</div></pre></td></tr></table></figure>
<p>객체를 <code>equal</code>로 비교를 하기 위해서는 추가적으로 <code>deep</code> flag가 필요합니다.</p>
<h3 id="include-vs-have"><a href="#include-vs-have" class="headerlink" title=".include vs .have"></a>.include vs .have</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.include vs .have</span></div><div class="line">expect([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).to.include(<span class="number">2</span>);</div><div class="line"><span class="comment">// expect([1,2,3]).to.have(2); // error!</span></div><div class="line">expect([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).to.have.property(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;;</div><div class="line">expect(obj).to.include.property(<span class="string">'foo'</span>);</div><div class="line">expect(obj).to.have.property(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line">expect(<span class="string">'foobar'</span>).to.include.string(<span class="string">'bar'</span>);</div><div class="line">expect(<span class="string">'foobar'</span>).to.have.string(<span class="string">'bar'</span>);</div></pre></td></tr></table></figure>
<p>(사실 두 API의 차이점을 잘 모르겠다.)</p>
<h3 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deepCss = &#123; <span class="string">'.link'</span>: &#123; <span class="string">'[target]'</span>: <span class="number">42</span> &#125;&#125;;</div><div class="line">expect(deepCss).to.have.deep.property(<span class="string">'\\.link.\\[target\\]'</span>, <span class="number">42</span>);</div></pre></td></tr></table></figure>
<p><code>.</code>이나 <code>[</code>,<code>]</code>을 사용하기 위해서는 <code>\\</code>를 사용하여 표시할 수 있습니다.</p>
<p>제공되는 API 종류가 정말 많아서, 왠지 있을 것 같은 API는 <a href="http://chaijs.com/api/bdd/" target="_blank" rel="external">공식 문서</a>에서 찾아보면서 테스트 코드를 작성하면 되겠습니다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/javascript_test_tutorial" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><a href="https://jaeyeophan.github.io/2017/04/23/BDD-3-chai-http/">&gt;Chai-http를 사용하여 REST API test하기&gt;</a></p>
<p><em>[TDD] 2. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/tool_chai.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;TDD-2-Chai-Getting-started&quot;&gt;&lt;a href=&quot;#TDD-2-Chai-Getting-started&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="TDD" scheme="https://jaeyeophan.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[TDD] 1. Mocha - Getting started</title>
    <link href="https://jaeyeophan.github.io/2017/04/23/BDD-1-mocha/"/>
    <id>https://jaeyeophan.github.io/2017/04/23/BDD-1-mocha/</id>
    <published>2017-04-23T07:07:34.000Z</published>
    <updated>2017-05-21T04:42:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/tool_mocha.png" alt=""></p>
<h1 id="TDD-1-Mocha-Getting-started"><a href="#TDD-1-Mocha-Getting-started" class="headerlink" title="[TDD] 1. Mocha - Getting started"></a>[TDD] 1. Mocha - Getting started</h1><p><code>Mocha</code>란 러너를 포함하고 있는 테스트 프레임워크로 사용자 수가 가장 많은 테스크 프레임워크입니다. <code>Mocha</code>는 자체적으로 assertion을 지원하지 않기 때문에 다른 <code>Assertion</code>라이브러리와 함께 사용해야 합니다. 기본적으로 node에서 제공하는 <code>assert</code>라이브러리가 존재하며 요즘에는 주로 <code>chai</code>라는 라이브러리와 함께 사용한다고 합니다. 라이브러리에 대한 내용은 공식 문서를 참조하시면 되겠습니다.<br><a href="http://mochajs.org/" target="_blank" rel="external">&gt;Mocha Documents</a></p>
<p>Mocha는 기본적으로 BDD 기반의 프레임워크입니다. 하지만 BDD와 TDD 두 종류의 인터페이스를 모두 제공하고 있습니다. 이번 포스팅에서는 BDD 기반의 예제를 살펴봅니다.<br><a href="http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/" target="_blank" rel="external">TDD vs BDD</a></p>
<h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><ol>
<li><code>mocha</code>를 global로 설치해줍니다. <em>(cf <a href="http://jaeyeophan.github.io/2017/04/21/YARN-New-Package-Manger/">YARN, 새로운 Package Manager</a>)</em><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ yarn global add mocha</div><div class="line"><span class="comment">#success Installed "mocha@3.2.0" with binaries:</span></div><div class="line"><span class="comment">#      - mocha</span></div><div class="line"><span class="comment">#      - _mocha</span></div><div class="line"><span class="comment">#✨  Done in 4.23s.</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>저는 3.2.0 version의 <code>mocha</code>를 설치했습니다.</p>
<ol>
<li>보다 간편한 테스트 run을 위해 <code>package.json</code>에 scripts 추가합니다.<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[...]</div><div class="line">"scripts": &#123;</div><div class="line">  "test": "mocha $(find ./ -name '*./test/**/*.test.js') --recursive -w"</div><div class="line">&#125;,</div><div class="line">[...]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>test</code>라는 명령어로 <code>mocha</code>를 실행하며 <code>test</code>디렉토리에 있고 <code>.test.js</code>파일을 찾아 <code>mocha</code>를 실행시킵니다. 그리고 추가적으로 <code>-w</code>옵션을 통해 파일이 변경될 때마다 자동으로 테스트를 수행할 수 있게 합니다.</p>
<ol>
<li><code>/src/operator.js</code> 파일을 생성하고 다음 코드를 작성합니다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports.sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>정말 간단하게, 두 수를 파라미터로 받아 합을 반환하는 <code>sum</code> 함수를 테스트해보겠습니다.</p>
<ol>
<li><code>/test/operator.test.js</code> 파일을 생성하고 다음 코드를 작성합니다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> operator = <span class="built_in">require</span>(<span class="string">'../src/operator'</span>);</div><div class="line"><span class="keyword">const</span> sum = operator.sum;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>우선 <code>/src/operator.js</code> 파일을 <code>import</code>합니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'operator.js Test'</span>, () =&gt; &#123;</div><div class="line">    describe(<span class="string">'sum 함수 테스트'</span>, () =&gt; &#123;</div><div class="line">        it (<span class="string">'10과 20를 넘기면 30이 나와야 한다.'</span>, done =&gt; &#123;</div><div class="line">            <span class="keyword">let</span> result = sum(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">            <span class="keyword">if</span> (result === <span class="number">30</span>) &#123;</div><div class="line">                done();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'결과 값이 30이 아니다.'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>드디어 테스트 코드를 작성했습니다. <code>describe</code>에서는 테스트의 <code>이름</code>을 지정합니다. 위 예제 코드처럼 중첩하여 사용할 수 있으며 테스트를 구분하는 <code>section</code>이라고 표현할 수 있겠습니다. 그리고 실행해야하는 부분(단위 테스트 단위)을 콜백으로 넘겨줍니다. <code>it</code> 구문에는 단위 테스트 이름을 작성하고 실제 실행되는 코드를 콜백(<code>done</code>)으로 넘겨줍니다. 그런 다음, <code>package.json</code>에 작성했던 <code>npm test</code> 명령어를 통해 test를 실행해줍니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm test</div><div class="line">  sum 함수 테스트</div><div class="line">    ✓ 10과 20를 넘기면 30이 나와야 한다.</div><div class="line"></div><div class="line">  1 passing (2ms)</div></pre></td></tr></table></figure></p>
<p>이렇게 나왔으면 테스트가 통과한 것입니다. <code>done()</code> 메소드가 실행되면 테스트가 통과하도록 테스트 코드를 작성할 수 있습니다. <code>result === 40</code>처럼 옳지 않은 값을 넣어주면, <code>throw Error()</code>가 실행되면서 테스트가 실패했다는 메세지가 나타납니다.</p>
<h3 id="Mocha의-hook"><a href="#Mocha의-hook" class="headerlink" title="Mocha의 hook"></a>Mocha의 hook</h3><p><code>Mocha</code>에서는 추가적으로 네 가지의 함수를 제공합니다. 각각은 테스트 코드가 실행되기 전과 후에 실행되는 함수입니다.</p>
<ul>
<li>before<br>: 테스트 코드가 실행되기 전에 한 번 실행된다.</li>
<li>beforeEach<br>: (테스트가 여러 개일 경우) 각각의 테스트 코드가 실행되기 전마다 실행된다.</li>
<li>afterEach<br>: (테스트가 여러 개일 경우) 각각의 테스트 코드가 실행된 후마다 실행된다.</li>
<li>after<br>: 모든 테스트 코드가 실행된 후 한 번 실행된다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'operator.js Test'</span>, () =&gt; &#123;</div><div class="line">    describe(<span class="string">'sum 함수 테스트'</span>, () =&gt; &#123;</div><div class="line">        before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"before"</span>);</div><div class="line">        &#125;);</div><div class="line">        beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">"beforeEach"</span>);</div><div class="line">        &#125;);</div><div class="line">        it (<span class="string">'10과 20를 넘기면 30이 나와야 한다.'</span>, (done) =&gt; &#123;</div><div class="line">            <span class="keyword">let</span> result = sum(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">            <span class="keyword">if</span> (result === <span class="number">30</span>) &#123;</div><div class="line">                done();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'결과 값이 30이 아니다.'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"after"</span>);</div><div class="line">        &#125;);</div><div class="line">        afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"afterEach"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>각각 상황에 맞는 <code>console.log()</code>를 찍어줬습니다. <code>npm test</code> 명령어를 실행해보겠습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">test</span></div><div class="line">  operator.js Test</div><div class="line">    sum 함수 테스트</div><div class="line">before</div><div class="line">beforeEach</div><div class="line">      ✓ 10과 20를 넘기면 30이 나와야 한다.</div><div class="line">afterEach</div><div class="line">after</div><div class="line"></div><div class="line">  1 passing (3ms)</div></pre></td></tr></table></figure></p>
<p>각각의 함수들이 위치하는 라인은 상관이 없습니다. 가독성이 좋기 위해 의미상으로 적절한 위치에 코드를 작성했습니다. 정말 간단하게 <code>Mocha</code>를 사용해봤습니다. <code>if</code>문을 통한 테스트 코드 작성이 너무 지저분했는데요, 이제 <code>Mocha</code>와 함께 <code>Chai</code>를 사용해보겠습니다!</p>
<p><a href="https://jaeyeophan.github.io/2017/04/23/BDD-2-chai/">&gt;&gt;Chai 테스트 프레임워크 &gt;&gt;</a></p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/javascript_test_tutorial" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>[TDD] 1. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/tool_mocha.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;TDD-1-Mocha-Getting-started&quot;&gt;&lt;a href=&quot;#TDD-1-Mocha-Getting-started&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="TDD" scheme="https://jaeyeophan.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 10. Generator</title>
    <link href="https://jaeyeophan.github.io/2017/04/22/ES6-10-Generator/"/>
    <id>https://jaeyeophan.github.io/2017/04/22/ES6-10-Generator/</id>
    <published>2017-04-22T08:49:54.000Z</published>
    <updated>2017-04-24T08:58:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-10-Generator"><a href="#ES6-10-Generator" class="headerlink" title="[ES6] 10. Generator"></a>[ES6] 10. Generator</h1><h2 id="Generator는-무엇인가"><a href="#Generator는-무엇인가" class="headerlink" title="Generator는 무엇인가?"></a>Generator는 무엇인가?</h2><p><code>Generator function</code>으로 반환된 값을 <code>Generator Object</code>라고 하고 이 <code>Generator Obejct</code>는 <code>iterator</code> 프로토콜을 따르고 있다. 즉 <code>[Symbol.iterator]</code>가 프로퍼티에 추가되어 있다는 것이다. <code>Generator function</code>안에서는 <code>yield</code>라는 키워드를 사용해서 함수에 내부에 작성된 코드를 전부 실행하지 않는다. 제너레이터 함수는 <code>yield</code>를 기준으로 실행을 나누어서 진행한다. <code>iterator</code>프로토콜을 따르고 있기 때문에 순차적으로 실행할 수 있는 것이다.<br><em>cf&gt;<code>Generator function</code>를 <code>제너레이터 함수</code>로, <code>Generator Object</code>를 <code>제너레이터 오브젝트</code>로 표기.</em></p>
<h2 id="Generator-Function"><a href="#Generator-Function" class="headerlink" title="Generator Function"></a>Generator Function</h2><p><code>function*</code>로 표현할 수 있으며, 작성할 때는 일반 <code>function</code>처럼 선언문과 표현식으로 작성할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">calc</span>(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"generator start"</span>);</div><div class="line">  <span class="keyword">yield</span> prev + post;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> calc = <span class="function"><span class="keyword">function</span>*(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"generator start"</span>);</div><div class="line">  <span class="keyword">yield</span> prev + post;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>제너리에터 함수에 의해 반환되는 값은 제너레이터 오브젝트이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> generator = calc(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> generator); <span class="comment">// object</span></div></pre></td></tr></table></figure></p>
<p>제너레이터 오브젝트를 반환하는 순간에는 오브젝트를 반환하기만 할 뿐, 내부 코드는 실행되지 않는다.</p>
<h2 id="Generator-Object"><a href="#Generator-Object" class="headerlink" title="Generator Object"></a>Generator Object</h2><p><code>new</code> 키워드를 사용하여 인스턴스를 생성할 수 없다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cal = <span class="keyword">new</span> calc();<span class="comment">// Error</span></div><div class="line"><span class="comment">//TypeError: calc is not a constructor</span></div></pre></td></tr></table></figure></p>
<p><code>next()</code> 메소드를 통해 제너레이터 함수를 실행시킬 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(generator.next());</div><div class="line"><span class="comment">//generator start</span></div><div class="line"><span class="comment">//&#123; value: 3, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(generator.next());</div><div class="line"><span class="comment">//&#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p><code>iterator</code>의 <code>next()</code>메소드를 실행시킨 것처럼 <code>value</code>와 <code>done</code>이라는 프로퍼티를 갖고 있는 객체로 반환된다. 그런데 첫번째 <code>next()</code>메소드 실행 시에는 <code>generator start</code>가 출력되었는데, 두번째 실행 시에는 출력되지 않았다. <code>yield</code>라는 키워드를 중심으로 함수가 나눠 실행되는 것이다.</p>
<h2 id="yield-키워드-함수를-실행하고-멈출-수-있다"><a href="#yield-키워드-함수를-실행하고-멈출-수-있다" class="headerlink" title="yield 키워드, 함수를 실행하고 멈출 수 있다."></a>yield 키워드, 함수를 실행하고 멈출 수 있다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[returnValue] = <span class="keyword">yield</span>[expression]</div></pre></td></tr></table></figure>
<p>위와 같은 구문으로 <code>yield</code>를 작성할 수 있다.</p>
<p>위의 예제 코드에서 살펴봤듯이, <code>next()</code> 메소드의 반환 값은 <code>value</code>와 <code>done</code>으로 구성되어 있는 오브젝트이다. 제너레이터의 메소드 <code>next()</code>에서 이 두 가지의 값은 yield에 의해 결정된다. <code>value</code>가 결정되는 규칙이 조금 복잡하다.</p>
<h5 id="value-결정-규칙"><a href="#value-결정-규칙" class="headerlink" title="value 결정 규칙"></a>value 결정 규칙</h5><ul>
<li><code>expression</code>으로 반환되는 값이 할당.<br>이 때, <code>expression</code>에 있는 값이 <code>returnValue</code>에 할당되지 않는다.</li>
<li><code>expression</code>에 아무것도 없으면 <code>undefined</code>가 할당.<br>이 때, <code>next()</code>의 파라미터로 넘겨지는 값이 <code>returnValue</code>에 할당된다.</li>
</ul>
<h5 id="done-결정-규칙"><a href="#done-결정-규칙" class="headerlink" title="done 결정 규칙"></a>done 결정 규칙</h5><ul>
<li>계속 수행할 <code>yield</code>가 남아있으면 <code>false</code>.</li>
<li>더 이상 실행할 <code>yield</code>가 없으면 <code>true</code>.</li>
</ul>
<p><em>예제 코드를 살펴보자.</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">calc</span>(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Initial result: <span class="subst">$&#123;result&#125;</span>`</span>);</div><div class="line">  result = <span class="keyword">yield</span> prev + post;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Middle result: <span class="subst">$&#123;result&#125;</span>`</span>);</div><div class="line"></div><div class="line">  result = <span class="keyword">yield</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Last result: <span class="subst">$&#123;result&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> generator = calc(<span class="number">10</span>, <span class="number">20</span>);</div></pre></td></tr></table></figure></p>
<p>위에서 언급한 규칙에 대한 내용을 모두 담고 있는 예제코드이다. <code>console.log()</code>에는 어떠한 값이 찍히게 될까? 코드를 통해 하나씩 살펴보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(generator.next());</div><div class="line"><span class="comment">// Initial result: 0</span></div><div class="line"><span class="comment">// &#123; value: 30, done: false &#125;</span></div></pre></td></tr></table></figure></p>
<p><code>next()</code> 메소드를 실행시키면 첫번째 yield까지 실행한다.<br>초기 <code>result</code> 변수에 대한 값이 출력되고,<br><code>expression</code>으로 계산된 값인 <code>30</code>이 <code>value</code>이 출력된다.<br>아직 <code>yield</code>가 남았으니 <code>done</code>은 <code>false</code>가 되겠다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(generator.next());</div><div class="line"><span class="comment">// Middle result: undefined</span></div><div class="line"><span class="comment">// &#123; value: undefined, done: false &#125;</span></div></pre></td></tr></table></figure>
<p>두번째 yield까지 실행한다.<br><code>expression</code> 값이 <code>result</code>에 할당되지 않은 것을 확인할 수 있다.<br>아직 <code>yield</code>가 남았으니 <code>done</code>은 <code>false</code>가 되겠다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(generator.next(<span class="number">20</span>));</div><div class="line"><span class="comment">// Last result: 20</span></div><div class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>
<p>yield가 없으므로 brace까지 실행한다.<br><code>next()</code>메소드의 파라미터로 넘겨진 <code>20</code>이 <code>result</code> 변수에 할당된 것을 확인할 수 있다.<br>더이상 <code>yield</code> 키워드가 없으므로 <code>done</code>은 <code>true</code>가 된다.</p>
<h3 id="yield-대신-return"><a href="#yield-대신-return" class="headerlink" title="yield 대신 return"></a>yield 대신 return</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">calc</span>(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> prev + post;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> generator = calc(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line"><span class="built_in">console</span>.log(generator.next());</div><div class="line"><span class="comment">// &#123; value: 30, done: true &#125;</span></div></pre></td></tr></table></figure>
<p><code>return</code> 키워드 뒤에 오는 값이 <code>value</code>에 할당되고 <code>yield</code> 키워드의 유무와 상관없이 <code>done</code>에는 <code>true</code>가 할당된다. <code>return</code>은 수행되고 있는 이터레이터를 종료시키는 역할을 수행한다.</p>
<h3 id="이터레이터-종료하기"><a href="#이터레이터-종료하기" class="headerlink" title="이터레이터 종료하기"></a>이터레이터 종료하기</h3><p><code>yield</code> 키워드의 유무와 상관없이 이터레이터를 종료하고자 할 때는 제너레이터 오브젝트의 <code>throw()</code>메소드와 <code>return()</code>메소드를 사용할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">idMaker</span>(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> value = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">yield</span> ++value;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> g = idMaker();</div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 3, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.return(<span class="number">100</span>));<span class="comment">// &#123; value: 100, done: true &#125;</span></div></pre></td></tr></table></figure>
<p><code>return()</code>메소드의 파라미터로 넘어가는 값이 <code>value</code>에 할당된다.<br>위의 예제 코드에 <code>return()</code> 대신 <code>throw()</code>를 호출하게 되면 파라미터로 넘겨준 Error Message를 출력하고 이터레이터가 바로 종료된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">idMaker</span>(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> value = <span class="number">0</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> ++value;</div><div class="line">    &#125;    </div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Error message: <span class="subst">$&#123;e&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> g = idMaker();</div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 3, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.throw(<span class="string">"Throw Exception"</span>));</div><div class="line"><span class="comment">//Error message: Throw Exception</span></div><div class="line"><span class="comment">//&#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>여기서 <code>try-catch</code> 구문에 <code>yield</code>를 추가하면 어떻게 될까?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">idMaker</span>(<span class="params">prev, post</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> value = <span class="number">0</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> ++value;</div><div class="line">    &#125;    </div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    <span class="keyword">yield</span> e;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> g = idMaker();</div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 3, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.throw(<span class="string">"Throw Exception"</span>));</div><div class="line"><span class="comment">//&#123; value: 'Throw Exception', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>바로 이터레이터가 종료되지 않고 <code>yield</code> 다음의 구문이 실행된다.</p>
<h2 id="yield-키워드"><a href="#yield-키워드" class="headerlink" title="yield* 키워드"></a>yield* 키워드</h2><p><code>yield</code>에 <code>*</code>를 붙인 다음 <code>[expression]</code>에 이터러블 오브젝트를 작성할 수 있다. 이렇게 되면 해당 <code>yield</code>가 수행될 때 이터러블 오브젝트를 순회하게 된다. 코드를 통해 살펴보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span>* [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> g = gen();</div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 10, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 20, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 30, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>우선적으로 배열을 순회한 후에, 다음에 해당하는 <code>yield</code>를 수행하게 된다.</p>
<h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>문법을 아는 것과 실제 프로그래밍에서 적용하는 것은 확실히 다른 문제이다. 지금 <code>yield</code>의 향연을 보고 이걸 어디에다가 쓰나 하는 생각이 들 것이다. 다음 링크들을 참고하면 좀 나아질 것 같아서, 몇 가지 링크를 첨부한다.</p>
<p><a href="http://meetup.toast.com/posts/73" target="_blank" rel="external">ES6의 제너레이터를 사용한 비동기 프로그래밍</a><br><a href="http://www.haruair.com/blog/3425" target="_blank" rel="external">Javascript의 Generator와 Koa.js</a><br><a href="http://blog.coderifleman.com/2014/11/15/javascript-and-async-error/" target="_blank" rel="external">자바스크립트와 비동기 오류 처리</a></p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="external">MDN function*</a></p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>10. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-10-Generator&quot;&gt;&lt;a href=&quot;#ES6-10-Generator&quot; class=&quot;headerlink&quot; title=&quot;[ES6] 1
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>YARN, 새로운 Package Manger</title>
    <link href="https://jaeyeophan.github.io/2017/04/21/YARN-New-Package-Manger/"/>
    <id>https://jaeyeophan.github.io/2017/04/21/YARN-New-Package-Manger/</id>
    <published>2017-04-21T10:18:49.000Z</published>
    <updated>2017-04-21T13:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fe_tool_yarn.jpg" alt=""></p>
<h1 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h1><p><code>YARN</code>이란 Facebook에서 만든 새로운 자바스크립트 패키지 매니저입니다. 기존에 존재하는 <code>npm</code>과 동일한 기능을 수행합니다. 그렇다면 Facebook은 <code>YARN</code>을 왜 만들었을까요? 이 부분에 대해서는 정리가 잘 되어 있는 링크를 첨부할게요!<br><a href="http://fetobe.co.kr/%EC%83%88%EB%A1%9C%EC%9A%B4-npm-client-yarn/" target="_blank" rel="external">&gt;새로운 NPM Client YARN&gt;</a></p>
<h2 id="YARN-설치하기"><a href="#YARN-설치하기" class="headerlink" title="YARN 설치하기"></a>YARN 설치하기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install yarn</div></pre></td></tr></table></figure>
<p><code>Homebrew</code>를 통하여 설치할 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn --version</div></pre></td></tr></table></figure></p>
<p>어느 모듈이나 마찬가지로 설치된 version을 확인할 수 있습니다.</p>
<h2 id="YARN-사용하기"><a href="#YARN-사용하기" class="headerlink" title="YARN 사용하기"></a>YARN 사용하기</h2><h3 id="새-프로젝트-시작하기"><a href="#새-프로젝트-시작하기" class="headerlink" title="새 프로젝트 시작하기"></a>새 프로젝트 시작하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn init</div></pre></td></tr></table></figure>
<p><code>npm</code>과 마찬가지로 <code>init</code>이라는 명령어를 통해 시작할 수 있으며, <code>package.json</code>파일이 없는 경우에는 <code>대화형 인터페이스</code>가 출력되면서 프로젝트를 설정할 수 있습니다. 이미 <code>package.json</code>이 존재하는 경우에는 해당 파일을 재사용하게 됩니다.</p>
<h3 id="패키지-설치하기"><a href="#패키지-설치하기" class="headerlink" title="패키지 설치하기"></a>패키지 설치하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package_name]</div><div class="line">$ yarn add [package_name]@[version]</div><div class="line">$ yarn add [package_name]@[tag]</div></pre></td></tr></table></figure>
<p><code>add</code>라는 command로 패키지를 설치(add)할 수 있습니다. <code>@</code>로 설치할 <code>version</code>과 <code>tag</code>를 명시할 수 있습니다.</p>
<h4 id="add-option"><a href="#add-option" class="headerlink" title="add option"></a><code>add</code> option</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package_name] --dev / -D</div></pre></td></tr></table></figure>
<p>해당 패키지가 <code>devDependencies</code>에 추가됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package_name] --peer / -P</div></pre></td></tr></table></figure></p>
<p>해당 패키지가 <code>peerDependencies</code>에 추가됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package_name] --optional / -O</div></pre></td></tr></table></figure></p>
<p>해당 패키지가 <code>optionalDependencies</code>에 추가됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package_name] --exact / -E</div></pre></td></tr></table></figure></p>
<p><code>@</code>로 version을 명시할 수 있지만, 보다 strict하게 version을 명시하여 설치하는 경우에 사용합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package_name] --tilde / -T</div></pre></td></tr></table></figure></p>
<p>기본적으로 가장 최근 release version의 패키지를 설치하지만, 좀 더 최신의 version을 설치하는 경우에 사용합니다.</p>
<h3 id="패키지-업그레이드"><a href="#패키지-업그레이드" class="headerlink" title="패키지 업그레이드"></a>패키지 업그레이드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yarn upgrade [package_name]</div><div class="line">$ yarn upgrade [package_name]@[version]</div><div class="line">$ yarn upgrade [package_name]@[tag]</div></pre></td></tr></table></figure>
<p><code>upgrade</code>라는 명령어를 통해 설치한 패키지를 업그레이드 할 수 있습니다.</p>
<h3 id="모듈-제거"><a href="#모듈-제거" class="headerlink" title="모듈 제거"></a>모듈 제거</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn remove [package]</div></pre></td></tr></table></figure>
<p><code>remove</code>라는 명령어를 통해 설치한 패키지를 제거할 수 있습니다.</p>
<h3 id="다른-Command"><a href="#다른-Command" class="headerlink" title="다른 Command"></a>다른 Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn global [add/ls/remove/upgrade]</div></pre></td></tr></table></figure>
<p><code>npm</code>에서의 <code>--global</code> 와 비슷한 기능을 수행하는 <code>global</code> 이 추가된 명령어입니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn clean</div></pre></td></tr></table></figure></p>
<p><code>clean</code> 명령어는 현재 설치된 패키지들의 의존성을 분석하여 사용하지 않는, 불필요한 파일들을 제거해줍니다. 이 명령어를 한 번 실행하면 <code>.yarnclean</code> 파일이 생성되며 version control에 추가해야 합니다. 한 번 실행된 후, 불필요한 파일들을 제거해주는 작업은 yarn 커맨드를 통해 어떠한 패키지를 설치하는 경우(<code>add</code> or <code>run</code> command)에 자동적으로 수행됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn info [package_name] [option]</div></pre></td></tr></table></figure></p>
<p><code>info</code> 명령어를 통해 해당 패키지의 정보를 볼 수 있습니다. <code>option</code>으로 <code>readme</code>를 입력하게 되면 해당 패키지에 작성된 <code>README.md</code>파일을 볼 수 있습니다.(다양한 option command가 존재합니다!)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn list [--depth]</div></pre></td></tr></table></figure></p>
<p><code>list</code> 명령어를 통해 현재 작업 중인 디렉토리의 모든 패키지들의 의존성 관계를 리스트로 확인할 수 있습니다. <code>depth</code> 옵션을 통해서 level을 지정할 수도 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn outdated [package]</div></pre></td></tr></table></figure></p>
<p><code>outdated</code> 명령어를 통해 패키지들의 현재 설치된 version(Current)과 권장하는 version(Wanted), 최신 version(Latest)을 보여줍니다. 특정 <code>[package]</code>를 입력하여 원하는 패키지에 대해서만 볼 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn pack</div></pre></td></tr></table></figure></p>
<p><code>pack</code> 명령어를 통해 패키지의 의존성들을 <code>gzip</code>으로 압축시킬 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn run [script] [--&lt;args&gt;]</div></pre></td></tr></table></figure></p>
<p><code>run</code> 명령어를 통해 <code>npm</code>에서 처럼 <code>package.json</code>에서 정의한 <code>scripts</code>를 실행할 수 있습니다.</p>
<p>거의 모든 명령어가 기존에 사용하던 <code>npm</code>과 동일한 것을 확인하실 수 있었습니다 :)</p>
<h3 id="yarn-lock"><a href="#yarn-lock" class="headerlink" title="yarn.lock"></a>yarn.lock</h3><p><code>yarn</code>으로 모듈을 설치하다보면 <code>yarn.lock</code>이라는 파일이 생성된 것을 확인할 수 있다. 이것은 설치한 모듈들의 각각 의존성 관리를 해줍니다.<br>이미 <code>package.json</code>이 하고 있는거 아닌가? 라는 생각이 드는데요, 하지만 페이스북이 <code>yarn</code>을 만든 이유 중 하나는 보다 정확하게 패키지들의 의존성을 관리하기 위함이었습니다. <code>yarn.lock</code> 파일에는 <code>package.json</code>에 있는 것보다 더 많은 정보를 갖고 있습니다. 그렇기 때문에 좀 더 엄격한 의존성 관리가 가능하다고 합니다. (위에서 언급한 <code>.yarnclean</code>파일과 함께  version control system에 추가해줘야 합니다.)</p>
<h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>기존의 NPM과 많이 다를 줄 알고 열심히 정리했는데 거의 정말 비슷하네요! 같은 값이면 다홍치마라고, 좀 더 빠르고 의존성 관리를 정확하게 해주는 <code>YARN</code>으로 옮겨갈 때인가요? 이상 <code>YARN</code>에 대한 포스팅이었습니다 :)</p>
<h4 id="참고할-만한-링크"><a href="#참고할-만한-링크" class="headerlink" title="참고할 만한 링크"></a>참고할 만한 링크</h4><ul>
<li><a href="https://www.pluralsight.com/guides/node-js/yarn-a-package-manager-for-node-js" target="_blank" rel="external">YARN vs NPM</a></li>
<li><a href="https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc" target="_blank" rel="external">YARN Cheet Sheet</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/fe_tool_yarn.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;YARN&quot;&gt;&lt;a href=&quot;#YARN&quot; class=&quot;headerlink&quot; title=&quot;YARN&quot;&gt;&lt;/a&gt;YARN&lt;/h1&gt;&lt;p&gt;&lt;code&gt;YARN&lt;
    
    </summary>
    
      <category term="Tool" scheme="https://jaeyeophan.github.io/categories/Tool/"/>
    
    
      <category term="tool" scheme="https://jaeyeophan.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 9. Iterator</title>
    <link href="https://jaeyeophan.github.io/2017/04/21/ES6-9-Iterator/"/>
    <id>https://jaeyeophan.github.io/2017/04/21/ES6-9-Iterator/</id>
    <published>2017-04-21T08:15:09.000Z</published>
    <updated>2017-04-21T08:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-9-Iterator"><a href="#ES6-9-Iterator" class="headerlink" title="[ES6] 9. Iterator"></a>[ES6] 9. Iterator</h1><p><a href="https://jaeyeophan.github.io/2017/04/18/ES6-3-Iteration-and-for-of-statement/">&gt;&gt;3. Iterable and for-of statement&gt;&gt;</a><br><a href="https://jaeyeophan.github.io/2017/04/20/ES6-8-Symbol/">&gt;&gt;8. Symbol</a></p>
<p><em>이 포스팅은 이전에 작성된 두 포스팅을 기반으로 작성되었습니다.</em>  </p>
<p><code>iterator</code>는 순회 가능한 값들의 <code>시퀀스</code>를 만드는 방법을 정의한다.<br>대표적인 순회 가능한 것은 <code>Array</code>다. <code>Array</code> 오브젝트는 <code>Symbol.iterator</code>를 가지고 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr[<span class="built_in">Symbol</span>.iterator]);<span class="comment">// function</span></div></pre></td></tr></table></figure></p>
<p>위 예제 코드에서 정의한 <code>arr</code>의 <code>iterator</code>를 추출하여 <code>arr</code>를 순회할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: 2, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: 3, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure></p>
<p><code>iterator</code>를 추출하자마자 <code>head</code>(공식 용어는 아니고 설명을 위한 용어)는 배열의 시작점을 가리키게 된다.(첫 원소를 가리키는 것이 아니다.) 그 상태에서 <code>next()</code>메소드를 호출하게 되면, 첫번재 원소가 출력된다. 출력 값은 원소의 값인 <code>value</code>와 <code>done</code>이라는 <code>boolean</code> 값을 가지고 있는 <code>Object</code>이다. 마지막 원소까지 출력된 상태에서 <code>next()</code> 메소드를 호출하게 되면 <code>value</code>는 <code>undefined</code>가 되고 <code>done</code> 값은 <code>true</code>가 된다.</p>
<p>문자열에도 적용할 수 있다. <code>String</code> 오브젝트도 <code>iterable</code>프로토콜을 구현한 오브젝트이기 때문에 <code>iterator</code>를 사용할 수 있는 것이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">"jbee"</span>;</div><div class="line"><span class="keyword">let</span> iterator = name[<span class="built_in">Symbol</span>.iterator]();</div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: j, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: b, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: e, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: e, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure></p>
<p><code>Object</code>에는 기본적으로 <code>iterator</code>가 존재하지 않는다. 때문에 <code>for-of</code>로 순회할 수 없다. 하지만 <code>iterator</code>를 오브젝트에 추가하여 <code>iterable</code>하게 만들 수 있다. 또한 배열을 상속받은 객체는 <code>iterable</code> 객체이므로 <code>iterator</code>를 사용할 수 있다.</p>
<p><code>iterator</code>를 사용하다 보면 뭔가 Java의 <code>interface</code> 또는 <code>@FunctionalInterface</code> 같은 느낌도 든다. java에서 해당 <code>interface</code>를 <code>implements</code>하게 되면 해당 기능을 사용할 수 있는 것처럼 구현하고자 하는 <code>Symbol</code>, 즉 <code>iterator</code>를 프로퍼티에 추가해서 사용하면 <code>iterator</code> 기능을 사용할 수 있는 것이다.</p>
<p>어떻게 하면 <code>iterator</code>를 그럴싸하게 사용해볼 수 있을까?<br>다음 예제는 이렇게 사용하면 어떨까? 정도의 예제 코드이다. 가볍게 보고 넘어가자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object to create id</span></div><div class="line"><span class="keyword">let</span> autoIncrement = &#123;</div><div class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">    <span class="keyword">let</span> id = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      next() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">value</span>: ++id,</div><div class="line">          <span class="attr">done</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Define User class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id, name) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> idCreator = autoIncrement[<span class="built_in">Symbol</span>.iterator]();</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> User(idCreator.next().value, <span class="string">"jbee"</span>));<span class="comment">// &#123; id: 1, name: 'jbee' &#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> User(idCreator.next().value, <span class="string">"foo"</span>));<span class="comment">// &#123; id: 2, name: 'foo' &#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> User(idCreator.next().value, <span class="string">"bar"</span>));<span class="comment">// &#123; id: 3, name: 'bar' &#125;</span></div></pre></td></tr></table></figure></p>
<p><code>autoIncraement</code> 객체에 <code>iterator</code> 프로퍼티를 추가하여, <code>id</code>를 순차적으로 생성하게 만들었다. <code>id</code>에 대해서는 외부에서 접근할 수 없으므로 안정적인 <code>id</code>가 생성될 수 있지 않을까?</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>9.end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-9-Iterator&quot;&gt;&lt;a href=&quot;#ES6-9-Iterator&quot; class=&quot;headerlink&quot; title=&quot;[ES6] 9. It
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 8. Symbol</title>
    <link href="https://jaeyeophan.github.io/2017/04/20/ES6-8-Symbol/"/>
    <id>https://jaeyeophan.github.io/2017/04/20/ES6-8-Symbol/</id>
    <published>2017-04-20T02:53:45.000Z</published>
    <updated>2017-05-02T06:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-8-Symbol"><a href="#ES6-8-Symbol" class="headerlink" title="[ES6] 8. Symbol"></a>[ES6] 8. Symbol</h1><h2 id="Symbol이란-무엇인가"><a href="#Symbol이란-무엇인가" class="headerlink" title="Symbol이란 무엇인가?"></a>Symbol이란 무엇인가?</h2><blockquote>
<p>고유하고 수정 불가능한 데이터 타입(?)</p>
</blockquote>
<p>자바스크립트에는 <code>Primitive type</code>이라는 개념이 있다. ES5에는 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>로 총 <strong>5가지</strong>의 원시 자료형이 존재한다. 여기에 ES6부터 <code>symbol</code>이라는 타입이 추가되었다.</p>
<p><code>Primitive type</code>들에게는 각각 Wrapper Object가 존재한다.(undefined와 null은 wrapper object가 존재하지 않는다.) <code>String</code> 오브젝트, <code>Boolean</code>오브젝트가 그 예이다. <code>symbol</code>도 마찬가지로 <code>Symbol</code> 오브젝트라는 wrapper Object가 존재한다. 각각의 wrapper obect에는 값을 처리하기 위한 메서드와 프로퍼티가 존재한다. <code>valueOf()</code>메소드를 통해 primitive value를 구할 수 있는 것이다. 하지만, <code>symbol</code>은 값을 반환하지 않는다!</p>
<h2 id="Symbol-도입-배경"><a href="#Symbol-도입-배경" class="headerlink" title="Symbol 도입 배경"></a>Symbol 도입 배경</h2><blockquote>
<p>왜 Symbol이 도입되었을까?</p>
</blockquote>
<p>처음 <code>Symbol</code>을 봤을 때는 <code>고유한 값</code>이라는 말에 <code>const</code>를 떠올렸다. 하지만 <code>Symbol</code>은 프로그램 전체를 통틀어 유일한 값을 의미한다. <code>Symbol()</code>이 실행될 때마다 유일한 값을 생성하는 것이다. 약속된 <code>Symbol</code> 값을 가지고 객체에 어떠한 특성을 부여할 수 있지 않을까? <code>Symbol</code>이란 무엇인가 먼저 알아보자.<br><em>(사실 라이브러리를 만들거나 프레임워크를 만들지 않는 이상, 실무에서 사용할 일이 거의 없을 것 같다.)</em></p>
<h2 id="Symbol에-대해서"><a href="#Symbol에-대해서" class="headerlink" title="Symbol에 대해서"></a>Symbol에 대해서</h2><p><code>Symbol</code>은 두 가지 <code>스코프(scope)</code>에 <code>생성</code>하여 <code>저장</code>할 수 있다.</p>
<h3 id="Symbol-생성하기-1"><a href="#Symbol-생성하기-1" class="headerlink" title="Symbol 생성하기 1"></a>Symbol 생성하기 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">"symbol description"</span>);</div><div class="line"><span class="comment">//Error: Symbol is not a constructor</span></div></pre></td></tr></table></figure>
<p><code>Symbol</code>은 <strong>객체가 아니다.</strong> 객체가 아닌 <code>Primitive type</code>이기 때문에 <code>new</code>키워드를 통해서 생성할 수 없다.<br><code>Symbol</code>을 생성할 때에는 다음과 같이 생성한다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">"symbol description"</span>);</div></pre></td></tr></table></figure>
<p><code>console.log()</code>를 통해 <code>Symbol</code>의 특징을 살펴보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s);<span class="comment">//symbol</span></div><div class="line"><span class="built_in">console</span>.log(s.toString());<span class="comment">//Symbol(symbol description)</span></div><div class="line"><span class="built_in">console</span>.log(s.valueOf());<span class="comment">//&#123;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(s);<span class="comment">//&#123;&#125;</span></div></pre></td></tr></table></figure></p>
<p>1) <code>Symbol</code>의 타입은 <code>symbol</code>이다.<br>2) 모든 built-in 오브젝트의 프로토타입에 연결되어 있는 <code>toString</code> 메소드를 통해서 <code>Symbol</code>의 <code>형태(description)</code>를 확인할 수 있다. 여기서 <code>형태</code>란 <code>Symbol</code>을 생성할 때 넘겨지는 parameter를 말한다. 주로 생성하는 <code>Symbol</code>을 설명하기 위한 문자열을 넘겨준다. 왠지 이 값을 통해 <code>Symbol</code>에 접근할 수 있을 것 같지만 그럴 수 없다.<br>3) 뒤에서 확인할 테지만 <code>Symbol</code>은 값을 외부로 노출시키지 않는다. 이러한 특성 때문에 <code>Symbol</code>을 출력하려고 하거나 <code>valueOf()</code> 메소드를 통해 값을 출력하려고 하면 <code>empty object</code>가 반환이 된다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</div><div class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"s1: "</span>, s1.toString());<span class="comment">//Symbol(foo)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"s2: "</span>, s2.toString());<span class="comment">//Symbol(foo)</span></div><div class="line"><span class="built_in">console</span>.log(s1 == s2);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>두 <code>Symbol</code>은 같은 <code>description</code>을 갖고 있는 <code>Symbol</code>일 뿐, 다른 <code>Symbol</code>이다. <code>Symbol()</code>이 <strong>호출될 때마다</strong> 새로운 <code>Symbol</code>을 생성하기 때문이다. 이 때 <code>Symbol</code>은 생성한 <code>scope</code>에 <code>Symbol</code>값이 설정된다.</p>
<h3 id="Symbol-생성하기-2-key"><a href="#Symbol-생성하기-2-key" class="headerlink" title="Symbol 생성하기 2, key"></a>Symbol 생성하기 2, key</h3><p>아까 생성한 <code>Symbol</code>을 다시 사용할 니즈가 있을 것 같다. 그래서 고유한 값을 갖는 <code>Symbol</code>을 만들 때, <code>key</code>를 등록하고, <code>key</code>를 통해 접근한다.</p>
<ul>
<li><code>for</code> 메소드<br><code>for</code> 메소드를 사용하여 생성 또는 호출할 수 있다. <code>key</code> 값이 파라미터로 넘어가고 등록되어 있는 <code>Symbol</code>을 반환한다. 이 때 <code>key</code> 값에 해당하는 <code>Symbol</code>이 없다면 해당 <code>Symbol</code>을 <code>Symbol registry</code>에 등록한다. 즉 없으면 생성하는 것이다.</li>
<li><code>keyFor</code> 메소드<br><code>keyFor</code> 메소드는 <code>Symbol</code>을 받아서 해당 <code>Symbol</code>의 <code>description</code> 값을 반환한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sFor1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</div><div class="line"><span class="keyword">let</span> sFor2 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(sFor1.toString());<span class="comment">//Symbol(foo)</span></div><div class="line"><span class="built_in">console</span>.log(sFor2.toString());<span class="comment">//Symbol(foo)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sFor1));<span class="comment">//foo</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sFor2));<span class="comment">//foo</span></div><div class="line"><span class="built_in">console</span>.log(sFor1 == sFor2);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(sFor1 === sFor2);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>같은 <code>key</code>값으로 <code>Symbol</code>을 호출하게 되면 두 <code>Symbol</code>은 같은 <code>Symbol</code>이다. 위에서 그냥 <code>Symbol()</code>을 통해 생성한 것과의 차이점은 <code>key</code>값과 함께 <code>Symbol</code>을 만들게 되면 <code>Global Symbol registry</code>에 해당 <code>Symbol</code>이 등록되어 <code>Symbol()</code>이 호출될 때마다 새로운 <code>Symbol</code>이 생성되지 않는다.<br><em>cf&gt; <code>Global Symbol registry</code>란 <code>Symbol</code>값을 공유하기 위한 영역으로 다른 자바스크립트 프레임워크에서도 공유할 수 있다.</em></p>
<h3 id="Symbol-특징-1"><a href="#Symbol-특징-1" class="headerlink" title="Symbol 특징 1"></a>Symbol 특징 1</h3><p>위의 예제에서도 살펴봤듯이, <code>Symbol</code>은 값을 외부에 노출시키지 않는다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"symbol description"</span>);</div><div class="line"><span class="built_in">console</span>.log (<span class="string">`symbol: <span class="subst">$&#123;sym&#125;</span>`</span>);</div><div class="line"><span class="comment">//TypeError: Cannot convert a Symbol value to string</span></div></pre></td></tr></table></figure></p>
<p>그렇기 때문에 <code>Template literal</code>에서 사용할 수 없다. 또한 <code>JSON.stringify()</code>메소드를 통해서 특정 오브젝트를 <code>stringify</code>하려고 해도 빈 객체가 리턴된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"symbol description"</span>);</div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  [sym]: <span class="string">"value"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(obj);</div><div class="line"><span class="built_in">console</span>.log(str);<span class="comment">//&#123;&#125;</span></div></pre></td></tr></table></figure></p>
<p>값을 외부에 노출시키지 않기 때문이다.</p>
<h3 id="Symbol-특징-2"><a href="#Symbol-특징-2" class="headerlink" title="Symbol 특징 2"></a>Symbol 특징 2</h3><p>객체에 <code>Symbol</code>로 등록된 프로퍼티를 <code>symbol-keyed property</code>라고 하는데 이 <code>symbol-keyed property</code>는 Object의 <code>getOwnPropertyNames</code> 반환 값에서 제외된다.<br><figure class="highlight javascript"><figcaption><span>user.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = &#123;</div><div class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">"name"</span>)] : <span class="string">"jbee"</span>,</div><div class="line">  <span class="attr">age</span> : <span class="number">25</span>,</div><div class="line">  <span class="attr">major</span>: <span class="string">"Computer Science"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(user));<span class="comment">//['age', 'major']</span></div></pre></td></tr></table></figure></p>
<p>그렇기 때문에 <code>for-in statement</code>에서 열거되지 않는다.</p>
<figure class="highlight javascript"><figcaption><span>user.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> user) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>&gt;</div><div class="line">age</div><div class="line">major</div></pre></td></tr></table></figure>
<p>Object의 <code>symbol-keyed property</code>는 <code>getOwnPropertySymbols()</code> 메소드를 통해 확인할 수 있다.<br><figure class="highlight javascript"><figcaption><span>user.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(user)[<span class="number">0</span>].toString());<span class="comment">//Symbol(name)</span></div></pre></td></tr></table></figure></p>
<p><code>symbol-keyed property</code>로 value에 접근할 때는 <code>[]</code>를 통해 접근해야 한다. <code>.</code>을 통해 접근하면 <code>undefined</code>가 반환된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>.for(<span class="string">"name"</span>);</div><div class="line"><span class="keyword">let</span> user = &#123;</div><div class="line">  [sym] : <span class="string">"jbee"</span>,</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(user.sym);<span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(user[sym]);<span class="comment">//jbee</span></div></pre></td></tr></table></figure></p>
<p><code>.</code>(dot)을 통해서 <code>getOwnPropertyNames</code>에서 반환되는 <strong>일반적인</strong> 프로퍼티에 접근했다면 <code>symbol-keyed property</code>에는<code>[]</code>을 통해 접근하는 것이라고 생각해볼 수 있겠다.</p>
<h2 id="Well-known-Symbols"><a href="#Well-known-Symbols" class="headerlink" title="Well-known Symbols"></a>Well-known Symbols</h2><p><code>built-in Symbol property</code>로 Override하여 기능을 추가 및 변경할 수 있다. 대표적인 세 가지에 대해 알아보자.(<code>iterator</code>는 다음 포스팅에서 따로 다룬다.)</p>
<h3 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h3><p>객체의 기본 설명(description)에 사용되는 문자열 값을 지정할 수 있으며 <code>Object.prototype.toString()</code> 메소드가 호출될 때 사용된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">"jbee"</span>);</div><div class="line"><span class="built_in">console</span>.log(user.toString());<span class="comment">//[object Object]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"jbee"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj.toString());<span class="comment">//[object Object]</span></div><div class="line"></div><div class="line">User.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">"User"</span>;</div><div class="line"><span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">"Obj"</span>;</div><div class="line"><span class="built_in">console</span>.log(user.toString());<span class="comment">//[object User]</span></div><div class="line"><span class="built_in">console</span>.log(obj.toString());<span class="comment">//[object Obj]</span></div></pre></td></tr></table></figure></p>
<p><code>new</code> 키워드를 통해 생성한 인스턴스와 <code>객체 리터럴</code>로 생성한 객체 둘 다 <code>[object Object]</code>라는 값으로 출력되기 때문에 구분하는 것이 어렵다. <code>toStringTag</code> 프로퍼티를 오버라이드하여 customize할 수 있다.</p>
<h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">let</span> sum = values + <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//1,2,3100</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sum);<span class="comment">//string</span></div></pre></td></tr></table></figure>
<p>배열이 <code>string</code>으로 casting이 되고 그 뒤에 연산되는 <code>100</code> 마저 <code>string</code>으로 casting이 된다. 그래서 결과값이 <code>string</code>타입의 <code>1,2,3100</code>이 되는 것이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//overriding</span></div><div class="line">values[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="keyword">function</span>(<span class="params">hint</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(hint);</div><div class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> values) &#123;</div><div class="line">    result += item;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> sum2 = values + <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"sum2: "</span>, sum2);<span class="comment">//106</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sum2);<span class="comment">//number</span></div></pre></td></tr></table></figure></p>
<p>위 예제 코드에서는 <code>toPrimitive</code>라는 값을 통해서 배열의 값이 어떻게 반환될 지를 결정한다. 이 예제 코드에서는 배열의 모든 element 값을 더한 값으로 설정했다.<br><code>hint</code>라는 값을 console로 찍어보기만 하고 아직 사용하지 않았는데, 이 <code>hint</code> 값을 통해서 어떠한 형태로 반환할 지 분기를 나눌 수 있다. 다음 코드를 살펴보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</div><div class="line">    <span class="keyword">if</span> (hint === <span class="string">"number"</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (hint === <span class="string">"string"</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"문자열"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"default"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log (<span class="string">"default: "</span>, <span class="number">100</span> + obj);<span class="comment">//100default</span></div><div class="line"><span class="built_in">console</span>.log (<span class="string">"number: "</span>, <span class="number">1</span> * obj);<span class="comment">//number: 1</span></div><div class="line"><span class="built_in">console</span>.log (<span class="string">`string: <span class="subst">$&#123;obj&#125;</span>`</span>);<span class="comment">//string: 문자열</span></div><div class="line"><span class="built_in">console</span>.log(+obj +<span class="number">1</span>);<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p><code>[Symbol.toPrimitive]()</code>가 호출되면 자바스크립트 엔진은 parameter인 <code>hint</code>에 <code>number</code>, <code>string</code>, <code>default</code> 셋 중 하나를 설정하게 된다. 엔진은 어떻게 <code>hint</code>값을 설정할까? 네 개의 <code>console</code>을 찍어봤다.</p>
<ol>
<li><code>100 + obj</code>에서는 <code>obj</code>가 피연산자(연산 대상)이므로 <code>default</code>가 설정된다.</li>
<li><code>1 * obj</code>에서는 <code>*</code>연산 때문에 <code>number</code>가 설정된다. (곱셈 말고도 뺄셈, 나눗셈도 <code>number</code>가 설정된다.)</li>
<li><code>${obj}</code>에서는 <code>Template literal</code>로 사용되었으므로 <code>string</code>이 설정된다.</li>
<li><code>+obj +1</code>에서는 <code>+</code>라는 단항 연산자가 <code>obj</code>앞에 붙어서 <code>number</code>가 설정된다.</li>
</ol>
<h3 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h3><p><code>Array</code> 오브젝트의 <code>concat()</code>이라는 함수를 호출할 때의 상황을 지정하는 프로퍼티다. 두 배열을 결합할 때, 배열의 <code>펼침 여부</code>를 지정할 수 있다. <code>default value</code>는 <code>true</code>이다. 다음 예제 코드를 살펴보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> prev = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">let</span> post = [<span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(prev.concat(post));<span class="comment">//[1, 2, 3, 4]</span></div><div class="line"></div><div class="line">prev[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</div><div class="line"><span class="built_in">console</span>.log(prev.concat(post));<span class="comment">//[[1, 2], 3, 4]</span></div><div class="line">post[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</div><div class="line"><span class="built_in">console</span>.log(prev.concat(post));<span class="comment">//[[1, 2], [3, 4]]</span></div></pre></td></tr></table></figure></p>
<p>배열을 결합할 때, 펼치지 않고(프로퍼티 값을 <code>false</code>로 지정하고) 결합을 하게 되면, 배열의 구조를 그대로 유지하면서 합쳐진다. <code>Array-like</code> 오브젝트에서도 <code>concat()</code> 함수의 결과 형태를 지정할 수 있다.</p>
<h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p>이 이외에도 <code>@@iterator</code>, <code>@@hasInstance</code>, <code>@@replace</code>, <code>@@species</code> 등 다양한 <code>Well-known Symbol</code>들이 존재한다. 이 <code>Well-known Symbol</code>들은 이미 ES5 스펙에서부터 존재했었고 자연스럽게 그것들을 사용해왔던 것이고 ES6에서 각 프로퍼티들을 오버라이드하여 좀 더 유연한 코드를 작성할 수 있게 끔 공개된 것이다.<br><em>cf&gt; <code>@@</code>은 <code>Symbol</code> 대신 사용할 수 있는 약자이다.</em></p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<h4 id="Symbol과-관련된-다른-글들"><a href="#Symbol과-관련된-다른-글들" class="headerlink" title="Symbol과 관련된 다른 글들"></a>Symbol과 관련된 다른 글들</h4><ul>
<li><a href="https://perfectacle.github.io/2017/04/16/ES6-Symbol/index.html" target="_blank" rel="external">(ES6) Symbol - 양권성님 블로그 글</a></li>
</ul>
<p><em>8. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-8-Symbol&quot;&gt;&lt;a href=&quot;#ES6-8-Symbol&quot; class=&quot;headerlink&quot; title=&quot;[ES6] 8. Symbol
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 7. Template literal</title>
    <link href="https://jaeyeophan.github.io/2017/04/19/ES6-7-Template-literal/"/>
    <id>https://jaeyeophan.github.io/2017/04/19/ES6-7-Template-literal/</id>
    <published>2017-04-19T07:26:04.000Z</published>
    <updated>2017-04-19T07:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-7-Template-literal"><a href="#ES6-7-Template-literal" class="headerlink" title="[ES6] 7. Template literal"></a>[ES6] 7. Template literal</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">`template literal`</span>);</div></pre></td></tr></table></figure>
<p>ES6에서 문자열 처리를 보다 간편하게 할 수 있는 <code>템플릿</code>을 제공한다. 문자열 처리를 위해 single quote나 double quote가 아닌 <strong>Backtick</strong>을 사용한다. 변수를 <code>${ }</code>로 감싸서 inline으로 표현할 수 있으며 \n을 작성할 필요없이 Backtick 안에서 개행을 해주면 된다. 기존의 템플릿 엔진들에서 제공하고 있었던 기능인 <code>${ }</code> 안에는 <code>변수</code> 또는 <code>연산식</code> 등의 <code>표현식</code>이 들어갈 수 있다.<br><em>Example code&gt;</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">"jbee"</span>;</div><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Hi, "</span> + name + <span class="string">"!\nHave a nice day!"</span>);</div><div class="line"><span class="comment">// console&gt;</span></div><div class="line"><span class="comment">// Hi, jbee!</span></div><div class="line"><span class="comment">// Have a nice day!</span></div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">let</span> grettingTemplate = <span class="string">`</span></div><div class="line">Hi, <span class="subst">$&#123;name&#125;</span>!</div><div class="line">Have a nice day!</div><div class="line">`;</div><div class="line"><span class="built_in">console</span>.log(grettingTemplate);</div><div class="line"><span class="comment">//console&gt;</span></div><div class="line"><span class="comment">// Hi, jbee!</span></div><div class="line"><span class="comment">// Have a nice day!</span></div></pre></td></tr></table></figure></p>
<p>Template literal을 사용하여 거추장스러운 <code>&#39;+&#39;</code>이나 <code>&#39;\n&#39;</code>을 더이상 사용하지 않아도 된다.</p>
<h2 id="tagged-template"><a href="#tagged-template" class="headerlink" title="tagged template"></a>tagged template</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">"jbee"</span></div><div class="line"><span class="keyword">let</span> num = <span class="number">27</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`hi, <span class="subst">$&#123;name&#125;</span>! Have a nice day! <span class="subst">$&#123;num&#125;</span> is your number`</span>);</div><div class="line"><span class="comment">//console&gt; hi, jbee! Have a nice day! 27 is your number</span></div></pre></td></tr></table></figure>
<p>위 템플릿 리터럴을 <code>tagged template</code>을 사용하여 <code>text</code>와 <code>value</code>로 분리할 수 있다. <code>text</code>는 공백 문자를 기준으로 <code>배열</code>의 형태로 파라미터가 들어오며, ${ } 안의 표현식은 <code>value</code>라는 파라미터로 <code>String</code> type으로 들어온다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">text, value</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> value);</div><div class="line">&#125;</div><div class="line">greet <span class="string">`hi, <span class="subst">$&#123;name&#125;</span>! Have a nice day! <span class="subst">$&#123;num&#125;</span> is your number`</span>;</div><div class="line"><span class="comment">//console&gt; [ 'hi, ', '! Have a nice day! ', ' is your number' ]</span></div><div class="line"><span class="comment">//console&gt; jbee</span></div><div class="line"><span class="comment">//console&gt; string</span></div></pre></td></tr></table></figure></p>
<p>parameter로 넘겨지는 <code>value</code>는 하나인데, 템플릿 리터럴에는 표현식이 두개가 존재한다. 그렇기 때문에 number에 해당하는 값이 함수로 넘겨지지 못했다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">text, value, value2</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">    <span class="built_in">console</span>.log(value2);</div><div class="line">&#125;</div><div class="line">greet <span class="string">`hi, <span class="subst">$&#123;name&#125;</span>! Have a nice day! <span class="subst">$&#123;num&#125;</span> is your number`</span>;</div><div class="line"><span class="comment">//console&gt; [ 'hi, ', '! Have a nice day! ', ' is your number' ]</span></div><div class="line"><span class="comment">//console&gt; jbee</span></div><div class="line"><span class="comment">//console&gt; 27</span></div></pre></td></tr></table></figure></p>
<p>이렇게 해결할 수 있지만, 지난 chapter에서 다룬 <code>Rest parameter</code>를 사용할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">text, ...value</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line">greet <span class="string">`hi, <span class="subst">$&#123;name&#125;</span>! Have a nice day! <span class="subst">$&#123;num&#125;</span> is your number`</span>;</div><div class="line"><span class="comment">//console&gt; [ 'hi, ', '! Have a nice day! ', ' is your number' ]</span></div><div class="line"><span class="comment">//console&gt; [ 'jbee', 27 ]</span></div></pre></td></tr></table></figure></p>
<h3 id="템플릿-리터컬의-표현식-값-결정"><a href="#템플릿-리터컬의-표현식-값-결정" class="headerlink" title="템플릿 리터컬의 표현식 값 결정"></a>템플릿 리터컬의 표현식 값 결정</h3><p>템플릿 리터럴을 사용하여 문자열을 함수의 파라미터를 넘길 수 있을 것이다. 그렇다면 템플릿 러터럴 내부의 표현식의 값은 언제 결정될까?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Assign expression statement</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">`ecmascript`</span>;</div><div class="line">    <span class="built_in">console</span>.log(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> name = <span class="string">`jbee`</span>;</div><div class="line">greeting(<span class="string">`Hi, <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line"><span class="comment">//console&gt; Hi, jbee</span></div></pre></td></tr></table></figure></p>
<p>함수의 파라미터로 <strong>넘겨질 때부터</strong> 결정되어 넘어가기 때문에 <code>greeting</code>이라는 함수 내부에 있는 local variable인 <code>ecmascript</code>라는 단어가 <code>name</code>으로 들어가지 않고 <code>jbee</code>라는 문자열이 <code>name</code>의 값으로 결정되었다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>7. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-7-Template-literal&quot;&gt;&lt;a href=&quot;#ES6-7-Template-literal&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[TS] 0. Quick Start</title>
    <link href="https://jaeyeophan.github.io/2017/04/19/TS-0-Quick-Start/"/>
    <id>https://jaeyeophan.github.io/2017/04/19/TS-0-Quick-Start/</id>
    <published>2017-04-19T04:49:15.000Z</published>
    <updated>2017-04-19T07:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/typescript.png" alt=""></p>
<h1 id="TS-0-Quick-Start"><a href="#TS-0-Quick-Start" class="headerlink" title="[TS] 0. Quick Start"></a>[TS] 0. Quick Start</h1><p>이 포스팅은 TypeScript Official Document를 번역 및 의역한 자료입니다. 직접 타이핑 해본 결과 5분정도 소요되는 짧은 Quick start 입니다:) 가볍게 봐주세요.</p>
<h2 id="Install-TypeScript"><a href="#Install-TypeScript" class="headerlink" title="Install TypeScript"></a>Install TypeScript</h2><p>npm을 통해서 간단하게 TypeScript를 설치할 수 있습니다. VSCode 등 타입스크립트를 지원하는 에디터에서는 플러그인을 통해서 설치가 가능합니다.</p>
<p>via npm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g typescript</div></pre></td></tr></table></figure></p>
<p>command를 이용하여 또는 Editor를 열어 <code>greeter.ts</code>라는 파일을 만듭니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch greeter.ts</div></pre></td></tr></table></figure></p>
<p><code>greeter.ts</code>코드는 다음과 같습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = <span class="string">"Jane User"</span>;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</div></pre></td></tr></table></figure></p>
<p>TypeScript는 <code>.ts</code>라는 확장자를 사용합니다. 이 파일은 컴파일되어 <code>greeter.js</code>파일이 됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tsc greeter.ts</div></pre></td></tr></table></figure></p>
<p><code>tsc</code>라는 명령어를 통해서 TypeScript로 작성된 파일을 컴파일할 수 있습니다.<br>현재 <code>greeter.ts</code>에 작성되어있는 코드는 기존의 JavaScript와 다를 바가 없습니다. 이 JavaScript code인 <code>greeter.ts</code>에 TypeScript 문법을 하나씩 추가해보겠습니다.</p>
<h2 id="TypeScript가-제공하는-대표적인-기능"><a href="#TypeScript가-제공하는-대표적인-기능" class="headerlink" title="TypeScript가 제공하는 대표적인 기능"></a>TypeScript가 제공하는 대표적인 기능</h2><h3 id="Type-annotations"><a href="#Type-annotations" class="headerlink" title="Type annotations"></a>Type annotations</h3><p>동적으로 변수의 타입을 결정했던 JavaScript에게 타입이 생겼습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>TypeScript</strong>는 Type을 제공합니다. Type annotations는 함수가 받는 parameter에 타입을 지정해주어, 함수 내부에서 별도의 타입 체크 없이 parameter를 사용할 수 있게 해줍니다. 즉, <code>person</code>에 다른 타입의 parameter가 주어지면 error가 발생하게 됩니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</div></pre></td></tr></table></figure></p>
<p>error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">greeter.ts(7,26): Supplied parameters do not match any signature of call target</div></pre></td></tr></table></figure></p>
<p>타입스크립트는 코드의 구조와 작성된 <code>type annotation</code>으로 정적 분석을 제공합니다. 위와 같이 error가 발생하더라도 타입스크립트 파일은 컴파일되어 <code>.js</code>파일을 만들게 됩니다. TypeScript의 역할은 제대로 동작하지 않을 것 같은 코드에 대해 개발자에게 <code>warning</code>해주는 역할이라고 생각해도 될 것 같습니다 :)</p>
<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>Java개발자라면 익숙한 <code>interface</code> 문법입니다. 위에서 사용했던 예제를 <code>interface</code>를 사용하여 확장해보겠습니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Person &#123;</div><div class="line">    firstName: <span class="built_in">string</span>;</div><div class="line">    lastName: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = &#123; firstName: <span class="string">"Jane"</span>, lastName: <span class="string">"User"</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</div></pre></td></tr></table></figure></p>
<p>함수의 parameter에 <code>String</code>이라는 타입 대신 인터페이스(interface)를 적용했습니다. Java의 Generic과 비슷하게 보이는데요, interface를 사용하여 함수가 넘겨받는 parameter의 타입을 보다 구체적으로 정의할 수 있게 되었습니다. 위의 예제 코드와 마찬가지로 정의된 type과 맞지 않은 type의 parameter가 전달되면 error를 출력합니다.</p>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>ES6(ECMAScript2015)에서부터 추가된 <code>Class</code> 문법입니다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Student &#123;</div><div class="line">    fullName: <span class="built_in">string</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName, <span class="keyword">public</span> middleInitial, <span class="keyword">public</span> lastName</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + middleInitial + <span class="string">" "</span> + lastName;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> Student(<span class="string">"Jane"</span>, <span class="string">"M."</span>, <span class="string">"User"</span>);</div></pre></td></tr></table></figure></p>
<p>ES6의 <code>Class</code>와는 약간 다른 모습을 보입니다. 바로 Class 내부에서 <code>field member</code>를 갖게 된 것입니다. 하지만 그 근본은 ES6의 <code>Class</code>와 같습니다. JavaScript에서 프로토타입을 통해 구현했던 OOP를 보다 간결한 방법으로 문법을 제공하는 것입니다.</p>
<p>공식 문서에서 제공하는 Quick Start를 통해서 TypeScript 맛보기를 해봤습니다. 감사합니다.</p>
<p><em>0. Quick start end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/typescript.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;TS-0-Quick-Start&quot;&gt;&lt;a href=&quot;#TS-0-Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;[TS] 0. Qui
    
    </summary>
    
      <category term="TypeScript" scheme="https://jaeyeophan.github.io/categories/TypeScript/"/>
    
    
      <category term="ts" scheme="https://jaeyeophan.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 근황</title>
    <link href="https://jaeyeophan.github.io/2017/04/19/TypeScript-Recent/"/>
    <id>https://jaeyeophan.github.io/2017/04/19/TypeScript-Recent/</id>
    <published>2017-04-19T04:39:38.000Z</published>
    <updated>2017-04-28T06:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/typescript.png" alt=""></p>
<h1 id="TypeScript-근황"><a href="#TypeScript-근황" class="headerlink" title="TypeScript 근황"></a>TypeScript 근황</h1><p>얼마 전, 구글의 발표에 타입스크립트에 관심을 갖게 되었습니다. 기술적인 내용보다는 여러 기술 소식이 담긴 포스팅입니다.<br>이 포스팅은 17년 4월 중순 경에 작성되었으며 작성되는 시점의 TypeScript version은 <code>2.2 version</code>입니다.<br>(4월 28일, 2.3 version이 release되었습니다.)</p>
<h2 id="JavaScript의-미래"><a href="#JavaScript의-미래" class="headerlink" title="JavaScript의 미래"></a>JavaScript의 미래</h2><p>올해가 벌써 2017년이니, 재작년인 2015년에 <code>ECMAScript2015(aka ECMAScript6 or ES6)</code>가 JavaScript 표준으로 정의되었고, 작년에는 <code>ECMAScript2016(aka ECMAScript7 or ES7)</code>이 발표되었습니다. 머지않아 <code>ECMAScript2017</code>도 발표될 예정(6월 예정)이라고 합니다. <code>Node.js</code>의 등장으로 JavaScript가 소프트웨어 개발 환경에서 막대한 비중을 차지하자 현재 <a href="https://github.com/tc39/tc39-notes" target="_blank" rel="external">tc39</a>라는 커뮤니티에서 끊임없이 JavaScript라는 언어의 표준을 명세하고 있습니다. 이것은 무엇을 의미할까요?</p>
<p>TypeScript에 대한 이야기를 하기 위해 JavaScript에 관한 내용은 다음 글을 참조하시면 좋을 것 같아 링크를 첨부합니다. <a href="http://d2.naver.com/helloworld/2809766" target="_blank" rel="external">2017년과 이후 JavaScript의 동향 - JavaScript(ECMAScript)</a></p>
<h2 id="TypeScript의-정체"><a href="#TypeScript의-정체" class="headerlink" title="TypeScript의 정체"></a>TypeScript의 정체</h2><blockquote>
<p>TypeScript란 JavaScript의 <code>super set</code>이다.</p>
</blockquote>
<p>어디선가 이런 말을 많이 들어봤을것 같은데요.<br><img src="/images/typescript_javascript.png" alt=""><br>사실, TypeScript는 JavaScript입니다. 기존의 JavaScript와는 다르게 <code>.ts</code>라는 확장자를 갖고 있지만 결국 JavaScript로 compile되는 언어입니다. JavaScript의 성장과 동시에 언어 자체의 한계점을 인지한 MicroSoft는 JavaScript에 <code>타입(Type)</code>을 추가해서 TypeScript를 만듭니다.(TypeScript의 Type system을 <a href="https://en.wikipedia.org/wiki/Structural_type_system" target="_blank" rel="external">Structural Type System</a>이라고 합니다.) 그리고 2016년 9월에 TypeScript 2.0 버전이 공개되었습니다.(현재는 <a href="http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html" target="_blank" rel="external">2.2 version</a> 이네요!)</p>
<p>이와 같은 움직임은 Google에서 개발한 <code>Dart</code>에서도 찾아볼 수 있습니다. 하지만 얼마 전, 프론트엔드 개발자들의 눈길을 끌만한 소식이 들려왔습니다.</p>
<blockquote>
<p><a href="http://www.zdnet.co.kr/news/news_view.asp?artice_id=20170413085316&amp;lo=z45" target="_blank" rel="external">MS 타입스크립트, 구글 사내 표준 언어되다.</a></p>
</blockquote>
<p>Google이 만든 프론트엔드 프레임워크 Angular2(얼마 전, <a href="http://angularjs.blogspot.kr/2017/03/angular-400-now-available.html" target="_blank" rel="external">Angular4.0</a>이 release되었습니다.)도 Dart, JavaScript를 지원하지만 TypeScript를 공식 언어로 지정할만큼 TypeScript의 위상이 높아졌다는 것을 확인하실 수 있습니다.</p>
<p>이에 더해, 다들 아실만한 협업 툴인 Slack이 TypeScript로 전환했습니다. 다음 링크는 Slack이 코드베이스를 TypeScript로 전환하는 과정에 대한 글로, 정적 분석의 필요성에 대해 인지했다는 내용입니다. <a href="https://slack.engineering/typescript-at-slack-a81307fa288d" target="_blank" rel="external">TypeScript at Slack</a></p>
<p>Facebook에서 개발한 정적 타입 분석기(static typechecker of javascript) <code>Flow</code>도 마찬가지 행보가 아닐까 생각합니다. 애플리케이션의 규모가 커질 수록 안정성에 대한 수요는 높아지기 마련입니다. 동적 타입이라는 JavaScript가 갖고 있는 장점이자 한계점인 이 부분을 해결하기 위해 정적 분석의 중요도가 높아지고 있습니다.</p>
<h2 id="TypeScript의-현주소"><a href="#TypeScript의-현주소" class="headerlink" title="TypeScript의 현주소"></a>TypeScript의 현주소</h2><p>이젠 개발자들에게 없어서는 안 될 존재인 <code>Github</code>의 <a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="external">star</a>를 보니 <code>21,076개</code>입니다! (star개수가 64,556개인 React에 비하면 한참 멀었네요!) 올라온 Issue는 2,351개고 진행중인 Pull Request는 82개가 되네요.<br><img src="/images/github_typescript.png" alt=""><br>다음 자료는 Github과 마찬가지로 개발자들에게 없어선 안 되는 <a href="http://stackoverflow.com/insights/survey/2017/#most-loved-dreaded-and-wanted" target="_blank" rel="external">Stackoverflow의 조사 자료</a>입니다. 개발자들이 가장 사랑하는 언어로 Rust, Smalltalk에 이어 TypeScript가 3위를 당당히 차지했습니다.(오, 이 정도인가요?)<br><img src="/images/stackoverflow_survey.png" alt=""></p>
<p>추가된 Type System을 바탕으로 여러 가지 Tool과 구문 완성(content assist) 등의 도움을 받을 수 있는 TypeScript 소개였습니다. 얼마 전 공개된 <a href="https://github.com/Microsoft/reactxp" target="_blank" rel="external">ReactXP</a>를 만든 Microsoft의 지지로 React에서도 TypeScript 방향으로 가지 않을까 생각해봅니다.(Flow 의문의 1패?) 무엇을 공부해야 하나 걱정할 필요없는 프론트엔드 개발자분들을 응원합니다. 감사합니다 :)</p>
<p><em>cf. 짤막하게 정리해본 <a href="https://jaeyeophan.github.io/2017/04/19/TS-0-Quick-Start/">TypeScript Quick Start</a>입니다.</em></p>
<h3 id="TypeScript와-관련된-글과-그룹"><a href="#TypeScript와-관련된-글과-그룹" class="headerlink" title="TypeScript와 관련된 글과 그룹"></a>TypeScript와 관련된 글과 그룹</h3><ul>
<li><a href="https://github.com/Microsoft/TypeScript-Handbook" target="_blank" rel="external">Microsoft/TypeScript-Handbook</a></li>
<li><a href="https://www.facebook.com/groups/TSKorea/?hc_ref=SEARCH" target="_blank" rel="external">TypeScript Korea 페이스북 그룹</a></li>
<li><a href="http://han41858.tistory.com/14" target="_blank" rel="external">TypeScript를 무서워하지 않아도 되는 이유(번역)</a></li>
<li><a href="https://hyunseob.github.io/2016/09/25/typescript-introduction/index.html" target="_blank" rel="external">TypeScript 소개(hyunseob님 블로그)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/typescript.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;TypeScript-근황&quot;&gt;&lt;a href=&quot;#TypeScript-근황&quot; class=&quot;headerlink&quot; title=&quot;TypeScript 근황&quot;&gt;&lt;/
    
    </summary>
    
      <category term="TypeScript" scheme="https://jaeyeophan.github.io/categories/TypeScript/"/>
    
    
      <category term="ts" scheme="https://jaeyeophan.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 6. Class sugar syntax</title>
    <link href="https://jaeyeophan.github.io/2017/04/18/ES6-6-Class-sugar-syntax/"/>
    <id>https://jaeyeophan.github.io/2017/04/18/ES6-6-Class-sugar-syntax/</id>
    <published>2017-04-18T12:11:41.000Z</published>
    <updated>2017-04-19T07:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-6-Class-sugar-syntax"><a href="#ES6-6-Class-sugar-syntax" class="headerlink" title="[ES6] 6. Class sugar syntax"></a>[ES6] 6. Class sugar syntax</h1><p>ES6에서 자바스크립트에는 존재하지 않았던 클래스(Class)가 도입되었다. 자바스크립트에 대해 잘 모르는 사람들이 Java에서의 클래스와 <strong>똑같은</strong> 기능을 하는 녀석인 줄 알고 많이 혼동한다. 자바스크립트는 기본적으로 프로토타입 기반의 언어이기 때문에 새로 도입된 이 클래스도 프로토타입 기반이다. 객체 지향을 <strong>흉내</strong>내고 있지만, 그 내부는 여전히 프로토타입으로 구성되어 있는 것이다. 프로토타입 기반으로 객체 지향적으로 설계하는 것이 복잡하여 클래스라는 <code>sugar syntax</code> 문법이 도입된 것이다. 그렇기 때문에 이에 따른 제약사항이 많다. 편한 만큼 고려해야할 사항도 많은 것이다. 하나씩 살펴보자.</p>
<h3 id="클래스는-선언문-또는-표현식으로-선언할-수-있다"><a href="#클래스는-선언문-또는-표현식으로-선언할-수-있다" class="headerlink" title="클래스는 선언문 또는 표현식으로 선언할 수 있다."></a>클래스는 선언문 또는 표현식으로 선언할 수 있다.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//클래스 선언문으로 클래스 선언</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//클래스 표현식으로 클래스 선언</span></div><div class="line"><span class="keyword">let</span> name = <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> name = <span class="class"><span class="keyword">class</span> <span class="title">inner_name</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name); <span class="comment">//function</span></div></pre></td></tr></table></figure>
<p>자바스크립트 엔진은 <code>class</code> 키워드를 만나면 <code>Class 오브젝트</code>를 생성한다. <code>Class 오브젝트</code>도 마찬가지로 <code>String</code>, <code>Function</code>과 같은 하나의 오브젝트 타입이다.<br><em>cf&gt; 표현식으로 선언했을 때의 inner-name은 클래스 내부에서 자신을 호출할 때 사용한다.</em></p>
<h2 id="Class-keyword-특징"><a href="#Class-keyword-특징" class="headerlink" title="Class keyword 특징"></a>Class keyword 특징</h2><ol>
<li>클래스의 선언부는 <code>let</code>과 <code>const</code>와 마찬가지로 호이스팅은 되지만 <code>temporary dead zone</code>이 형성된다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Not hoisting</span></div><div class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//Error:Use before declaration</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>클래스를 선언한 다음, <code>new</code> 키워드를 통해 인스턴스를 생성할 수 있다.</p>
<ol>
<li>클래스의 코드는 ‘use strict’를 선언하지 않아도 strict 모드에서 실행된다.</li>
<li>메서드를 작성할 때, function 키워드와 콜론( : )을 작성하지 않는다.</li>
<li>메서드 사이에 콤마(,)를 작성하지 않는다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//class method</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"name"</span>);</div><div class="line">    &#125;</div><div class="line">    getScore() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"score"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student();</div><div class="line">student.getName(); <span class="comment">//name</span></div><div class="line">student.getScore(); <span class="comment">//score</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>바로 함수를 정의하고, 콤마(,)가 없다.</p>
<ol>
<li>생성자 함수를 통해 인스턴스를 생성하면 window에 설정되지만 class 키워드를 통해 생성하면 window에 설정되지 않는다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//window object?</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.Foo); <span class="comment">// function Foo() &#123;...&#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.Student); <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Sugar-Syntax"><a href="#Sugar-Syntax" class="headerlink" title="Sugar Syntax"></a>Sugar Syntax</h3><p><code>Class</code> keyword는 <code>sugar syntax</code>라고 했다. 자바스크립트는 기본적으로 <code>prototype</code> 기반의 언어이기 때문에 엔진이 <code>prototype</code>에 메서드들을 연결한다. 즉, 클래스에서 메서드를 추가하면 자동으로 <code>prototype</code>에 추가되는 것이다. 자바스크립트에서는 프로토타입을 사용해서 클래스 밖에서도 메서드를 추가할 수 있다. 이미 생성된 인스턴스에 메서드를 추가하게 되면, 이전에 생성되었던 인스턴스들이 새로 추가된 메서드들을 공유해야하기 때문에 부하가 걸리지만 코드가 유연해진다는 장점도 존재한다. 위 예제코드에서 생성한 <code>Student</code> 클래스의 프로토타입에 새로운 메서드를 추가하고 이전에 생성되었던 인스턴스에서 새롭게 추가한 메서드를 호출할 수 있는 것이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//add method to prototype</span></div><div class="line">Student.prototype.newMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Add new Method"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">student.newMethod(); <span class="comment">//Add new Method</span></div></pre></td></tr></table></figure></p>
<p><code>new</code> 연산자는 <code>constructor</code>를 호출하면서 받은 인자들을 <code>constructor</code>의 파라미터로 전달한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//new keyword</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, score) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.score = score;</div><div class="line">    &#125;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Student(<span class="string">"Jbee"</span>, <span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(s.name); <span class="comment">//Jbee</span></div><div class="line"><span class="built_in">console</span>.log(s.score); <span class="comment">//100</span></div><div class="line"><span class="built_in">console</span>.log(s.getName()); <span class="comment">//Jbee</span></div></pre></td></tr></table></figure></p>
<p>위 예제 코드에서 볼 수 있듯이 <code>class</code> 키워드로 선언한 클래스에 대해서 <code>new</code> keyword를 통해 인스턴스를 생성할 수 있다. 이 때 클래스 내부에 별도의 <code>constructor</code>가 설정되어 있지 않으면 기존의 <code>protytype</code>의 constructor가 호출되고 이를 <code>default constructor</code>라고 부른다. 별도로 작성된 <code>constructor</code>는 <code>Student.prototype.constructor</code>로 호출된다. </p>
<p><strong>new 키워드가 실행되는 메커니즘은 다음과 같다.</strong></p>
<pre><code>1. constructor는 우선적으로 빈(empty) 오브젝트(인스턴스)를 생성한다.
2. 넘겨받은 파라미터를 생성한 빈 오브젝트의 프로퍼티에 설정한다.
3. 인스턴스를 먼저 생성하므로, constructor 내부에서는 this keyword를 통해 인스턴스 자신을 가리킬 수 있다.
4. constructor에 별도의 return이 설정되어 있지 않으면 new를 실행한 곳으로 해당 클래스의 인스턴스를 반환한다.
</code></pre><p><em>cf) constructor는 별도의 return을 설정할 수 있다. 하지만 Number, String 값이 return value로 지정되어 있으면 이를 무시하고 인스턴스 자신을 return 한다.</em></p>
<h3 id="extends-keyword"><a href="#extends-keyword" class="headerlink" title="extends keyword"></a>extends keyword</h3><p>자바스크립트에서도 <code>extends</code>라는 키워드를 통해 클래스 간의 상속이 가능해졌다. 상속받은 클래스(이하 슈퍼클래스)의 메소드를 사용할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div><div class="line">bar.getName(); <span class="comment">//Foo</span></div></pre></td></tr></table></figure></p>
<p>슈퍼 클래스의 메소드를 오버라이딩(Overriding)할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Bar"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div><div class="line">bar.getName(); <span class="comment">//Bar</span></div></pre></td></tr></table></figure></p>
<p><code>super</code> 키워드를 통해 슈퍼 클래스의 메소드에 접근할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Foo"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    getName() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName() + <span class="string">" Bar"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div><div class="line">bar.getName(); <span class="comment">//Foo Bar</span></div></pre></td></tr></table></figure></p>
<h3 id="constructor-keyword"><a href="#constructor-keyword" class="headerlink" title="constructor keyword"></a>constructor keyword</h3><p>서브 클래스에서 정의된 <code>constructor</code>가 없다면 슈퍼 클래스의 <code>constructor</code>가 호출된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo constructor"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div><div class="line"><span class="comment">//console&gt; Foo constructor</span></div></pre></td></tr></table></figure></p>
<p>서브 클래스에서 <code>constructor</code>를 정의하려면 <strong>반드시</strong> constructor 내부에서 <code>super()</code>를 <strong>호출</strong>해야 한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Bar"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div><div class="line"><span class="comment">//ReferenceError: this is not defined</span></div></pre></td></tr></table></figure></p>
<p><code>constructor()</code>메소드 안에서 <code>super()</code>를 호출해주면, 슈퍼 클래스가 생성되고 서브 클래스가 생성된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo constructor"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Bar constructor"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div><div class="line"><span class="comment">//console&gt; Foo constructor</span></div><div class="line"><span class="comment">//console&gt; Bar constructor</span></div></pre></td></tr></table></figure></p>
<h3 id="static-keyword"><a href="#static-keyword" class="headerlink" title="static keyword"></a>static keyword</h3><p>자바스크립트 클래스에서 <code>static</code> 키워드를 사용하면 정적 메소드를 정의할 수 있다. 정적 메소드라 함은 인스턴스를 생성하지 않고 사용할 수 있는 메소드를 말한다. 정적 메소드는 인스턴스를 생성하지 않고도 호출할 수 있지만 인스턴스에서는 호출할 수 없다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.getName(); <span class="comment">//Foo</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</div><div class="line">foo.getName();<span class="comment">//not a function</span></div></pre></td></tr></table></figure></p>
<p>정적 메소드는 <code>prototype</code>에 추가되지 않는다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> getName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getAlias() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"foo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Foo.prototype.getName === Foo.getName);<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(Foo.prototype.getAlias === <span class="keyword">new</span> Foo().getAlias);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>클래스 내부에서 <code>정적 변수(static variable)</code>를 지정할 수는 없지만 클래스 밖에서 지정할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line">Foo.name = <span class="string">"foo"</span>;</div></pre></td></tr></table></figure></p>
<h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><p><code>new.target</code>을 이용하면 슈퍼 클래스에서 서브 클래스의 static method에 접근할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);<span class="comment">//[Function: Bar]</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span>.target);<span class="comment">//function</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Foo: "</span>, <span class="keyword">new</span>.target.getName());<span class="comment">//Foo: bar</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> getName() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"bar"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</div></pre></td></tr></table></figure></p>
<p>ES6에서 추가된 sugar syntax class에 대해 정리해봤다. TypeScript에서는 보다 더 객체지향적인 클래스로서 사용할 수 있다. 아직 불완전한 ES6의 클래스는 신경써야할 부분도 많지만 제대로 이해하면 <code>prototype</code>을 사용하는 것보다 효율적으로 자바스크립트 코드를 작성할 수 있을 것이다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>6. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-6-Class-sugar-syntax&quot;&gt;&lt;a href=&quot;#ES6-6-Class-sugar-syntax&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 5. Destructuring and Default Parameter</title>
    <link href="https://jaeyeophan.github.io/2017/04/18/ES6-5-Destructuring-and-Default-Parameter/"/>
    <id>https://jaeyeophan.github.io/2017/04/18/ES6-5-Destructuring-and-Default-Parameter/</id>
    <published>2017-04-18T11:59:34.000Z</published>
    <updated>2017-04-18T12:01:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-5-Destructuring-and-Default-Parameter"><a href="#ES6-5-Destructuring-and-Default-Parameter" class="headerlink" title="[ES6] 5. Destructuring and Default Parameter"></a>[ES6] 5. Destructuring and Default Parameter</h1><h2 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h2><p><code>shorthand</code> 방식을 이용하여 함수의 반환값을 <strong>바로 객체에 할당</strong>할 수 있다. 이 때 함수에서 반환되는 <strong>프로퍼티 값</strong>과 <strong>지역 변수</strong>의 이름이 같아야 가능하다. 이렇게 하면 함수의 반환 값을 <strong>임시 객체에 저장</strong>하고 그 객체의 프로퍼티를 통해 접근하여 지역 변수에 할당하는 과정을 축소할 수 있다. 굳이 전체를 객체에 할당하지 않고 부분적으로만 할당도 가능하다. 즉, 리턴되는 값이 객체일 경우, 그 객체를 분해하여 바로 지역변수로 접근이 가능하다는 것이다. (iterable protocol을 구현해야만 destructuring이 가능하다.)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUser</span>(<span class="params">first, last</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> fullName = first + <span class="string">" "</span> + last;</div><div class="line">    <span class="keyword">return</span> &#123;first, last, fullName&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123; first, last, fullName &#125; = buildUser(<span class="string">"Sam"</span>, <span class="string">"Williams"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(first); <span class="comment">// Sam</span></div><div class="line"><span class="built_in">console</span>.log(last); <span class="comment">// Williams</span></div><div class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">// Sam Williams</span></div></pre></td></tr></table></figure></p>
<p>굳이 전체를 객체에 할당하지 않고 부분적으로만 할당도 가능하다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; fullName &#125; = buildUser(<span class="string">"Sam"</span>, <span class="string">"Williams"</span>);</div><div class="line"><span class="built_in">console</span>.log( fullName ); <span class="comment">// Sam Williams</span></div></pre></td></tr></table></figure></p>
<h3 id="Method-Initializer-Shorthand"><a href="#Method-Initializer-Shorthand" class="headerlink" title="Method Initializer Shorthand"></a>Method Initializer Shorthand</h3><p>객체에 함수를 추가할 때, 객체의 프로퍼티에 익명 함수를 추가하는 방식을 사용했다. ES6에서는 메소드를 활용한다. 비교를 위해 ES5도 함께 제시한다.<br><em>ES6code&gt;&gt;</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUser</span>(<span class="params">first, last, postCount</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        first,</div><div class="line">        last,</div><div class="line">        <span class="attr">isActive</span> : <span class="function"><span class="keyword">function</span>(<span class="params"> </span>) </span>&#123;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>ES6code&gt;&gt;</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUser</span>(<span class="params">first, last, postCount</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        first,</div><div class="line">        last,</div><div class="line">        isActive( ) &#123;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Destructuring-Assignment"><a href="#Destructuring-Assignment" class="headerlink" title="Destructuring Assignment"></a>Destructuring Assignment</h3><p>오른쪽의 배열을 분할하여 왼쪽 변수에 값을 <code>할당</code>한다. 인덱스 번째의 엘리먼트 값을 인덱스 번째의 변수에 할당하는 것이다. 엘리먼트가 아직 남았는데 할당할 변수가 없다면 그대로 할당되지 않고, 엘리먼트가 남지 않았는데 할당한 변수가 있다면 그 변수는 <code>undefined</code>로 할당된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> one, two, three, four;</div><div class="line"><span class="comment">//case1</span></div><div class="line">[one, two] = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(one); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(two); <span class="comment">//2</span></div><div class="line"><span class="comment">//case2</span></div><div class="line">[one, two, three] = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(one); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(two); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(three);<span class="comment">//undefined</span></div><div class="line"><span class="comment">//case3</span></div><div class="line">[one, two] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(one); two<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(two); <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>이전 Chapter에서 다뤘던 <code>Spread</code> 연산자를 사용할 수 있으며, 공백으로 두어 해당 값을 건너 뛰고 <code>할당</code>할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[one, ...other] = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>];</div><div class="line"><span class="built_in">console</span>.log(one); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(other); <span class="comment">//[23, 24, 25]</span></div><div class="line"></div><div class="line">[one, , , four] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(one); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(four); <span class="comment">//4</span></div></pre></td></tr></table></figure></p>
<h2 id="Default-Value"><a href="#Default-Value" class="headerlink" title="Default Value"></a>Default Value</h2><p><code>destructuring</code>을 통해 값을 할당할 때, 해당하는 값이 없을 때, <code>undefined</code> 대신 할당할 default value를 지정해줄 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [first, second, third = <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(first); <span class="comment">//1 by destructuring</span></div><div class="line"><span class="built_in">console</span>.log(second); <span class="comment">//2 by destructuring</span></div><div class="line"><span class="built_in">console</span>.log(third); <span class="comment">//3 by default value</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [fourth, fifth, sixth = <span class="number">6</span>] = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">66</span>];</div><div class="line"><span class="built_in">console</span>.log(first); <span class="comment">//4 by destructuring</span></div><div class="line"><span class="built_in">console</span>.log(second); <span class="comment">//5 by destructuring</span></div><div class="line"><span class="built_in">console</span>.log(third); <span class="comment">//66 by destructuring</span></div></pre></td></tr></table></figure></p>
<h2 id="Default-Parameter"><a href="#Default-Parameter" class="headerlink" title="Default Parameter"></a>Default Parameter</h2><p>parameter에 값이 넘어가지 않아도, default value로 설정된 값이 해당 파라미터 대신 값이 할당된다. parameter에서도 마찬가지로 기존의 default value는 <code>undefined</code> 값이었지만, 그 값을 코드 상에서 설정할 수 있게 된 것이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> somethingFunction = <span class="function">(<span class="params">prev, post = <span class="number">20</span></span>) =&gt;</span> prev + post;</div><div class="line"><span class="built_in">console</span>.log(somethingFunction(<span class="number">1</span>)); <span class="comment">//21 by default parameter</span></div><div class="line"><span class="built_in">console</span>.log(somethingFunction(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//3</span></div><div class="line"><span class="built_in">console</span>.log(somethingFunction(<span class="number">1</span>, <span class="literal">undefined</span>)); <span class="comment">//21 by default parameter</span></div><div class="line"><span class="built_in">console</span>.log(somethingFunction(<span class="number">1</span>, <span class="literal">null</span>)); <span class="comment">//1</span></div></pre></td></tr></table></figure></p>
<p>함수에도 <code>length</code>라는 <code>property</code>가 따로 존재한다. 그런데 이 때, <code>default parameter</code>는 <code>length</code>에서 무시된다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getTotal(<span class="number">100</span>); <span class="comment">//1</span></div><div class="line">getTotal(<span class="number">100</span>, <span class="number">0.05</span>); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(getTotal.length); <span class="comment">//1</span></div></pre></td></tr></table></figure></p>
<p>한 가지 주의할 점이 있다. <code>let</code>으로 선언했을 때의 값은 Default parameter와는 다르기 때문에, <code>Destructuring</code>으로 값을 덮어쓸 수 있다. <code>let</code>으로 선언했을 때 할당하는 것과는 다르다.<br><em>default parameter code&gt;&gt;</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> salary = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</div><div class="line"><span class="keyword">let</span> [low, avg, high = <span class="number">500</span>] = salary;</div><div class="line"><span class="built_in">console</span>.log(high); <span class="comment">//500</span></div></pre></td></tr></table></figure></p>
<p><em>let assignment code</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> low, avg, high = <span class="number">500</span>;</div><div class="line"><span class="keyword">let</span> [low, avg, high] = salary;</div><div class="line"><span class="built_in">console</span>.log(high); <span class="comment">//300</span></div></pre></td></tr></table></figure></p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>5. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-5-Destructuring-and-Default-Parameter&quot;&gt;&lt;a href=&quot;#ES6-5-Destructuring-and-De
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 4. Spread, Rest parameter</title>
    <link href="https://jaeyeophan.github.io/2017/04/18/ES6-4-Spread-Rest-parameter/"/>
    <id>https://jaeyeophan.github.io/2017/04/18/ES6-4-Spread-Rest-parameter/</id>
    <published>2017-04-18T11:59:13.000Z</published>
    <updated>2017-04-18T12:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-4-Spread-Rest-parameter"><a href="#ES6-4-Spread-Rest-parameter" class="headerlink" title="[ES6] 4. Spread, Rest parameter"></a>[ES6] 4. Spread, Rest parameter</h1><h2 id="Spread"><a href="#Spread" class="headerlink" title="Spread"></a>Spread</h2><p>이터러블 오브젝트(Iterable object)의 엘리먼트를 하나씩 분리하여 전개한다. 전개한 결과를 변수에 할당하거나 호출하는 함수의 파라미터 값으로 사용할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> prev = [<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">let</span> post = [<span class="number">7</span>,<span class="number">8</span>];</div><div class="line"><span class="keyword">let</span> spreadObj = [<span class="number">1</span>, <span class="number">2</span>, ...prev, <span class="number">5</span>, <span class="number">6</span>, ...post, <span class="number">9</span>];</div><div class="line"><span class="built_in">console</span>.log(spreadObj); <span class="comment">// [1,2,3,4,5,6,7,8,9]</span></div></pre></td></tr></table></figure></p>
<p>문자열도 가능하다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sObj = [...<span class="string">"javascript"</span>];</div><div class="line"><span class="built_in">console</span>.log(sObj); <span class="comment">// ["j", "a", "v", "a", "s", "c", "r", "i", "p", "t"]</span></div></pre></td></tr></table></figure></p>
<h2 id="Rest-Parameter"><a href="#Rest-Parameter" class="headerlink" title="Rest Parameter"></a>Rest Parameter</h2><p>함수를 호출할 때 <code>spread</code> 연산자로 파라미터를 작성한 형태를 <code>Rest parameter</code>라고 한다. 함수안의 코드를 확인하지 않고도 호출문의 형태만 보더라도 <code>Rest parameter</code> 의 범위를 확인할 수 있어 가독성이 높아진다. 또한 <code>Rest parameter</code>는 <code>Array</code>, 즉 배열이므로 <code>Array</code> 오브젝트의 메서드를 사용할 수 있다. 그리고 <code>arrow funtion</code>에서도 사용 가능하다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> price = [<span class="number">12</span>, <span class="number">20</span>, <span class="number">18</span>];</div><div class="line"><span class="built_in">Math</span>.max(<span class="number">12</span>, <span class="number">20</span>, <span class="number">18</span>);</div></pre></td></tr></table></figure></p>
<p>built in Object인 <code>Math</code>의 메소드 <code>max()</code>를 사용하기 위해서는 위 코드처럼 하나씩 넘겨줘야 한다.<br>또는 다음과 같은 방식을 사용했다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, price);</div></pre></td></tr></table></figure></p>
<p>하지만 Rest parameter를 사용하면 보다 깔끔하게 작성할 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> maxPrice = Max.max(...price);</div></pre></td></tr></table></figure></p>
<p><code>Rest parameter</code>는 동적(dynamic)으로 생성된 파라미터라고 할 수 있기 때문에 함수의 <code>length</code>에서 포함되지 않는다. 기본적으로 함수의 <code>length</code> 프로퍼티는 파라미터의 개수를 의미한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> getElementByRestWithParam = <span class="function">(<span class="params">param, ...rest</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(param);</div><div class="line">    <span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getElementByRestWithParam.length); <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p>위 <code>getElementByRestWithParam</code>메소드에 <code>spread operator</code>를 사용하여 인자를 넘겨보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> values = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</div><div class="line">getElementByRestWithParam(...values); <span class="comment">//10 \n [20, 30]</span></div></pre></td></tr></table></figure></p>
<p><code>param</code>에 해당하는 인자가 따로받아지고 나머지 인자들은 <code>...rest</code>로 넘겨지면서 다시 배열로 넘겨지게 된다!</p>
<p><code>Rest parameter</code>를 사용했을 때와 기존의 자바스크립트에서 <code>arguments</code>를 사용했을 때의 차이점을 살펴보기 위해 <code>arguments</code>에 대해서 잠깐 살펴보자. <code>arguments</code>는 <code>Array-Like Object</code>라는 공식 명칭을 하고 있는 유사 배열이다.</p>
<h2 id="Array-like-Object-유사배열"><a href="#Array-like-Object-유사배열" class="headerlink" title="Array-like Object(유사배열)"></a>Array-like Object(유사배열)</h2><p>배열의 특징 중 하나는 index를 갖고 있어서 임의 접근(random access)가 가능하고, 그 index가 순차적으로 증가한다는 것이다. 만약 Object가 key값이 순차적으로 증가하는 값이고, 그에 따른 value가 존재한다고 했을 때, <code>Array-like Object</code>라고 한다.<br>배열의 인덱스 값을 프로퍼티 key 값으로 사용하는 것이다. 그리고 <code>length</code>라는 프로퍼티 값을 갖고 있어서 전개를 할 때는 다음과 같이 한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Array-like object</span></div><div class="line"><span class="keyword">let</span> arrLikeObj = &#123;</div><div class="line">    <span class="number">0</span> : <span class="string">"zero"</span>,</div><div class="line">    <span class="number">1</span> : <span class="string">"one"</span>,</div><div class="line">    <span class="number">2</span> : <span class="string">"two"</span>,</div><div class="line">    <span class="attr">length</span> : <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLikeObj.length; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(arrLikeObj[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Array-like Object</code>는 다음 두 가지 규칙을 모두 만족시켜야 한다.<br>1) 프로퍼티 값을 0부터 1씩 증가하면서 순차적으로 작성해야 한다.<br>2) length를 프로퍼티 키로 하여 전체 프로퍼티 수를 작성해야 한다.</p>
<h3 id="Rest-parameter와-arguments의-차이"><a href="#Rest-parameter와-arguments의-차이" class="headerlink" title="Rest parameter와 arguments의 차이"></a>Rest parameter와 arguments의 차이</h3><p><code>arguments</code>도 <code>Array-like object</code>이기 때문에 <code>for statement</code>로 전개할 수 있다. 하지만 <code>Array</code> 오브젝트의 메서드를 사용할 수 없다. 이것이 치명적인 단점인 것이다. 또 <code>arrow function</code>에서는 <code>arguments</code>를 사용할 수 없다. 이것으로 미루어보아, ES6에서는 <code>arguments</code>를 사용하는 것을 최대한 자제하라는 느낌이다. 사실 <code>Rest parameter</code>에 익숙해지기만 하면 <code>arguments</code>를 통해 인자를 받는 것보다 유연한 코드를 작성할 수 있다.</p>
<p>한 가지 더 한계점을 지적하자면 <code>arguments</code>는 함수 내부를 봐야 어느 부분에서 <code>arguments</code> 객체를 사용하는지 알 수 있어 코드의 가독성이 떨어지게 된다. 그렇기 때문에 <code>arguments</code> 대신 <code>Rest parameter</code>를 도입한 것이다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>4. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-4-Spread-Rest-parameter&quot;&gt;&lt;a href=&quot;#ES6-4-Spread-Rest-parameter&quot; class=&quot;head
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 3. Iteration and for-of statement</title>
    <link href="https://jaeyeophan.github.io/2017/04/18/ES6-3-Iteration-and-for-of-statement/"/>
    <id>https://jaeyeophan.github.io/2017/04/18/ES6-3-Iteration-and-for-of-statement/</id>
    <published>2017-04-18T04:52:45.000Z</published>
    <updated>2017-04-19T07:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-3-Iteration-and-for-of-statement"><a href="#ES6-3-Iteration-and-for-of-statement" class="headerlink" title="[ES6] 3. Iteration and for-of statement"></a>[ES6] 3. Iteration and for-of statement</h1><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>ES6에서 이터레이션 프로토콜은 <code>Iterable 프로토콜</code>과 <code>Iterator 프로토콜</code>로 구성된다. 결론부터 말하자면 <code>Iterable</code> 프로토콜은 <code>반복 가능한</code> 오브젝트를 나타내는 프로토콜이며 <code>Iterator</code> 프로토콜은 이터러블 오브젝트(<code>Iterable</code> 프로토콜을 따르는 오브젝트)의 값을 <code>작성한 순서대로</code> 처리하는 프로토콜이다.</p>
<h2 id="Iterable-프로토콜"><a href="#Iterable-프로토콜" class="headerlink" title="Iterable 프로토콜"></a>Iterable 프로토콜</h2><p>오브젝트의 반복 처리 규약을 정의한다.<br>Iterable Object</p>
<blockquote>
<p><code>String</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, <code>TypedArray</code>, <code>Argument</code> 오브젝트<br>그리고 DOM의 <code>NodeList</code>  </p>
</blockquote>
<p>위 <em>built in 오브젝트</em>들은 디폴트로 이터러블 프로토콜을 갖고 있다. 오브젝트에 <code>Symbol.iterator</code>가 있어야 한다. <code>Symbol.iterator</code>가 있는 오브젝트는 이터러블 오브젝트이다. 또한 상속받은 prototype chain에 있어도 이터러블 오브젝트이다. (<code>Symbol</code>에 대해서는 다음 포스팅에서 다룰 예정이다.)</p>
<p>오브젝트에 프로퍼티 존재 여부를 체크할 때, Symbol의 경우에는 arrayObj[Symbol.iterator]와 같이 대괄호 <code>[]</code>안에 작성해야 한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [];</div><div class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//function values() &#123; [native code] &#125;</span></div><div class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p><code>Array</code> 오브젝트는 기본적으로 <code>iterable</code> 프로토콜을 구현한다. 하지만 <code>Object</code> 오브젝트는 <code>iterable</code> 프로토콜을 구현하지 않는다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> iteratorObj = arr[<span class="built_in">Symbol</span>.iterator](); <span class="comment">//iterator object</span></div></pre></td></tr></table></figure></p>
<p>위와 같은 방식으로 <code>Array</code> 오브젝트는 <code>iterator</code>를 받을 수 있다.</p>
<h2 id="JavaScript’s-for-statement"><a href="#JavaScript’s-for-statement" class="headerlink" title="JavaScript’s for statement"></a>JavaScript’s for statement</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>forEach 문은 arrow function과 조합해서 사용하면 추가적인 변수 사용 없이 코드가 깔끔해질 수 있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> categories = [<span class="string">"Korean"</span>, <span class="string">"English"</span>, <span class="string">"Science"</span>];</div><div class="line">categories.forEach(<span class="function"><span class="params">subject</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(subject);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>&gt;</div><div class="line">Korean</div><div class="line">English</div><div class="line">Science</div></pre></td></tr></table></figure></p>
<p>그러나 for문 중간에 <code>continue</code> or <code>break</code> or <code>return</code> 선언문을 사용할 수 없다. 기존의 for-statement를 사용하는 경우를 보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; subject.length; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(categoried[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>&gt;</div><div class="line">Korean</div><div class="line">English</div><div class="line">Science</div></pre></td></tr></table></figure></p>
<p><code>i</code>의 역할이 index를 잡아주는 것 외에 별 다른 기능이 없다. 그래서 기존에는 <code>for-in statement</code>를 사용했다. 하지만 <code>for-in statement</code> 은 문자열 키를 가진 일반 <code>Object</code> 객체들을 위해 만들어졌다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> categories) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>&gt;</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>그래서 ES6에서 <code>for-of statement</code>가 등장했다.<br><code>for-in loop statement</code>는 객체의 프로퍼티들을 루프시키지만 <code>for-of loop statement</code>는 데이터, 즉 배열 내의 value들을 루프시킨다. 또한 for-of는 배열 뿐만 아니라 다양한 Collection에도 동작한다. DOM의 <code>NodeList</code> 같은 유사배열 객체들에도 동작하고 문자열에도 동작한다. 문자열을 유니코드 문자의 배열로 취급하는 것이다. <code>Set</code>, <code>Map</code>에 대해서도 물론 동작한다. key-value 형식의 <code>Map</code>에 대해서는 for (let [key, value] of …) 형식의 <code>destructuring</code>을 사용한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> categories) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>&gt;</div><div class="line">Korean</div><div class="line">English</div><div class="line">Science</div></pre></td></tr></table></figure></p>
<p>단 for-of 가 만능은 아니다. <code>Object</code>의 프로퍼티를 루프시키려면 <code>for-in statement</code>를 사용해야 한다. 사실 <code>for-in statement</code>의 원래 목적이 <code>Object</code> 프로퍼티 순회이다. Object를 순회하는 경우를 살펴보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="attr">one</span> : <span class="number">1</span>,</div><div class="line">    <span class="attr">two</span> : <span class="number">2</span>,</div><div class="line">    <span class="attr">three</span> : <span class="number">3</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>위와 같은 obj라는 오브젝트를 정의한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// console&gt;</span></div><div class="line"><span class="comment">// one</span></div><div class="line"><span class="comment">// two</span></div><div class="line"><span class="comment">// three</span></div></pre></td></tr></table></figure></p>
<p><code>for-in statement</code>를 통해서 정의한 오브젝트(obj)의 key를 순회했다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="built_in">console</span>.log(obj[key]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// console&gt;</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>오브젝트를 <code>for-of statment</code>로 순회하면 어떻게 될까?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> obj) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// console&gt;</span></div><div class="line"><span class="comment">// Uncaught TypeError: obj[Symbol.iterator] is not a function</span></div></pre></td></tr></table></figure></p>
<p>JavaScript의 Object는 <code>iterable</code> 프로토콜을 구현하고 있지 않기 때문에, <code>Symbol.iterator</code>가 존재하지 않는다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>3. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-3-Iteration-and-for-of-statement&quot;&gt;&lt;a href=&quot;#ES6-3-Iteration-and-for-of-stat
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 2. Arrow function</title>
    <link href="https://jaeyeophan.github.io/2017/04/18/ES6-2-Arrow-function/"/>
    <id>https://jaeyeophan.github.io/2017/04/18/ES6-2-Arrow-function/</id>
    <published>2017-04-18T04:51:49.000Z</published>
    <updated>2017-04-18T04:54:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-2-Arrow-Function"><a href="#ES6-2-Arrow-Function" class="headerlink" title="[ES6] 2. Arrow Function"></a>[ES6] 2. Arrow Function</h1><blockquote>
<p>Always apply to ‘Anonymous function’  </p>
</blockquote>
<h3 id="자바스크립트의-Scope"><a href="#자바스크립트의-Scope" class="headerlink" title="자바스크립트의 Scope"></a>자바스크립트의 Scope</h3><p>자바스크립트에서 생성자 함수를 통해 객체를 생성하면 변수 scope가 변경된다. 즉, 생성자 함수 내부에서의 this는 자신을 호출한 대상이 아닌 생성자 함수를 가리키게 된다. 생성자 함수를 통해 생성되는 객체의 과정 때문이다. 그래서 우리는 여태껏 별의 별짓을 다해왔다. <code>self</code>며 <code>bind</code>며 jQuery에서는 <code>proxy</code>라는 녀석도 사용했다.</p>
<h3 id="새로운-function의-등장"><a href="#새로운-function의-등장" class="headerlink" title="새로운 function의 등장"></a>새로운 function의 등장</h3><p>하지만 이제는 새로 도입된 Arrow function 을 사용하여 변수 스코프를 보존하자. Arrow function를 통해서 함수를 정의하게 되면, 변수들이 사용되는 위치와는 상관없이 변수들이 정의되어 있는 값으로 scope가 binding  된다. 한 가지 특징을 덧붙이자면, arrow function을 사용하게 되면 <code>arguments</code> 객체가 생성되지 않는다. 하지만 우리는 ES6 문법을 사용하는 이상, <code>arguments</code>는 필요하지 않다!</p>
<h3 id="Arrow-function-Rule"><a href="#Arrow-function-Rule" class="headerlink" title="Arrow function Rule"></a>Arrow function Rule</h3><p>ES6의 arrow function에는 몇 가지 규칙이 존재하며 대부분의 <code>lamda</code>에서도 비슷한 규칙을 가지고 있어서 <code>lamda</code>를 사용해본 경험이 있다면 어색하지 않을 것이다.<br>1) Parameter와 화살표 사이에서 개행할 수 없다.<br>2) Parameter가 하나일 때는 괄호를 생략할 수 있다.<br>3) Parameter가 없으면 소괄호( ( ) )만 작성한다.<br>4) Block scope({ })를 지정하지 않고 한 줄로 arrow function을 사용할 때는 return이 생략될 수 있다.<br>5) 그 반대로 block scope를 사용한다면 return을 명시해줘야 한다.</p>
<h3 id="Arrow-Function은-this를-bind하지-않는다"><a href="#Arrow-Function은-this를-bind하지-않는다" class="headerlink" title="Arrow Function은 this를 bind하지 않는다!"></a>Arrow Function은 this를 bind하지 않는다!</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"todos"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//#todos</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"todos"</span>).addEventListener(<span class="string">"click"</span>, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="this의-정체"><a href="#this의-정체" class="headerlink" title="this의 정체"></a>this의 정체</h3><p>ES5에서 <code>this</code> 결정되는 세 가지 조건을 짚고 넘어가자.<br>1) 생성자 내에서<br>생성자 함수를 <code>new</code>라는 키워드를 통해 호출하면 내부에서 <code>this</code>는 인스턴스 그 자체를 가리킨다. 생성자 함수 내부에서 <code>return this;</code>가 생략되어 있기 때문이다.<br>2) 함수 내에서<br><code>this</code>는 생략된 매개 변수이다. 무엇이 함수를 호출했는가가 <code>this</code>를 결정한다.<br>3) <code>bind</code>, <code>apply</code>, <code>call</code> method or <code>proxy</code> method of jQuery<br><code>this</code>는 메소드로 바꿔준 대상을 가리키게 된다.</p>
<blockquote>
<p>그렇다면 arrow function 내에서 <code>this</code>는 무엇을 가리키는가.</p>
</blockquote>
<p>해당 function을 정의한 영역의 <code>this</code>를 가져온다. 한 단계 더 위의 <code>element</code>를 가리키는 것이다. 그렇기 때문에 <code>prototype</code>에 함수를 정의할 때 arrow function을 사용할 때 내부적으로 <code>this</code>를 사용하게 되면 객체를 가리키지 않고 <code>window</code> 객체를 가리키게 된다. 또한 arrow function은 명식적으로 <code>bind</code>, <code>call</code>로 <code>this</code>를 넣어줘도 이를 무시한다. </p>
<p>ES6의 arrow function은 단순히 함수를 간단하게 작성할 수 있는 문법이 아니다. 기존의 방식대로 function을 작성해야만 의도대로 작동하는 function이 존재할 수 있고, arrow function으로 기존의 function을 작성하던 방식보다 편하게 작성할 수 있게 된 것이다. 두 가지 방식의 차이점을 제대로 이해하고 새로운 문법과 기존의 문법을 적재적소에서 사용하는 것이 중요해졌다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>2. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-2-Arrow-Function&quot;&gt;&lt;a href=&quot;#ES6-2-Arrow-Function&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] 1. let-const</title>
    <link href="https://jaeyeophan.github.io/2017/04/18/let-const/"/>
    <id>https://jaeyeophan.github.io/2017/04/18/let-const/</id>
    <published>2017-04-18T04:48:49.000Z</published>
    <updated>2017-04-18T06:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javascript_es6.png" alt=""></p>
<h1 id="ES6-1-let-amp-const"><a href="#ES6-1-let-amp-const" class="headerlink" title="[ES6] 1. let &amp; const"></a>[ES6] 1. let &amp; const</h1><h2 id="자바스크립트의-정체"><a href="#자바스크립트의-정체" class="headerlink" title="자바스크립트의 정체"></a>자바스크립트의 정체</h2><p>ES6의 문법을 알아보기 전에 자바스크립트의 정체부터 짚고 넘어가자. 자바스크립트(JavaScript)는 스크립트 언어(script language)이다. 스크립트 언어란 언어를 해석하고 실행하는 소프트웨어가 따로 존재하는 언어를 말한다. 자바스크립트를 해석하고 실행하는 소프트웨어는 브라우저이다. 이러한 의미에서 Node.js는 스크립트 언어라고 부르기 애매하고 자바스크립트의 문법을 차용한 다른 종류의 언어라고 생각해도 된다. 우선 자바스크립트가 해석되고 실행될 때 일어나는 확보, 선언, 할당의 차이를 짚고 넘어가야 한다.</p>
<h3 id="확보"><a href="#확보" class="headerlink" title="확보"></a>확보</h3><p>브라우저가 자바스크립트를 해석할 때 두 번 파싱(parsing)하는데 첫번째 파싱 과정이 Lexical parsing이다. 실행하려는 자바스크립트 파일이 어느 정도의 메모리를 필요로 하는지를 파악하기 위해 거치는 파싱 과정인 것이다. 이 때 자바스크립트의 모든 선언문은 호이스팅(Hoisting)된다.</p>
<h3 id="선언"><a href="#선언" class="headerlink" title="선언"></a>선언</h3><p>말 그대로 선언하는 것이다. 값을 할당하지 않는다. 자바스크립트에서는 선언만 하고 값을 할당하지 않으면 <code>undefined</code>값이 할당된다. 확보만 하고 선언하지 않으면 <code>Reference error</code>가 발생하고 선언을 하게 되면 <code>undefined</code> 값이 나타난다.</p>
<h3 id="할당"><a href="#할당" class="headerlink" title="할당"></a>할당</h3><p>특정 변수에 값을 할당하는 과정이다. 위 세 가지를 파악해야 var와 let 그리고 const의 차이를 이해할 수 있다</p>
<h2 id="let-으로-변수-선언-및-할당하기"><a href="#let-으로-변수-선언-및-할당하기" class="headerlink" title="let 으로 변수 선언 및 할당하기"></a>let 으로 변수 선언 및 할당하기</h2><p><code>let</code>으로 정의된 변수들은 호이스팅 되지 않는다(?) 많은 책에서 이렇게 표현을 하고 있지만 이것은 잘못된 표현이다. <code>let</code>으로 선언해도 호이스팅된다. lexical parsing 단계에서 해당 자바스크립트 파일을 실행하기 위한 메모리 공간을 <code>확보</code>해야하기 때문이다. 다만 let 변수로 선언이 되기 전 해당 변수를 사용하려고 하면 <code>Reference error</code>를 발생시키는 것이다. 예제 코드를 보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5 code :: var&gt;&gt;</span></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//undefined</span></div><div class="line"><span class="keyword">var</span> foo;</div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//undefined</span></div><div class="line">foo = <span class="number">123</span>;</div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//123</span></div><div class="line"><span class="comment">//ES6 code :: let&gt;&gt;</span></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//ReferenceError</span></div><div class="line"><span class="keyword">let</span> foo;</div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//undefined</span></div><div class="line">foo = <span class="number">123</span>;</div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//123</span></div></pre></td></tr></table></figure></p>
<p>let은 유효범위의 시작에서부터 <code>선언</code>될 때까지 <code>temporary dead zone</code>(일시적 사각지대)에 있다. 이 dead zone에서 사용하게 되면 <code>ReferenceError</code>가 발생한다.</p>
<h2 id="let-in-for-loop"><a href="#let-in-for-loop" class="headerlink" title="let - in for loop"></a>let - in for loop</h2><p><code>let</code>으로 정의된 변수들은 가장 가까운 블록으로 scope이 지정된다. 여기서 블록이란 <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code> 같은 문법으로 지정된 { } 블록을 의미한다. <code>let</code> 키워드를 사용한 변수들은 그들 각각의 함수 block에 귀속된다. <code>var</code> 변수는 함수의 상단으로 호이스팅(hoisting) 된 다음에, 각 루프의 반복 변수가 공유하게 된다. 그 결과, 콜백이 실행될 때는 <code>i</code> 변수가 루프의 마지막 변수로 할당된다. 즉 콜백에서 반복문을 제어하는 변수에 접근할 때 문제가 발생하는 것이다. 이러한 문제를 해결하기 위해 <code>let</code>을 사용할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5 code</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadFiles</span>(<span class="params"> userNames </span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> userNames)&#123;</div><div class="line">        _fetchProfiles(userNames[i], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(userNames[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">loadFiles([<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>]);</div><div class="line"></div><div class="line"><span class="built_in">console</span> &gt;</div><div class="line">D <span class="comment">// userNames[4]</span></div><div class="line">D <span class="comment">// userNames[4]</span></div><div class="line">D <span class="comment">// userNames[4]</span></div><div class="line">D <span class="comment">// userNames[4]</span></div></pre></td></tr></table></figure>
<p>ES6 code<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6 code</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadFiles</span>(<span class="params"> userNames </span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i <span class="keyword">in</span> userNames )&#123;</div><div class="line">        _fetchProfile(userNames[i], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(userNames[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">loadFiles([<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>]);</div><div class="line"></div><div class="line"><span class="built_in">console</span> &gt;</div><div class="line">A <span class="comment">// userNames[1]</span></div><div class="line">B <span class="comment">// userNames[2]</span></div><div class="line">C <span class="comment">// userNames[3]</span></div><div class="line">D <span class="comment">// userNames[4]</span></div></pre></td></tr></table></figure></p>
<h2 id="let-cannot-be-redeclared"><a href="#let-cannot-be-redeclared" class="headerlink" title="let cannot be redeclared"></a>let cannot be redeclared</h2><p><code>let</code>으로 정의된 변수는 같은 블록에서 재할당될 수는 있지만 재정의는 될 수 없다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6 code</span></div><div class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</div><div class="line">a = <span class="string">'world'</span> <span class="comment">// available</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</div><div class="line"><span class="keyword">let</span> a = <span class="string">'world'</span>; <span class="comment">// false -&gt; TypeError : Identifier ‘a’ has already been declared</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> flashMessage = <span class="string">'hello'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadFiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> flashMessage = <span class="string">'world'</span>; <span class="comment">// available</span></div><div class="line">    <span class="keyword">return</span> flashMessage;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="const-declaration"><a href="#const-declaration" class="headerlink" title="const - declaration"></a>const - declaration</h2><p>const 키워드는 상수라고 불리는 읽기 전용 변수를 생성하는 키워드이다. 한 번 할당되면, 상수는 새로운 값으로 할당될 수 없다. 명시적으로 변경을 시도해도 바뀌지 않는다. const 로 정의된 변수는 초기에 정의할 때, 반드시 값을 할당해줘야 한다. 그렇지 않으면 <code>Syntax Error</code>가 발생하게 된다. const 로 정의된 변수는 <code>let</code>과 마찬가지로, 가장 가까운 블록에 scope이 지정된다.</p>
<p>예제로 사용된 코드는 <a href="https://github.com/JaeYeopHan/ECMAScript6_study" target="_blank" rel="external">Github Respository</a>에서 확인하실 수 있습니다.</p>
<p><em>chapter 1. end</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript_es6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES6-1-let-amp-const&quot;&gt;&lt;a href=&quot;#ES6-1-let-amp-const&quot; class=&quot;headerlink&quot; title=&quot;[
    
    </summary>
    
      <category term="ECMAScript6" scheme="https://jaeyeophan.github.io/categories/ECMAScript6/"/>
    
    
      <category term="es6" scheme="https://jaeyeophan.github.io/tags/es6/"/>
    
  </entry>
  
</feed>
